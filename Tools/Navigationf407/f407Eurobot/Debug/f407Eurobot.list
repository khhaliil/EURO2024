
f407Eurobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071d0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08007358  08007358  00017358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007540  08007540  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007540  08007540  00017540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007548  08007548  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007548  08007548  00017548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800754c  0800754c  0001754c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000005a0  20000010  20000010  00020010  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200005b0  200005b0  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a5df  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a04  00000000  00000000  0002a662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a80  00000000  00000000  0002c068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000081c  00000000  00000000  0002cae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020d58  00000000  00000000  0002d304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d2ad  00000000  00000000  0004e05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c9884  00000000  00000000  0005b309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002ed8  00000000  00000000  00124b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00127a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007340 	.word	0x08007340

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08007340 	.word	0x08007340

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_uldivmod>:
 8000ac4:	b953      	cbnz	r3, 8000adc <__aeabi_uldivmod+0x18>
 8000ac6:	b94a      	cbnz	r2, 8000adc <__aeabi_uldivmod+0x18>
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	bf08      	it	eq
 8000acc:	2800      	cmpeq	r0, #0
 8000ace:	bf1c      	itt	ne
 8000ad0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ad4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad8:	f000 b970 	b.w	8000dbc <__aeabi_idiv0>
 8000adc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae4:	f000 f806 	bl	8000af4 <__udivmoddi4>
 8000ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af0:	b004      	add	sp, #16
 8000af2:	4770      	bx	lr

08000af4 <__udivmoddi4>:
 8000af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af8:	9e08      	ldr	r6, [sp, #32]
 8000afa:	460d      	mov	r5, r1
 8000afc:	4604      	mov	r4, r0
 8000afe:	460f      	mov	r7, r1
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d14a      	bne.n	8000b9a <__udivmoddi4+0xa6>
 8000b04:	428a      	cmp	r2, r1
 8000b06:	4694      	mov	ip, r2
 8000b08:	d965      	bls.n	8000bd6 <__udivmoddi4+0xe2>
 8000b0a:	fab2 f382 	clz	r3, r2
 8000b0e:	b143      	cbz	r3, 8000b22 <__udivmoddi4+0x2e>
 8000b10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b14:	f1c3 0220 	rsb	r2, r3, #32
 8000b18:	409f      	lsls	r7, r3
 8000b1a:	fa20 f202 	lsr.w	r2, r0, r2
 8000b1e:	4317      	orrs	r7, r2
 8000b20:	409c      	lsls	r4, r3
 8000b22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b26:	fa1f f58c 	uxth.w	r5, ip
 8000b2a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b2e:	0c22      	lsrs	r2, r4, #16
 8000b30:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b34:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b38:	fb01 f005 	mul.w	r0, r1, r5
 8000b3c:	4290      	cmp	r0, r2
 8000b3e:	d90a      	bls.n	8000b56 <__udivmoddi4+0x62>
 8000b40:	eb1c 0202 	adds.w	r2, ip, r2
 8000b44:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b48:	f080 811c 	bcs.w	8000d84 <__udivmoddi4+0x290>
 8000b4c:	4290      	cmp	r0, r2
 8000b4e:	f240 8119 	bls.w	8000d84 <__udivmoddi4+0x290>
 8000b52:	3902      	subs	r1, #2
 8000b54:	4462      	add	r2, ip
 8000b56:	1a12      	subs	r2, r2, r0
 8000b58:	b2a4      	uxth	r4, r4
 8000b5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b62:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b66:	fb00 f505 	mul.w	r5, r0, r5
 8000b6a:	42a5      	cmp	r5, r4
 8000b6c:	d90a      	bls.n	8000b84 <__udivmoddi4+0x90>
 8000b6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000b72:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b76:	f080 8107 	bcs.w	8000d88 <__udivmoddi4+0x294>
 8000b7a:	42a5      	cmp	r5, r4
 8000b7c:	f240 8104 	bls.w	8000d88 <__udivmoddi4+0x294>
 8000b80:	4464      	add	r4, ip
 8000b82:	3802      	subs	r0, #2
 8000b84:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b88:	1b64      	subs	r4, r4, r5
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	b11e      	cbz	r6, 8000b96 <__udivmoddi4+0xa2>
 8000b8e:	40dc      	lsrs	r4, r3
 8000b90:	2300      	movs	r3, #0
 8000b92:	e9c6 4300 	strd	r4, r3, [r6]
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	428b      	cmp	r3, r1
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0xbc>
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	f000 80ed 	beq.w	8000d7e <__udivmoddi4+0x28a>
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	e9c6 0500 	strd	r0, r5, [r6]
 8000baa:	4608      	mov	r0, r1
 8000bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb0:	fab3 f183 	clz	r1, r3
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	d149      	bne.n	8000c4c <__udivmoddi4+0x158>
 8000bb8:	42ab      	cmp	r3, r5
 8000bba:	d302      	bcc.n	8000bc2 <__udivmoddi4+0xce>
 8000bbc:	4282      	cmp	r2, r0
 8000bbe:	f200 80f8 	bhi.w	8000db2 <__udivmoddi4+0x2be>
 8000bc2:	1a84      	subs	r4, r0, r2
 8000bc4:	eb65 0203 	sbc.w	r2, r5, r3
 8000bc8:	2001      	movs	r0, #1
 8000bca:	4617      	mov	r7, r2
 8000bcc:	2e00      	cmp	r6, #0
 8000bce:	d0e2      	beq.n	8000b96 <__udivmoddi4+0xa2>
 8000bd0:	e9c6 4700 	strd	r4, r7, [r6]
 8000bd4:	e7df      	b.n	8000b96 <__udivmoddi4+0xa2>
 8000bd6:	b902      	cbnz	r2, 8000bda <__udivmoddi4+0xe6>
 8000bd8:	deff      	udf	#255	; 0xff
 8000bda:	fab2 f382 	clz	r3, r2
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f040 8090 	bne.w	8000d04 <__udivmoddi4+0x210>
 8000be4:	1a8a      	subs	r2, r1, r2
 8000be6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bea:	fa1f fe8c 	uxth.w	lr, ip
 8000bee:	2101      	movs	r1, #1
 8000bf0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bf4:	fb07 2015 	mls	r0, r7, r5, r2
 8000bf8:	0c22      	lsrs	r2, r4, #16
 8000bfa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bfe:	fb0e f005 	mul.w	r0, lr, r5
 8000c02:	4290      	cmp	r0, r2
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x124>
 8000c06:	eb1c 0202 	adds.w	r2, ip, r2
 8000c0a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x122>
 8000c10:	4290      	cmp	r0, r2
 8000c12:	f200 80cb 	bhi.w	8000dac <__udivmoddi4+0x2b8>
 8000c16:	4645      	mov	r5, r8
 8000c18:	1a12      	subs	r2, r2, r0
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c20:	fb07 2210 	mls	r2, r7, r0, r2
 8000c24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c28:	fb0e fe00 	mul.w	lr, lr, r0
 8000c2c:	45a6      	cmp	lr, r4
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x14e>
 8000c30:	eb1c 0404 	adds.w	r4, ip, r4
 8000c34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c38:	d202      	bcs.n	8000c40 <__udivmoddi4+0x14c>
 8000c3a:	45a6      	cmp	lr, r4
 8000c3c:	f200 80bb 	bhi.w	8000db6 <__udivmoddi4+0x2c2>
 8000c40:	4610      	mov	r0, r2
 8000c42:	eba4 040e 	sub.w	r4, r4, lr
 8000c46:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c4a:	e79f      	b.n	8000b8c <__udivmoddi4+0x98>
 8000c4c:	f1c1 0720 	rsb	r7, r1, #32
 8000c50:	408b      	lsls	r3, r1
 8000c52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c5a:	fa05 f401 	lsl.w	r4, r5, r1
 8000c5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000c62:	40fd      	lsrs	r5, r7
 8000c64:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c68:	4323      	orrs	r3, r4
 8000c6a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c6e:	fa1f fe8c 	uxth.w	lr, ip
 8000c72:	fb09 5518 	mls	r5, r9, r8, r5
 8000c76:	0c1c      	lsrs	r4, r3, #16
 8000c78:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c7c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c80:	42a5      	cmp	r5, r4
 8000c82:	fa02 f201 	lsl.w	r2, r2, r1
 8000c86:	fa00 f001 	lsl.w	r0, r0, r1
 8000c8a:	d90b      	bls.n	8000ca4 <__udivmoddi4+0x1b0>
 8000c8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c94:	f080 8088 	bcs.w	8000da8 <__udivmoddi4+0x2b4>
 8000c98:	42a5      	cmp	r5, r4
 8000c9a:	f240 8085 	bls.w	8000da8 <__udivmoddi4+0x2b4>
 8000c9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ca2:	4464      	add	r4, ip
 8000ca4:	1b64      	subs	r4, r4, r5
 8000ca6:	b29d      	uxth	r5, r3
 8000ca8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cac:	fb09 4413 	mls	r4, r9, r3, r4
 8000cb0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cb4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cb8:	45a6      	cmp	lr, r4
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x1da>
 8000cbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cc4:	d26c      	bcs.n	8000da0 <__udivmoddi4+0x2ac>
 8000cc6:	45a6      	cmp	lr, r4
 8000cc8:	d96a      	bls.n	8000da0 <__udivmoddi4+0x2ac>
 8000cca:	3b02      	subs	r3, #2
 8000ccc:	4464      	add	r4, ip
 8000cce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cd2:	fba3 9502 	umull	r9, r5, r3, r2
 8000cd6:	eba4 040e 	sub.w	r4, r4, lr
 8000cda:	42ac      	cmp	r4, r5
 8000cdc:	46c8      	mov	r8, r9
 8000cde:	46ae      	mov	lr, r5
 8000ce0:	d356      	bcc.n	8000d90 <__udivmoddi4+0x29c>
 8000ce2:	d053      	beq.n	8000d8c <__udivmoddi4+0x298>
 8000ce4:	b156      	cbz	r6, 8000cfc <__udivmoddi4+0x208>
 8000ce6:	ebb0 0208 	subs.w	r2, r0, r8
 8000cea:	eb64 040e 	sbc.w	r4, r4, lr
 8000cee:	fa04 f707 	lsl.w	r7, r4, r7
 8000cf2:	40ca      	lsrs	r2, r1
 8000cf4:	40cc      	lsrs	r4, r1
 8000cf6:	4317      	orrs	r7, r2
 8000cf8:	e9c6 7400 	strd	r7, r4, [r6]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	2100      	movs	r1, #0
 8000d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d04:	f1c3 0120 	rsb	r1, r3, #32
 8000d08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d0c:	fa20 f201 	lsr.w	r2, r0, r1
 8000d10:	fa25 f101 	lsr.w	r1, r5, r1
 8000d14:	409d      	lsls	r5, r3
 8000d16:	432a      	orrs	r2, r5
 8000d18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1c:	fa1f fe8c 	uxth.w	lr, ip
 8000d20:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d24:	fb07 1510 	mls	r5, r7, r0, r1
 8000d28:	0c11      	lsrs	r1, r2, #16
 8000d2a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d2e:	fb00 f50e 	mul.w	r5, r0, lr
 8000d32:	428d      	cmp	r5, r1
 8000d34:	fa04 f403 	lsl.w	r4, r4, r3
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x258>
 8000d3a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d42:	d22f      	bcs.n	8000da4 <__udivmoddi4+0x2b0>
 8000d44:	428d      	cmp	r5, r1
 8000d46:	d92d      	bls.n	8000da4 <__udivmoddi4+0x2b0>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	4461      	add	r1, ip
 8000d4c:	1b49      	subs	r1, r1, r5
 8000d4e:	b292      	uxth	r2, r2
 8000d50:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d54:	fb07 1115 	mls	r1, r7, r5, r1
 8000d58:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d5c:	fb05 f10e 	mul.w	r1, r5, lr
 8000d60:	4291      	cmp	r1, r2
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x282>
 8000d64:	eb1c 0202 	adds.w	r2, ip, r2
 8000d68:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d6c:	d216      	bcs.n	8000d9c <__udivmoddi4+0x2a8>
 8000d6e:	4291      	cmp	r1, r2
 8000d70:	d914      	bls.n	8000d9c <__udivmoddi4+0x2a8>
 8000d72:	3d02      	subs	r5, #2
 8000d74:	4462      	add	r2, ip
 8000d76:	1a52      	subs	r2, r2, r1
 8000d78:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d7c:	e738      	b.n	8000bf0 <__udivmoddi4+0xfc>
 8000d7e:	4631      	mov	r1, r6
 8000d80:	4630      	mov	r0, r6
 8000d82:	e708      	b.n	8000b96 <__udivmoddi4+0xa2>
 8000d84:	4639      	mov	r1, r7
 8000d86:	e6e6      	b.n	8000b56 <__udivmoddi4+0x62>
 8000d88:	4610      	mov	r0, r2
 8000d8a:	e6fb      	b.n	8000b84 <__udivmoddi4+0x90>
 8000d8c:	4548      	cmp	r0, r9
 8000d8e:	d2a9      	bcs.n	8000ce4 <__udivmoddi4+0x1f0>
 8000d90:	ebb9 0802 	subs.w	r8, r9, r2
 8000d94:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	e7a3      	b.n	8000ce4 <__udivmoddi4+0x1f0>
 8000d9c:	4645      	mov	r5, r8
 8000d9e:	e7ea      	b.n	8000d76 <__udivmoddi4+0x282>
 8000da0:	462b      	mov	r3, r5
 8000da2:	e794      	b.n	8000cce <__udivmoddi4+0x1da>
 8000da4:	4640      	mov	r0, r8
 8000da6:	e7d1      	b.n	8000d4c <__udivmoddi4+0x258>
 8000da8:	46d0      	mov	r8, sl
 8000daa:	e77b      	b.n	8000ca4 <__udivmoddi4+0x1b0>
 8000dac:	3d02      	subs	r5, #2
 8000dae:	4462      	add	r2, ip
 8000db0:	e732      	b.n	8000c18 <__udivmoddi4+0x124>
 8000db2:	4608      	mov	r0, r1
 8000db4:	e70a      	b.n	8000bcc <__udivmoddi4+0xd8>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	e742      	b.n	8000c42 <__udivmoddi4+0x14e>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <Nav_vNavigationRoutine>:
extern double Nav_KiAngle_d       ;
extern double Nav_KdAngle_d       ;


void Nav_vNavigationRoutine()
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	Nav_vFeedbackRoutine();
 8000dc4:	f000 f80c 	bl	8000de0 <Nav_vFeedbackRoutine>
	Nav_vPidDistance();
 8000dc8:	f000 f9ce 	bl	8001168 <Nav_vPidDistance>
	Nav_vPidAngle();
 8000dcc:	f000 fa2e 	bl	800122c <Nav_vPidAngle>
	Nav_vCalculateMotorsCommand();
 8000dd0:	f000 fa8e 	bl	80012f0 <Nav_vCalculateMotorsCommand>
	Nav_vMotorsRoutine();
 8000dd4:	f000 fb96 	bl	8001504 <Nav_vMotorsRoutine>
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	0000      	movs	r0, r0
	...

08000de0 <Nav_vFeedbackRoutine>:


void Nav_vFeedbackRoutine()
{
 8000de0:	b5b0      	push	{r4, r5, r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	//Read ticks from encoder mode timers
	if  ( ENCODER_RIGHT->CNT > 0 )
 8000de4:	4b80      	ldr	r3, [pc, #512]	; (8000fe8 <Nav_vFeedbackRoutine+0x208>)
 8000de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d008      	beq.n	8000dfe <Nav_vFeedbackRoutine+0x1e>
	{
		Nav_RightTicks_i32 = ( (int32_t) ( ENCODER_RIGHT->CNT - ( ENCODER_RIGHT->ARR / 2 ) ) )   ;
 8000dec:	4b7e      	ldr	r3, [pc, #504]	; (8000fe8 <Nav_vFeedbackRoutine+0x208>)
 8000dee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000df0:	4b7d      	ldr	r3, [pc, #500]	; (8000fe8 <Nav_vFeedbackRoutine+0x208>)
 8000df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df4:	085b      	lsrs	r3, r3, #1
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b7c      	ldr	r3, [pc, #496]	; (8000fec <Nav_vFeedbackRoutine+0x20c>)
 8000dfc:	601a      	str	r2, [r3, #0]
	}

	if( ENCODER_LEFT->CNT > 0 )
 8000dfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d00a      	beq.n	8000e1e <Nav_vFeedbackRoutine+0x3e>
	{

		Nav_LeftTicks_i32 =( (int32_t) ( ENCODER_LEFT->CNT - ( ENCODER_LEFT->ARR / 2 ) ) )   ;
 8000e08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e14:	085b      	lsrs	r3, r3, #1
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b75      	ldr	r3, [pc, #468]	; (8000ff0 <Nav_vFeedbackRoutine+0x210>)
 8000e1c:	601a      	str	r2, [r3, #0]
	}

	//convert measured distance from ticks to mm for every encoder
	Nav_MeasuredDistanceRight_mm_d = (double) ( Nav_RightTicks_i32 * Nav_ConvertRight_Ticks2mm_d ) ;
 8000e1e:	4b73      	ldr	r3, [pc, #460]	; (8000fec <Nav_vFeedbackRoutine+0x20c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fb22 	bl	800046c <__aeabi_i2d>
 8000e28:	4b72      	ldr	r3, [pc, #456]	; (8000ff4 <Nav_vFeedbackRoutine+0x214>)
 8000e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2e:	f7ff fb87 	bl	8000540 <__aeabi_dmul>
 8000e32:	4602      	mov	r2, r0
 8000e34:	460b      	mov	r3, r1
 8000e36:	4970      	ldr	r1, [pc, #448]	; (8000ff8 <Nav_vFeedbackRoutine+0x218>)
 8000e38:	e9c1 2300 	strd	r2, r3, [r1]
	Nav_MeasuredDistanceLeft_mm_d  = (double) ( Nav_LeftTicks_i32  * Nav_ConvertLeft_Ticks2mm_d  ) ;
 8000e3c:	4b6c      	ldr	r3, [pc, #432]	; (8000ff0 <Nav_vFeedbackRoutine+0x210>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fb13 	bl	800046c <__aeabi_i2d>
 8000e46:	4b6d      	ldr	r3, [pc, #436]	; (8000ffc <Nav_vFeedbackRoutine+0x21c>)
 8000e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e4c:	f7ff fb78 	bl	8000540 <__aeabi_dmul>
 8000e50:	4602      	mov	r2, r0
 8000e52:	460b      	mov	r3, r1
 8000e54:	496a      	ldr	r1, [pc, #424]	; (8001000 <Nav_vFeedbackRoutine+0x220>)
 8000e56:	e9c1 2300 	strd	r2, r3, [r1]

	//Measure distance of robot center ( (right + left)/2 )
	Nav_MeasuredDistance_mm_d = (double) ( ( Nav_MeasuredDistanceRight_mm_d   +  Nav_MeasuredDistanceLeft_mm_d ) / 2.0  ) ;
 8000e5a:	4b67      	ldr	r3, [pc, #412]	; (8000ff8 <Nav_vFeedbackRoutine+0x218>)
 8000e5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e60:	4b67      	ldr	r3, [pc, #412]	; (8001000 <Nav_vFeedbackRoutine+0x220>)
 8000e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e66:	f7ff f9b5 	bl	80001d4 <__adddf3>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	4610      	mov	r0, r2
 8000e70:	4619      	mov	r1, r3
 8000e72:	f04f 0200 	mov.w	r2, #0
 8000e76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e7a:	f7ff fc8b 	bl	8000794 <__aeabi_ddiv>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	460b      	mov	r3, r1
 8000e82:	4960      	ldr	r1, [pc, #384]	; (8001004 <Nav_vFeedbackRoutine+0x224>)
 8000e84:	e9c1 2300 	strd	r2, r3, [r1]

	//Measure linear velocity
	Nav_MeasuredVelocity_mm_d = Nav_MeasuredDistance_mm_d - Nav_PrevMeasuredDistance_mm_d ;
 8000e88:	4b5e      	ldr	r3, [pc, #376]	; (8001004 <Nav_vFeedbackRoutine+0x224>)
 8000e8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e8e:	4b5e      	ldr	r3, [pc, #376]	; (8001008 <Nav_vFeedbackRoutine+0x228>)
 8000e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e94:	f7ff f99c 	bl	80001d0 <__aeabi_dsub>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	495b      	ldr	r1, [pc, #364]	; (800100c <Nav_vFeedbackRoutine+0x22c>)
 8000e9e:	e9c1 2300 	strd	r2, r3, [r1]
	Nav_PrevMeasuredDistance_mm_d = Nav_MeasuredDistance_mm_d;
 8000ea2:	4b58      	ldr	r3, [pc, #352]	; (8001004 <Nav_vFeedbackRoutine+0x224>)
 8000ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea8:	4957      	ldr	r1, [pc, #348]	; (8001008 <Nav_vFeedbackRoutine+0x228>)
 8000eaa:	e9c1 2300 	strd	r2, r3, [r1]

	//Measure local angle of robot center
	Nav_MeasuredAngle_rad_d =  ( double ) ( ( Nav_MeasuredDistanceRight_mm_d   -  Nav_MeasuredDistanceLeft_mm_d ) / TRACK_MM )   ;
 8000eae:	4b52      	ldr	r3, [pc, #328]	; (8000ff8 <Nav_vFeedbackRoutine+0x218>)
 8000eb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000eb4:	4b52      	ldr	r3, [pc, #328]	; (8001000 <Nav_vFeedbackRoutine+0x220>)
 8000eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eba:	f7ff f989 	bl	80001d0 <__aeabi_dsub>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	4610      	mov	r0, r2
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	a344      	add	r3, pc, #272	; (adr r3, 8000fd8 <Nav_vFeedbackRoutine+0x1f8>)
 8000ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ecc:	f7ff fc62 	bl	8000794 <__aeabi_ddiv>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	494e      	ldr	r1, [pc, #312]	; (8001010 <Nav_vFeedbackRoutine+0x230>)
 8000ed6:	e9c1 2300 	strd	r2, r3, [r1]

	//Measure angular velocity
	Nav_MeasuredAngularVelocity_rad_d = Nav_MeasuredAngle_rad_d - Nav_PrevMeasuredAngle_rad_d ;
 8000eda:	4b4d      	ldr	r3, [pc, #308]	; (8001010 <Nav_vFeedbackRoutine+0x230>)
 8000edc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ee0:	4b4c      	ldr	r3, [pc, #304]	; (8001014 <Nav_vFeedbackRoutine+0x234>)
 8000ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee6:	f7ff f973 	bl	80001d0 <__aeabi_dsub>
 8000eea:	4602      	mov	r2, r0
 8000eec:	460b      	mov	r3, r1
 8000eee:	494a      	ldr	r1, [pc, #296]	; (8001018 <Nav_vFeedbackRoutine+0x238>)
 8000ef0:	e9c1 2300 	strd	r2, r3, [r1]
	Nav_PrevMeasuredAngle_rad_d = Nav_MeasuredAngle_rad_d ;
 8000ef4:	4b46      	ldr	r3, [pc, #280]	; (8001010 <Nav_vFeedbackRoutine+0x230>)
 8000ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efa:	4946      	ldr	r1, [pc, #280]	; (8001014 <Nav_vFeedbackRoutine+0x234>)
 8000efc:	e9c1 2300 	strd	r2, r3, [r1]

	Nav_MeasuredAngularVelocity_deg_d = (double) ( ( Nav_MeasuredAngularVelocity_rad_d / M_PI ) * 180.0 ) ;
 8000f00:	4b45      	ldr	r3, [pc, #276]	; (8001018 <Nav_vFeedbackRoutine+0x238>)
 8000f02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f06:	a336      	add	r3, pc, #216	; (adr r3, 8000fe0 <Nav_vFeedbackRoutine+0x200>)
 8000f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0c:	f7ff fc42 	bl	8000794 <__aeabi_ddiv>
 8000f10:	4602      	mov	r2, r0
 8000f12:	460b      	mov	r3, r1
 8000f14:	4610      	mov	r0, r2
 8000f16:	4619      	mov	r1, r3
 8000f18:	f04f 0200 	mov.w	r2, #0
 8000f1c:	4b3f      	ldr	r3, [pc, #252]	; (800101c <Nav_vFeedbackRoutine+0x23c>)
 8000f1e:	f7ff fb0f 	bl	8000540 <__aeabi_dmul>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	493e      	ldr	r1, [pc, #248]	; (8001020 <Nav_vFeedbackRoutine+0x240>)
 8000f28:	e9c1 2300 	strd	r2, r3, [r1]

	//Measure global angle of robot center
	Nav_CurrentAngle_rad_d += Nav_MeasuredAngularVelocity_rad_d ;
 8000f2c:	4b3d      	ldr	r3, [pc, #244]	; (8001024 <Nav_vFeedbackRoutine+0x244>)
 8000f2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f32:	4b39      	ldr	r3, [pc, #228]	; (8001018 <Nav_vFeedbackRoutine+0x238>)
 8000f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f38:	f7ff f94c 	bl	80001d4 <__adddf3>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	460b      	mov	r3, r1
 8000f40:	4938      	ldr	r1, [pc, #224]	; (8001024 <Nav_vFeedbackRoutine+0x244>)
 8000f42:	e9c1 2300 	strd	r2, r3, [r1]
	Nav_CurrentAngle_deg_d =  (double) ( ( Nav_CurrentAngle_rad_d / M_PI ) * 180.0 ) ;
 8000f46:	4b37      	ldr	r3, [pc, #220]	; (8001024 <Nav_vFeedbackRoutine+0x244>)
 8000f48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f4c:	a324      	add	r3, pc, #144	; (adr r3, 8000fe0 <Nav_vFeedbackRoutine+0x200>)
 8000f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f52:	f7ff fc1f 	bl	8000794 <__aeabi_ddiv>
 8000f56:	4602      	mov	r2, r0
 8000f58:	460b      	mov	r3, r1
 8000f5a:	4610      	mov	r0, r2
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f04f 0200 	mov.w	r2, #0
 8000f62:	4b2e      	ldr	r3, [pc, #184]	; (800101c <Nav_vFeedbackRoutine+0x23c>)
 8000f64:	f7ff faec 	bl	8000540 <__aeabi_dmul>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	492e      	ldr	r1, [pc, #184]	; (8001028 <Nav_vFeedbackRoutine+0x248>)
 8000f6e:	e9c1 2300 	strd	r2, r3, [r1]

	Nav_AverageAngle_rad_d = ( ( Nav_CurrentAngle_rad_d + Nav_PrevAngle_rad_d ) / 2 ) ;
 8000f72:	4b2c      	ldr	r3, [pc, #176]	; (8001024 <Nav_vFeedbackRoutine+0x244>)
 8000f74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f78:	4b2c      	ldr	r3, [pc, #176]	; (800102c <Nav_vFeedbackRoutine+0x24c>)
 8000f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7e:	f7ff f929 	bl	80001d4 <__adddf3>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	4610      	mov	r0, r2
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f04f 0200 	mov.w	r2, #0
 8000f8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f92:	f7ff fbff 	bl	8000794 <__aeabi_ddiv>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4925      	ldr	r1, [pc, #148]	; (8001030 <Nav_vFeedbackRoutine+0x250>)
 8000f9c:	e9c1 2300 	strd	r2, r3, [r1]
	Nav_PrevAngle_rad_d = Nav_CurrentAngle_rad_d;
 8000fa0:	4b20      	ldr	r3, [pc, #128]	; (8001024 <Nav_vFeedbackRoutine+0x244>)
 8000fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa6:	4921      	ldr	r1, [pc, #132]	; (800102c <Nav_vFeedbackRoutine+0x24c>)
 8000fa8:	e9c1 2300 	strd	r2, r3, [r1]

	if ( Nav_MeasuredAngularVelocity_rad_d ==0 )
 8000fac:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <Nav_vFeedbackRoutine+0x238>)
 8000fae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	f04f 0300 	mov.w	r3, #0
 8000fba:	f7ff fd29 	bl	8000a10 <__aeabi_dcmpeq>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d03b      	beq.n	800103c <Nav_vFeedbackRoutine+0x25c>
	{
		Nav_CurveCoefficient_d = 1;
 8000fc4:	491b      	ldr	r1, [pc, #108]	; (8001034 <Nav_vFeedbackRoutine+0x254>)
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <Nav_vFeedbackRoutine+0x258>)
 8000fcc:	e9c1 2300 	strd	r2, r3, [r1]
 8000fd0:	e05d      	b.n	800108e <Nav_vFeedbackRoutine+0x2ae>
 8000fd2:	bf00      	nop
 8000fd4:	f3af 8000 	nop.w
 8000fd8:	00000000 	.word	0x00000000
 8000fdc:	40730800 	.word	0x40730800
 8000fe0:	54442d18 	.word	0x54442d18
 8000fe4:	400921fb 	.word	0x400921fb
 8000fe8:	40000c00 	.word	0x40000c00
 8000fec:	20000308 	.word	0x20000308
 8000ff0:	2000030c 	.word	0x2000030c
 8000ff4:	20000318 	.word	0x20000318
 8000ff8:	20000328 	.word	0x20000328
 8000ffc:	20000310 	.word	0x20000310
 8001000:	20000320 	.word	0x20000320
 8001004:	20000330 	.word	0x20000330
 8001008:	20000338 	.word	0x20000338
 800100c:	20000400 	.word	0x20000400
 8001010:	20000350 	.word	0x20000350
 8001014:	20000358 	.word	0x20000358
 8001018:	20000408 	.word	0x20000408
 800101c:	40668000 	.word	0x40668000
 8001020:	20000410 	.word	0x20000410
 8001024:	20000370 	.word	0x20000370
 8001028:	20000388 	.word	0x20000388
 800102c:	20000378 	.word	0x20000378
 8001030:	20000380 	.word	0x20000380
 8001034:	20000368 	.word	0x20000368
 8001038:	3ff00000 	.word	0x3ff00000
	}
	else
	{
		Nav_CurveCoefficient_d = ( sin( Nav_MeasuredAngularVelocity_rad_d / 2 ) ) / (Nav_MeasuredAngularVelocity_rad_d / 2 ) ;
 800103c:	4b42      	ldr	r3, [pc, #264]	; (8001148 <Nav_vFeedbackRoutine+0x368>)
 800103e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800104a:	f7ff fba3 	bl	8000794 <__aeabi_ddiv>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	ec43 2b17 	vmov	d7, r2, r3
 8001056:	eeb0 0a47 	vmov.f32	s0, s14
 800105a:	eef0 0a67 	vmov.f32	s1, s15
 800105e:	f005 f92f 	bl	80062c0 <sin>
 8001062:	ec55 4b10 	vmov	r4, r5, d0
 8001066:	4b38      	ldr	r3, [pc, #224]	; (8001148 <Nav_vFeedbackRoutine+0x368>)
 8001068:	e9d3 0100 	ldrd	r0, r1, [r3]
 800106c:	f04f 0200 	mov.w	r2, #0
 8001070:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001074:	f7ff fb8e 	bl	8000794 <__aeabi_ddiv>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4620      	mov	r0, r4
 800107e:	4629      	mov	r1, r5
 8001080:	f7ff fb88 	bl	8000794 <__aeabi_ddiv>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4930      	ldr	r1, [pc, #192]	; (800114c <Nav_vFeedbackRoutine+0x36c>)
 800108a:	e9c1 2300 	strd	r2, r3, [r1]
	}

	//Measure X and Y of robot center
	Nav_DeltaX_mm_d = ( Nav_CurveCoefficient_d * Nav_MeasuredVelocity_mm_d )*cos( Nav_AverageAngle_rad_d ) ;
 800108e:	4b2f      	ldr	r3, [pc, #188]	; (800114c <Nav_vFeedbackRoutine+0x36c>)
 8001090:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001094:	4b2e      	ldr	r3, [pc, #184]	; (8001150 <Nav_vFeedbackRoutine+0x370>)
 8001096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109a:	f7ff fa51 	bl	8000540 <__aeabi_dmul>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	4614      	mov	r4, r2
 80010a4:	461d      	mov	r5, r3
 80010a6:	4b2b      	ldr	r3, [pc, #172]	; (8001154 <Nav_vFeedbackRoutine+0x374>)
 80010a8:	ed93 7b00 	vldr	d7, [r3]
 80010ac:	eeb0 0a47 	vmov.f32	s0, s14
 80010b0:	eef0 0a67 	vmov.f32	s1, s15
 80010b4:	f005 f8b0 	bl	8006218 <cos>
 80010b8:	ec53 2b10 	vmov	r2, r3, d0
 80010bc:	4620      	mov	r0, r4
 80010be:	4629      	mov	r1, r5
 80010c0:	f7ff fa3e 	bl	8000540 <__aeabi_dmul>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4923      	ldr	r1, [pc, #140]	; (8001158 <Nav_vFeedbackRoutine+0x378>)
 80010ca:	e9c1 2300 	strd	r2, r3, [r1]
	Nav_DeltaY_mm_d = ( Nav_CurveCoefficient_d * Nav_MeasuredVelocity_mm_d )*sin( Nav_AverageAngle_rad_d ) ;
 80010ce:	4b1f      	ldr	r3, [pc, #124]	; (800114c <Nav_vFeedbackRoutine+0x36c>)
 80010d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010d4:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <Nav_vFeedbackRoutine+0x370>)
 80010d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010da:	f7ff fa31 	bl	8000540 <__aeabi_dmul>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4614      	mov	r4, r2
 80010e4:	461d      	mov	r5, r3
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <Nav_vFeedbackRoutine+0x374>)
 80010e8:	ed93 7b00 	vldr	d7, [r3]
 80010ec:	eeb0 0a47 	vmov.f32	s0, s14
 80010f0:	eef0 0a67 	vmov.f32	s1, s15
 80010f4:	f005 f8e4 	bl	80062c0 <sin>
 80010f8:	ec53 2b10 	vmov	r2, r3, d0
 80010fc:	4620      	mov	r0, r4
 80010fe:	4629      	mov	r1, r5
 8001100:	f7ff fa1e 	bl	8000540 <__aeabi_dmul>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4914      	ldr	r1, [pc, #80]	; (800115c <Nav_vFeedbackRoutine+0x37c>)
 800110a:	e9c1 2300 	strd	r2, r3, [r1]

	Nav_CurrentX_mm_d +=  Nav_DeltaX_mm_d  ;
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <Nav_vFeedbackRoutine+0x380>)
 8001110:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001114:	4b10      	ldr	r3, [pc, #64]	; (8001158 <Nav_vFeedbackRoutine+0x378>)
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	f7ff f85b 	bl	80001d4 <__adddf3>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	490f      	ldr	r1, [pc, #60]	; (8001160 <Nav_vFeedbackRoutine+0x380>)
 8001124:	e9c1 2300 	strd	r2, r3, [r1]
	Nav_CurrentY_mm_d +=  Nav_DeltaY_mm_d  ;
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <Nav_vFeedbackRoutine+0x384>)
 800112a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <Nav_vFeedbackRoutine+0x37c>)
 8001130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001134:	f7ff f84e 	bl	80001d4 <__adddf3>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4909      	ldr	r1, [pc, #36]	; (8001164 <Nav_vFeedbackRoutine+0x384>)
 800113e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001142:	bf00      	nop
 8001144:	bdb0      	pop	{r4, r5, r7, pc}
 8001146:	bf00      	nop
 8001148:	20000408 	.word	0x20000408
 800114c:	20000368 	.word	0x20000368
 8001150:	20000400 	.word	0x20000400
 8001154:	20000380 	.word	0x20000380
 8001158:	20000390 	.word	0x20000390
 800115c:	20000398 	.word	0x20000398
 8001160:	200003a0 	.word	0x200003a0
 8001164:	200003a8 	.word	0x200003a8

08001168 <Nav_vPidDistance>:



void Nav_vPidDistance()
{
 8001168:	b5b0      	push	{r4, r5, r7, lr}
 800116a:	af00      	add	r7, sp, #0
	//Calculate Distance Error
	Nav_DistanceError_d = Nav_CurrentTargetDistance_mm_d -  Nav_MeasuredDistance_mm_d ;
 800116c:	4b26      	ldr	r3, [pc, #152]	; (8001208 <Nav_vPidDistance+0xa0>)
 800116e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001172:	4b26      	ldr	r3, [pc, #152]	; (800120c <Nav_vPidDistance+0xa4>)
 8001174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001178:	f7ff f82a 	bl	80001d0 <__aeabi_dsub>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	4923      	ldr	r1, [pc, #140]	; (8001210 <Nav_vPidDistance+0xa8>)
 8001182:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate the sum of distance Error using the Integral Term of the PID
	Nav_SumDistanceError_d = Nav_KiDistance_d * Nav_DistanceError_d + Nav_SumDistanceError_d ;
 8001186:	4b23      	ldr	r3, [pc, #140]	; (8001214 <Nav_vPidDistance+0xac>)
 8001188:	e9d3 0100 	ldrd	r0, r1, [r3]
 800118c:	4b20      	ldr	r3, [pc, #128]	; (8001210 <Nav_vPidDistance+0xa8>)
 800118e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001192:	f7ff f9d5 	bl	8000540 <__aeabi_dmul>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4610      	mov	r0, r2
 800119c:	4619      	mov	r1, r3
 800119e:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <Nav_vPidDistance+0xb0>)
 80011a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a4:	f7ff f816 	bl	80001d4 <__adddf3>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	491a      	ldr	r1, [pc, #104]	; (8001218 <Nav_vPidDistance+0xb0>)
 80011ae:	e9c1 2300 	strd	r2, r3, [r1]

//    //Derivative Action
//	Nav_DerivativeAction_d = Nav_KdDistance_d*(Nav_DistanceError_d-Nav_PrevDistanceError_d);

	//calculate the Output of the distance PID block
	Nav_PID_DistanceOutput_d = ( double ) ( ( Nav_KpDistance_d *  Nav_DistanceError_d ) - ( Nav_KdDistance_d * Nav_MeasuredVelocity_mm_d ) + Nav_SumDistanceError_d  );
 80011b2:	4b1a      	ldr	r3, [pc, #104]	; (800121c <Nav_vPidDistance+0xb4>)
 80011b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011b8:	4b15      	ldr	r3, [pc, #84]	; (8001210 <Nav_vPidDistance+0xa8>)
 80011ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011be:	f7ff f9bf 	bl	8000540 <__aeabi_dmul>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4614      	mov	r4, r2
 80011c8:	461d      	mov	r5, r3
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <Nav_vPidDistance+0xb8>)
 80011cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011d0:	4b14      	ldr	r3, [pc, #80]	; (8001224 <Nav_vPidDistance+0xbc>)
 80011d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d6:	f7ff f9b3 	bl	8000540 <__aeabi_dmul>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4620      	mov	r0, r4
 80011e0:	4629      	mov	r1, r5
 80011e2:	f7fe fff5 	bl	80001d0 <__aeabi_dsub>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <Nav_vPidDistance+0xb0>)
 80011f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f4:	f7fe ffee 	bl	80001d4 <__adddf3>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	490a      	ldr	r1, [pc, #40]	; (8001228 <Nav_vPidDistance+0xc0>)
 80011fe:	e9c1 2300 	strd	r2, r3, [r1]
//	Nav_PID_DistanceOutput_d = ( double ) ( ( Nav_KpDistance_d *  Nav_DistanceError_d ) + Nav_DerivativeAction_d + Nav_SumDistanceError_d  );
}
 8001202:	bf00      	nop
 8001204:	bdb0      	pop	{r4, r5, r7, pc}
 8001206:	bf00      	nop
 8001208:	200003c0 	.word	0x200003c0
 800120c:	20000330 	.word	0x20000330
 8001210:	20000420 	.word	0x20000420
 8001214:	200002e0 	.word	0x200002e0
 8001218:	20000428 	.word	0x20000428
 800121c:	200002d8 	.word	0x200002d8
 8001220:	200002e8 	.word	0x200002e8
 8001224:	20000400 	.word	0x20000400
 8001228:	20000430 	.word	0x20000430

0800122c <Nav_vPidAngle>:

void Nav_vPidAngle()
{
 800122c:	b5b0      	push	{r4, r5, r7, lr}
 800122e:	af00      	add	r7, sp, #0
	//Calculate Angle Error
	Nav_AngleError_d =  Nav_CurrentTargetAngle_deg_d - Nav_CurrentAngle_deg_d ;
 8001230:	4b26      	ldr	r3, [pc, #152]	; (80012cc <Nav_vPidAngle+0xa0>)
 8001232:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001236:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <Nav_vPidAngle+0xa4>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7fe ffc8 	bl	80001d0 <__aeabi_dsub>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4923      	ldr	r1, [pc, #140]	; (80012d4 <Nav_vPidAngle+0xa8>)
 8001246:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate the sum of Angle Error using the Integral Term of the PID
	Nav_SumAngleError_d = Nav_KiAngle_d * Nav_AngleError_d + Nav_SumAngleError_d ;
 800124a:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <Nav_vPidAngle+0xac>)
 800124c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001250:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <Nav_vPidAngle+0xa8>)
 8001252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001256:	f7ff f973 	bl	8000540 <__aeabi_dmul>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4610      	mov	r0, r2
 8001260:	4619      	mov	r1, r3
 8001262:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <Nav_vPidAngle+0xb0>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	f7fe ffb4 	bl	80001d4 <__adddf3>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	491a      	ldr	r1, [pc, #104]	; (80012dc <Nav_vPidAngle+0xb0>)
 8001272:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate the Output of the Angle PID block
	Nav_PID_AngleOutput_d = ( double ) ( ( Nav_KpAngle_d *  Nav_AngleError_d ) - ( Nav_KdAngle_d * Nav_MeasuredAngularVelocity_deg_d ) + Nav_SumAngleError_d  ) ;
 8001276:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <Nav_vPidAngle+0xb4>)
 8001278:	e9d3 0100 	ldrd	r0, r1, [r3]
 800127c:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <Nav_vPidAngle+0xa8>)
 800127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001282:	f7ff f95d 	bl	8000540 <__aeabi_dmul>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4614      	mov	r4, r2
 800128c:	461d      	mov	r5, r3
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <Nav_vPidAngle+0xb8>)
 8001290:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001294:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <Nav_vPidAngle+0xbc>)
 8001296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129a:	f7ff f951 	bl	8000540 <__aeabi_dmul>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4620      	mov	r0, r4
 80012a4:	4629      	mov	r1, r5
 80012a6:	f7fe ff93 	bl	80001d0 <__aeabi_dsub>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4610      	mov	r0, r2
 80012b0:	4619      	mov	r1, r3
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <Nav_vPidAngle+0xb0>)
 80012b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b8:	f7fe ff8c 	bl	80001d4 <__adddf3>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	490a      	ldr	r1, [pc, #40]	; (80012ec <Nav_vPidAngle+0xc0>)
 80012c2:	e9c1 2300 	strd	r2, r3, [r1]
}
 80012c6:	bf00      	nop
 80012c8:	bdb0      	pop	{r4, r5, r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200003d8 	.word	0x200003d8
 80012d0:	20000388 	.word	0x20000388
 80012d4:	20000438 	.word	0x20000438
 80012d8:	200002f8 	.word	0x200002f8
 80012dc:	20000440 	.word	0x20000440
 80012e0:	200002f0 	.word	0x200002f0
 80012e4:	20000300 	.word	0x20000300
 80012e8:	20000410 	.word	0x20000410
 80012ec:	20000448 	.word	0x20000448

080012f0 <Nav_vCalculateMotorsCommand>:


void Nav_vCalculateMotorsCommand()
{
 80012f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012f4:	af00      	add	r7, sp, #0
	//Calculate each motor command using the output of the distance PID and Angle PID blocks
	Nav_RightMotorCommand_i32 = ( int32_t ) ( Nav_PID_DistanceOutput_d + Nav_PID_AngleOutput_d )   ;
 80012f6:	4b7a      	ldr	r3, [pc, #488]	; (80014e0 <Nav_vCalculateMotorsCommand+0x1f0>)
 80012f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012fc:	4b79      	ldr	r3, [pc, #484]	; (80014e4 <Nav_vCalculateMotorsCommand+0x1f4>)
 80012fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001302:	f7fe ff67 	bl	80001d4 <__adddf3>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4610      	mov	r0, r2
 800130c:	4619      	mov	r1, r3
 800130e:	f7ff fbb1 	bl	8000a74 <__aeabi_d2iz>
 8001312:	4603      	mov	r3, r0
 8001314:	4a74      	ldr	r2, [pc, #464]	; (80014e8 <Nav_vCalculateMotorsCommand+0x1f8>)
 8001316:	6013      	str	r3, [r2, #0]
	Nav_LeftMotorCommand_i32  = ( int32_t ) ( Nav_PID_DistanceOutput_d - Nav_PID_AngleOutput_d )   ;
 8001318:	4b71      	ldr	r3, [pc, #452]	; (80014e0 <Nav_vCalculateMotorsCommand+0x1f0>)
 800131a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800131e:	4b71      	ldr	r3, [pc, #452]	; (80014e4 <Nav_vCalculateMotorsCommand+0x1f4>)
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	f7fe ff54 	bl	80001d0 <__aeabi_dsub>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	f7ff fba0 	bl	8000a74 <__aeabi_d2iz>
 8001334:	4603      	mov	r3, r0
 8001336:	4a6d      	ldr	r2, [pc, #436]	; (80014ec <Nav_vCalculateMotorsCommand+0x1fc>)
 8001338:	6013      	str	r3, [r2, #0]

	// Right Motor Direction Settings
	if( Nav_RightMotorCommand_i32 >= 0.0 )
 800133a:	4b6b      	ldr	r3, [pc, #428]	; (80014e8 <Nav_vCalculateMotorsCommand+0x1f8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	db03      	blt.n	800134a <Nav_vCalculateMotorsCommand+0x5a>
	{
		Nav_RightMotorDirection_i8 = MOTOR_DIRECTION_FORWARD ;
 8001342:	4b6b      	ldr	r3, [pc, #428]	; (80014f0 <Nav_vCalculateMotorsCommand+0x200>)
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
 8001348:	e013      	b.n	8001372 <Nav_vCalculateMotorsCommand+0x82>
	}
	else
	{
		Nav_RightMotorDirection_i8 = MOTOR_DIRECTION_REVERSE ;
 800134a:	4b69      	ldr	r3, [pc, #420]	; (80014f0 <Nav_vCalculateMotorsCommand+0x200>)
 800134c:	22ff      	movs	r2, #255	; 0xff
 800134e:	701a      	strb	r2, [r3, #0]
		Nav_RightMotorCommand_i32 = fabs( Nav_RightMotorCommand_i32 );
 8001350:	4b65      	ldr	r3, [pc, #404]	; (80014e8 <Nav_vCalculateMotorsCommand+0x1f8>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f889 	bl	800046c <__aeabi_i2d>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4690      	mov	r8, r2
 8001360:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001364:	4640      	mov	r0, r8
 8001366:	4649      	mov	r1, r9
 8001368:	f7ff fb84 	bl	8000a74 <__aeabi_d2iz>
 800136c:	4603      	mov	r3, r0
 800136e:	4a5e      	ldr	r2, [pc, #376]	; (80014e8 <Nav_vCalculateMotorsCommand+0x1f8>)
 8001370:	6013      	str	r3, [r2, #0]
	}
	//Left Motor Direction Settings
	if( Nav_LeftMotorCommand_i32 >= 0.0 )
 8001372:	4b5e      	ldr	r3, [pc, #376]	; (80014ec <Nav_vCalculateMotorsCommand+0x1fc>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	db03      	blt.n	8001382 <Nav_vCalculateMotorsCommand+0x92>
	{
		Nav_LeftMotorDirection_i8 = MOTOR_DIRECTION_FORWARD ;
 800137a:	4b5e      	ldr	r3, [pc, #376]	; (80014f4 <Nav_vCalculateMotorsCommand+0x204>)
 800137c:	2201      	movs	r2, #1
 800137e:	701a      	strb	r2, [r3, #0]
 8001380:	e013      	b.n	80013aa <Nav_vCalculateMotorsCommand+0xba>
	}
	else
	{
		Nav_LeftMotorDirection_i8 = MOTOR_DIRECTION_REVERSE ;
 8001382:	4b5c      	ldr	r3, [pc, #368]	; (80014f4 <Nav_vCalculateMotorsCommand+0x204>)
 8001384:	22ff      	movs	r2, #255	; 0xff
 8001386:	701a      	strb	r2, [r3, #0]
		Nav_LeftMotorCommand_i32 = fabs( Nav_LeftMotorCommand_i32 );
 8001388:	4b58      	ldr	r3, [pc, #352]	; (80014ec <Nav_vCalculateMotorsCommand+0x1fc>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f86d 	bl	800046c <__aeabi_i2d>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4614      	mov	r4, r2
 8001398:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800139c:	4620      	mov	r0, r4
 800139e:	4629      	mov	r1, r5
 80013a0:	f7ff fb68 	bl	8000a74 <__aeabi_d2iz>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4a51      	ldr	r2, [pc, #324]	; (80014ec <Nav_vCalculateMotorsCommand+0x1fc>)
 80013a8:	6013      	str	r3, [r2, #0]
	}

	//Right Motor Maximum Command Settings
	if(Nav_RightMotorCommand_i32 > MAXIMUM_MOTOR_COMMAND )
 80013aa:	4b4f      	ldr	r3, [pc, #316]	; (80014e8 <Nav_vCalculateMotorsCommand+0x1f8>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b2:	4293      	cmp	r3, r2
 80013b4:	dd03      	ble.n	80013be <Nav_vCalculateMotorsCommand+0xce>
	{
		Nav_RightMotorCommand_i32 = MAXIMUM_MOTOR_COMMAND ;
 80013b6:	4b4c      	ldr	r3, [pc, #304]	; (80014e8 <Nav_vCalculateMotorsCommand+0x1f8>)
 80013b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013bc:	601a      	str	r2, [r3, #0]
	}
	//Left Motor Maximum Command Settings
	if(Nav_LeftMotorCommand_i32 > MAXIMUM_MOTOR_COMMAND )
 80013be:	4b4b      	ldr	r3, [pc, #300]	; (80014ec <Nav_vCalculateMotorsCommand+0x1fc>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c6:	4293      	cmp	r3, r2
 80013c8:	dd03      	ble.n	80013d2 <Nav_vCalculateMotorsCommand+0xe2>
	{
		Nav_LeftMotorCommand_i32 = MAXIMUM_MOTOR_COMMAND ;
 80013ca:	4b48      	ldr	r3, [pc, #288]	; (80014ec <Nav_vCalculateMotorsCommand+0x1fc>)
 80013cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d0:	601a      	str	r2, [r3, #0]
	}

	Nav_RightMotorCommand_i32 = ( int32_t ) ( ( (double) ( (MOTOR_PWM->ARR )  *  Nav_RightMotorCommand_i32 )  / MAXIMUM_MOTOR_COMMAND )  ) ;
 80013d2:	4b49      	ldr	r3, [pc, #292]	; (80014f8 <Nav_vCalculateMotorsCommand+0x208>)
 80013d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d6:	4a44      	ldr	r2, [pc, #272]	; (80014e8 <Nav_vCalculateMotorsCommand+0x1f8>)
 80013d8:	6812      	ldr	r2, [r2, #0]
 80013da:	fb02 f303 	mul.w	r3, r2, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff f834 	bl	800044c <__aeabi_ui2d>
 80013e4:	a33c      	add	r3, pc, #240	; (adr r3, 80014d8 <Nav_vCalculateMotorsCommand+0x1e8>)
 80013e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ea:	f7ff f9d3 	bl	8000794 <__aeabi_ddiv>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4610      	mov	r0, r2
 80013f4:	4619      	mov	r1, r3
 80013f6:	f7ff fb3d 	bl	8000a74 <__aeabi_d2iz>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4a3a      	ldr	r2, [pc, #232]	; (80014e8 <Nav_vCalculateMotorsCommand+0x1f8>)
 80013fe:	6013      	str	r3, [r2, #0]
	Nav_LeftMotorCommand_i32  = ( int32_t ) ( ( (double) ( (MOTOR_PWM->ARR )  *  Nav_LeftMotorCommand_i32 )   / MAXIMUM_MOTOR_COMMAND )  ) ;
 8001400:	4b3d      	ldr	r3, [pc, #244]	; (80014f8 <Nav_vCalculateMotorsCommand+0x208>)
 8001402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001404:	4a39      	ldr	r2, [pc, #228]	; (80014ec <Nav_vCalculateMotorsCommand+0x1fc>)
 8001406:	6812      	ldr	r2, [r2, #0]
 8001408:	fb02 f303 	mul.w	r3, r2, r3
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f81d 	bl	800044c <__aeabi_ui2d>
 8001412:	a331      	add	r3, pc, #196	; (adr r3, 80014d8 <Nav_vCalculateMotorsCommand+0x1e8>)
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001418:	f7ff f9bc 	bl	8000794 <__aeabi_ddiv>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	f7ff fb26 	bl	8000a74 <__aeabi_d2iz>
 8001428:	4603      	mov	r3, r0
 800142a:	4a30      	ldr	r2, [pc, #192]	; (80014ec <Nav_vCalculateMotorsCommand+0x1fc>)
 800142c:	6013      	str	r3, [r2, #0]

	if ( Nav_RightMotorDirection_i8 == MOTOR_DIRECTION_FORWARD )
 800142e:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <Nav_vCalculateMotorsCommand+0x200>)
 8001430:	f993 3000 	ldrsb.w	r3, [r3]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d10b      	bne.n	8001450 <Nav_vCalculateMotorsCommand+0x160>
	{
		if ( ( Nav_RightMotorCommand_i32 > MINIMUM_SATURATION_COMMAND)
 8001438:	4b2b      	ldr	r3, [pc, #172]	; (80014e8 <Nav_vCalculateMotorsCommand+0x1f8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b32      	cmp	r3, #50	; 0x32
 800143e:	dd12      	ble.n	8001466 <Nav_vCalculateMotorsCommand+0x176>
				&& ( Nav_RightMotorCommand_i32 < MINIMUM_RIGHT_MOTOR_FORWARD_COMMAND ) )
 8001440:	4b29      	ldr	r3, [pc, #164]	; (80014e8 <Nav_vCalculateMotorsCommand+0x1f8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2be6      	cmp	r3, #230	; 0xe6
 8001446:	dc0e      	bgt.n	8001466 <Nav_vCalculateMotorsCommand+0x176>
		{
			Nav_RightMotorCommand_i32 = MINIMUM_RIGHT_MOTOR_FORWARD_COMMAND;
 8001448:	4b27      	ldr	r3, [pc, #156]	; (80014e8 <Nav_vCalculateMotorsCommand+0x1f8>)
 800144a:	22e7      	movs	r2, #231	; 0xe7
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	e00a      	b.n	8001466 <Nav_vCalculateMotorsCommand+0x176>
		}
	}
	else
	{
		if ((Nav_RightMotorCommand_i32 > MINIMUM_SATURATION_COMMAND)
 8001450:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <Nav_vCalculateMotorsCommand+0x1f8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b32      	cmp	r3, #50	; 0x32
 8001456:	dd06      	ble.n	8001466 <Nav_vCalculateMotorsCommand+0x176>
				&& (Nav_RightMotorCommand_i32 < MINIMUM_RIGHT_MOTOR_REVERSE_COMMAND))
 8001458:	4b23      	ldr	r3, [pc, #140]	; (80014e8 <Nav_vCalculateMotorsCommand+0x1f8>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2bdd      	cmp	r3, #221	; 0xdd
 800145e:	dc02      	bgt.n	8001466 <Nav_vCalculateMotorsCommand+0x176>
		{
			Nav_RightMotorCommand_i32 = MINIMUM_RIGHT_MOTOR_REVERSE_COMMAND;
 8001460:	4b21      	ldr	r3, [pc, #132]	; (80014e8 <Nav_vCalculateMotorsCommand+0x1f8>)
 8001462:	22de      	movs	r2, #222	; 0xde
 8001464:	601a      	str	r2, [r3, #0]
		}
	}


	if (  Nav_LeftMotorDirection_i8 == MOTOR_DIRECTION_FORWARD )
 8001466:	4b23      	ldr	r3, [pc, #140]	; (80014f4 <Nav_vCalculateMotorsCommand+0x204>)
 8001468:	f993 3000 	ldrsb.w	r3, [r3]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d10d      	bne.n	800148c <Nav_vCalculateMotorsCommand+0x19c>
	{
		if (( Nav_LeftMotorCommand_i32 > MINIMUM_SATURATION_COMMAND )
 8001470:	4b1e      	ldr	r3, [pc, #120]	; (80014ec <Nav_vCalculateMotorsCommand+0x1fc>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b32      	cmp	r3, #50	; 0x32
 8001476:	dd16      	ble.n	80014a6 <Nav_vCalculateMotorsCommand+0x1b6>
				&& (Nav_LeftMotorCommand_i32 < MINIMUM_LEFT_MOTOR_FORWARD_COMMAND))
 8001478:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <Nav_vCalculateMotorsCommand+0x1fc>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8001480:	dc11      	bgt.n	80014a6 <Nav_vCalculateMotorsCommand+0x1b6>

		{
			Nav_LeftMotorCommand_i32 = MINIMUM_LEFT_MOTOR_FORWARD_COMMAND;
 8001482:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <Nav_vCalculateMotorsCommand+0x1fc>)
 8001484:	f240 127f 	movw	r2, #383	; 0x17f
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	e00c      	b.n	80014a6 <Nav_vCalculateMotorsCommand+0x1b6>
		}
	}
	else
	{
		if( ( Nav_LeftMotorCommand_i32 > MINIMUM_SATURATION_COMMAND )
 800148c:	4b17      	ldr	r3, [pc, #92]	; (80014ec <Nav_vCalculateMotorsCommand+0x1fc>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b32      	cmp	r3, #50	; 0x32
 8001492:	dd08      	ble.n	80014a6 <Nav_vCalculateMotorsCommand+0x1b6>
				&& (Nav_LeftMotorCommand_i32 < MINIMUM_LEFT_MOTOR_REVERSE_COMMAND)  )
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <Nav_vCalculateMotorsCommand+0x1fc>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 800149c:	dc03      	bgt.n	80014a6 <Nav_vCalculateMotorsCommand+0x1b6>
		{
			Nav_LeftMotorCommand_i32 = MINIMUM_LEFT_MOTOR_REVERSE_COMMAND;
 800149e:	4b13      	ldr	r3, [pc, #76]	; (80014ec <Nav_vCalculateMotorsCommand+0x1fc>)
 80014a0:	f240 129b 	movw	r2, #411	; 0x19b
 80014a4:	601a      	str	r2, [r3, #0]
		}
	}

	//MONITORING
	MONITOR_RightMotorCommand_i32 = Nav_RightMotorDirection_i8 * Nav_RightMotorCommand_i32 ;
 80014a6:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <Nav_vCalculateMotorsCommand+0x200>)
 80014a8:	f993 3000 	ldrsb.w	r3, [r3]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <Nav_vCalculateMotorsCommand+0x1f8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	fb02 f303 	mul.w	r3, r2, r3
 80014b6:	4a11      	ldr	r2, [pc, #68]	; (80014fc <Nav_vCalculateMotorsCommand+0x20c>)
 80014b8:	6013      	str	r3, [r2, #0]
	MONITOR_LeftMotorCommand_i32  = Nav_LeftMotorDirection_i8 * Nav_LeftMotorCommand_i32  ;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <Nav_vCalculateMotorsCommand+0x204>)
 80014bc:	f993 3000 	ldrsb.w	r3, [r3]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <Nav_vCalculateMotorsCommand+0x1fc>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	fb02 f303 	mul.w	r3, r2, r3
 80014ca:	4a0d      	ldr	r2, [pc, #52]	; (8001500 <Nav_vCalculateMotorsCommand+0x210>)
 80014cc:	6013      	str	r3, [r2, #0]
}
 80014ce:	bf00      	nop
 80014d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014d4:	f3af 8000 	nop.w
 80014d8:	00000000 	.word	0x00000000
 80014dc:	40b38800 	.word	0x40b38800
 80014e0:	20000430 	.word	0x20000430
 80014e4:	20000448 	.word	0x20000448
 80014e8:	20000450 	.word	0x20000450
 80014ec:	20000454 	.word	0x20000454
 80014f0:	20000001 	.word	0x20000001
 80014f4:	20000002 	.word	0x20000002
 80014f8:	40010000 	.word	0x40010000
 80014fc:	20000458 	.word	0x20000458
 8001500:	2000045c 	.word	0x2000045c

08001504 <Nav_vMotorsRoutine>:


void Nav_vMotorsRoutine()
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

	if (Nav_LeftMotorDirection_i8 == MOTOR_DIRECTION_FORWARD)
 8001508:	4b1c      	ldr	r3, [pc, #112]	; (800157c <Nav_vMotorsRoutine+0x78>)
 800150a:	f993 3000 	ldrsb.w	r3, [r3]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d107      	bne.n	8001522 <Nav_vMotorsRoutine+0x1e>
	{
		MOTOR_PWM->LEFT_FORWARD = Nav_LeftMotorCommand_i32 ;
 8001512:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <Nav_vMotorsRoutine+0x7c>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <Nav_vMotorsRoutine+0x80>)
 8001518:	63da      	str	r2, [r3, #60]	; 0x3c
		MOTOR_PWM->LEFT_REVERSE = 0 ;
 800151a:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <Nav_vMotorsRoutine+0x80>)
 800151c:	2200      	movs	r2, #0
 800151e:	641a      	str	r2, [r3, #64]	; 0x40
 8001520:	e00c      	b.n	800153c <Nav_vMotorsRoutine+0x38>
	}
	else if ( Nav_LeftMotorDirection_i8 == MOTOR_DIRECTION_REVERSE )
 8001522:	4b16      	ldr	r3, [pc, #88]	; (800157c <Nav_vMotorsRoutine+0x78>)
 8001524:	f993 3000 	ldrsb.w	r3, [r3]
 8001528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800152c:	d106      	bne.n	800153c <Nav_vMotorsRoutine+0x38>
	{
		MOTOR_PWM->LEFT_REVERSE= Nav_LeftMotorCommand_i32  ;
 800152e:	4b14      	ldr	r3, [pc, #80]	; (8001580 <Nav_vMotorsRoutine+0x7c>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <Nav_vMotorsRoutine+0x80>)
 8001534:	641a      	str	r2, [r3, #64]	; 0x40
		MOTOR_PWM->LEFT_FORWARD = 0 ;
 8001536:	4b13      	ldr	r3, [pc, #76]	; (8001584 <Nav_vMotorsRoutine+0x80>)
 8001538:	2200      	movs	r2, #0
 800153a:	63da      	str	r2, [r3, #60]	; 0x3c
	}

	if (Nav_RightMotorDirection_i8 == MOTOR_DIRECTION_FORWARD )
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <Nav_vMotorsRoutine+0x84>)
 800153e:	f993 3000 	ldrsb.w	r3, [r3]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d107      	bne.n	8001556 <Nav_vMotorsRoutine+0x52>
	{
		MOTOR_PWM->RIGHT_FORWARD = Nav_RightMotorCommand_i32 ;
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <Nav_vMotorsRoutine+0x88>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <Nav_vMotorsRoutine+0x80>)
 800154c:	639a      	str	r2, [r3, #56]	; 0x38
		MOTOR_PWM->RIGHT_REVERSE = 0;
 800154e:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <Nav_vMotorsRoutine+0x80>)
 8001550:	2200      	movs	r2, #0
 8001552:	635a      	str	r2, [r3, #52]	; 0x34
	{
		MOTOR_PWM->RIGHT_REVERSE =  Nav_RightMotorCommand_i32  ;
		MOTOR_PWM->RIGHT_FORWARD = 0 ;
	}

}
 8001554:	e00c      	b.n	8001570 <Nav_vMotorsRoutine+0x6c>
	else if (Nav_RightMotorDirection_i8 == MOTOR_DIRECTION_REVERSE )
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <Nav_vMotorsRoutine+0x84>)
 8001558:	f993 3000 	ldrsb.w	r3, [r3]
 800155c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001560:	d106      	bne.n	8001570 <Nav_vMotorsRoutine+0x6c>
		MOTOR_PWM->RIGHT_REVERSE =  Nav_RightMotorCommand_i32  ;
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <Nav_vMotorsRoutine+0x88>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	4b07      	ldr	r3, [pc, #28]	; (8001584 <Nav_vMotorsRoutine+0x80>)
 8001568:	635a      	str	r2, [r3, #52]	; 0x34
		MOTOR_PWM->RIGHT_FORWARD = 0 ;
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <Nav_vMotorsRoutine+0x80>)
 800156c:	2200      	movs	r2, #0
 800156e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	20000002 	.word	0x20000002
 8001580:	20000454 	.word	0x20000454
 8001584:	40010000 	.word	0x40010000
 8001588:	20000001 	.word	0x20000001
 800158c:	20000450 	.word	0x20000450

08001590 <Nav_vTestPathIndependantTrajectoryStateMachine>:
	}break;
	}
}

void Nav_vTestPathIndependantTrajectoryStateMachine()
{
 8001590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
	switch(Nav_TrajectoryState_en)
 8001598:	4b83      	ldr	r3, [pc, #524]	; (80017a8 <Nav_vTestPathIndependantTrajectoryStateMachine+0x218>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b08      	cmp	r3, #8
 800159e:	f200 8479 	bhi.w	8001e94 <Nav_vTestPathIndependantTrajectoryStateMachine+0x904>
 80015a2:	a201      	add	r2, pc, #4	; (adr r2, 80015a8 <Nav_vTestPathIndependantTrajectoryStateMachine+0x18>)
 80015a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a8:	08001e7f 	.word	0x08001e7f
 80015ac:	080015cd 	.word	0x080015cd
 80015b0:	0800165f 	.word	0x0800165f
 80015b4:	08001959 	.word	0x08001959
 80015b8:	0800197b 	.word	0x0800197b
 80015bc:	08001c3b 	.word	0x08001c3b
 80015c0:	08001d9d 	.word	0x08001d9d
 80015c4:	08001e65 	.word	0x08001e65
 80015c8:	08001e7f 	.word	0x08001e7f
	}break;

	case Nav_Trajectory_ResetVariables_en :
	{
		//reset the current sample
		Nav_CurrentSample_u32 = 0;
 80015cc:	4b77      	ldr	r3, [pc, #476]	; (80017ac <Nav_vTestPathIndependantTrajectoryStateMachine+0x21c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
		Nav_TrapezePhase_en = Nav_Trapeze_Accelerating_en;
 80015d2:	4b77      	ldr	r3, [pc, #476]	; (80017b0 <Nav_vTestPathIndependantTrajectoryStateMachine+0x220>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	701a      	strb	r2, [r3, #0]
		//reset measuring variables
		ENCODER_RIGHT->CNT = ENCODER_RIGHT->ARR / 2 ;
 80015d8:	4b76      	ldr	r3, [pc, #472]	; (80017b4 <Nav_vTestPathIndependantTrajectoryStateMachine+0x224>)
 80015da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015dc:	4a75      	ldr	r2, [pc, #468]	; (80017b4 <Nav_vTestPathIndependantTrajectoryStateMachine+0x224>)
 80015de:	085b      	lsrs	r3, r3, #1
 80015e0:	6253      	str	r3, [r2, #36]	; 0x24
		ENCODER_LEFT->CNT = ENCODER_LEFT->ARR / 2 ;
 80015e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ec:	085b      	lsrs	r3, r3, #1
 80015ee:	6253      	str	r3, [r2, #36]	; 0x24
		Nav_PrevMeasuredDistance_mm_d = 0.0 ;
 80015f0:	4971      	ldr	r1, [pc, #452]	; (80017b8 <Nav_vTestPathIndependantTrajectoryStateMachine+0x228>)
 80015f2:	f04f 0200 	mov.w	r2, #0
 80015f6:	f04f 0300 	mov.w	r3, #0
 80015fa:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_PrevMeasuredAngle_rad_d   = 0.0 ;
 80015fe:	496f      	ldr	r1, [pc, #444]	; (80017bc <Nav_vTestPathIndependantTrajectoryStateMachine+0x22c>)
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	f04f 0300 	mov.w	r3, #0
 8001608:	e9c1 2300 	strd	r2, r3, [r1]
		//Nav_PrevMeasuredAngle_deg_d   = 0.0 ;
		Nav_vFeedbackRoutine();
 800160c:	f7ff fbe8 	bl	8000de0 <Nav_vFeedbackRoutine>

		//reset the Target Distance variables
		Nav_CurrentTargetDistance_mm_d = 0.0 ;
 8001610:	496b      	ldr	r1, [pc, #428]	; (80017c0 <Nav_vTestPathIndependantTrajectoryStateMachine+0x230>)
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	f04f 0300 	mov.w	r3, #0
 800161a:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_PrevTargetDistance_mm_d = 0.0 ;
 800161e:	4969      	ldr	r1, [pc, #420]	; (80017c4 <Nav_vTestPathIndependantTrajectoryStateMachine+0x234>)
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	f04f 0300 	mov.w	r3, #0
 8001628:	e9c1 2300 	strd	r2, r3, [r1]

		Nav_PrevTargetAngle_deg_d = Nav_CurrentTargetAngle_deg_d;
 800162c:	4b66      	ldr	r3, [pc, #408]	; (80017c8 <Nav_vTestPathIndependantTrajectoryStateMachine+0x238>)
 800162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001632:	4966      	ldr	r1, [pc, #408]	; (80017cc <Nav_vTestPathIndependantTrajectoryStateMachine+0x23c>)
 8001634:	e9c1 2300 	strd	r2, r3, [r1]

		//reset the pid variables
		Nav_SumDistanceError_d = 0.0 ;
 8001638:	4965      	ldr	r1, [pc, #404]	; (80017d0 <Nav_vTestPathIndependantTrajectoryStateMachine+0x240>)
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	f04f 0300 	mov.w	r3, #0
 8001642:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_SumAngleError_d = 0.0 ;
 8001646:	4963      	ldr	r1, [pc, #396]	; (80017d4 <Nav_vTestPathIndependantTrajectoryStateMachine+0x244>)
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_TrajectoryState_en = Nav_Trajectory_SetPath_en;
 8001654:	4b54      	ldr	r3, [pc, #336]	; (80017a8 <Nav_vTestPathIndependantTrajectoryStateMachine+0x218>)
 8001656:	2202      	movs	r2, #2
 8001658:	701a      	strb	r2, [r3, #0]
	}break;
 800165a:	f000 bc1b 	b.w	8001e94 <Nav_vTestPathIndependantTrajectoryStateMachine+0x904>

	case Nav_Trajectory_SetPath_en :
	{

		//		Nav_RemainingDistance_mm_d = Nav_TargetDistance_mm_d - ( Nav_CurrentTargetDistance_mm_d -  Nav_MeasuredDistance_mm_d );
		if ( Nav_TrajectoryMode_en == Nav_ForwardLinearTrajectory_en )
 800165e:	4b5e      	ldr	r3, [pc, #376]	; (80017d8 <Nav_vTestPathIndependantTrajectoryStateMachine+0x248>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d149      	bne.n	80016fa <Nav_vTestPathIndependantTrajectoryStateMachine+0x16a>
		{
			Nav_MaxVelocity_d = Nav_MaxVelocity_d * SAMPLING_PERIOD ;
 8001666:	4b5d      	ldr	r3, [pc, #372]	; (80017dc <Nav_vTestPathIndependantTrajectoryStateMachine+0x24c>)
 8001668:	e9d3 0100 	ldrd	r0, r1, [r3]
 800166c:	a34a      	add	r3, pc, #296	; (adr r3, 8001798 <Nav_vTestPathIndependantTrajectoryStateMachine+0x208>)
 800166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001672:	f7fe ff65 	bl	8000540 <__aeabi_dmul>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4958      	ldr	r1, [pc, #352]	; (80017dc <Nav_vTestPathIndependantTrajectoryStateMachine+0x24c>)
 800167c:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_Acc_d = Nav_Acc_d * SAMPLING_PERIOD * SAMPLING_PERIOD ;
 8001680:	4b57      	ldr	r3, [pc, #348]	; (80017e0 <Nav_vTestPathIndependantTrajectoryStateMachine+0x250>)
 8001682:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001686:	a344      	add	r3, pc, #272	; (adr r3, 8001798 <Nav_vTestPathIndependantTrajectoryStateMachine+0x208>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	f7fe ff58 	bl	8000540 <__aeabi_dmul>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	a33f      	add	r3, pc, #252	; (adr r3, 8001798 <Nav_vTestPathIndependantTrajectoryStateMachine+0x208>)
 800169a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169e:	f7fe ff4f 	bl	8000540 <__aeabi_dmul>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	494e      	ldr	r1, [pc, #312]	; (80017e0 <Nav_vTestPathIndependantTrajectoryStateMachine+0x250>)
 80016a8:	e9c1 2300 	strd	r2, r3, [r1]
			FORWARD_LINEAR_TRAJECTORY_PID
 80016ac:	494d      	ldr	r1, [pc, #308]	; (80017e4 <Nav_vTestPathIndependantTrajectoryStateMachine+0x254>)
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	4b4d      	ldr	r3, [pc, #308]	; (80017e8 <Nav_vTestPathIndependantTrajectoryStateMachine+0x258>)
 80016b4:	e9c1 2300 	strd	r2, r3, [r1]
 80016b8:	494c      	ldr	r1, [pc, #304]	; (80017ec <Nav_vTestPathIndependantTrajectoryStateMachine+0x25c>)
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	f04f 0300 	mov.w	r3, #0
 80016c2:	e9c1 2300 	strd	r2, r3, [r1]
 80016c6:	494a      	ldr	r1, [pc, #296]	; (80017f0 <Nav_vTestPathIndependantTrajectoryStateMachine+0x260>)
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	4b49      	ldr	r3, [pc, #292]	; (80017f4 <Nav_vTestPathIndependantTrajectoryStateMachine+0x264>)
 80016ce:	e9c1 2300 	strd	r2, r3, [r1]
 80016d2:	4949      	ldr	r1, [pc, #292]	; (80017f8 <Nav_vTestPathIndependantTrajectoryStateMachine+0x268>)
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	4b48      	ldr	r3, [pc, #288]	; (80017fc <Nav_vTestPathIndependantTrajectoryStateMachine+0x26c>)
 80016da:	e9c1 2300 	strd	r2, r3, [r1]
 80016de:	4948      	ldr	r1, [pc, #288]	; (8001800 <Nav_vTestPathIndependantTrajectoryStateMachine+0x270>)
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	f04f 0300 	mov.w	r3, #0
 80016e8:	e9c1 2300 	strd	r2, r3, [r1]
 80016ec:	4945      	ldr	r1, [pc, #276]	; (8001804 <Nav_vTestPathIndependantTrajectoryStateMachine+0x274>)
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	4b45      	ldr	r3, [pc, #276]	; (8001808 <Nav_vTestPathIndependantTrajectoryStateMachine+0x278>)
 80016f4:	e9c1 2300 	strd	r2, r3, [r1]
 80016f8:	e127      	b.n	800194a <Nav_vTestPathIndependantTrajectoryStateMachine+0x3ba>
		}
		else if ( Nav_TrajectoryMode_en == Nav_ReverseLinearTrajectory_en )
 80016fa:	4b37      	ldr	r3, [pc, #220]	; (80017d8 <Nav_vTestPathIndependantTrajectoryStateMachine+0x248>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	f040 8088 	bne.w	8001814 <Nav_vTestPathIndependantTrajectoryStateMachine+0x284>
		{
			Nav_MaxVelocity_d = Nav_MaxVelocity_d * SAMPLING_PERIOD ;
 8001704:	4b35      	ldr	r3, [pc, #212]	; (80017dc <Nav_vTestPathIndependantTrajectoryStateMachine+0x24c>)
 8001706:	e9d3 0100 	ldrd	r0, r1, [r3]
 800170a:	a323      	add	r3, pc, #140	; (adr r3, 8001798 <Nav_vTestPathIndependantTrajectoryStateMachine+0x208>)
 800170c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001710:	f7fe ff16 	bl	8000540 <__aeabi_dmul>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4930      	ldr	r1, [pc, #192]	; (80017dc <Nav_vTestPathIndependantTrajectoryStateMachine+0x24c>)
 800171a:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_Acc_d = Nav_Acc_d * SAMPLING_PERIOD * SAMPLING_PERIOD ;
 800171e:	4b30      	ldr	r3, [pc, #192]	; (80017e0 <Nav_vTestPathIndependantTrajectoryStateMachine+0x250>)
 8001720:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001724:	a31c      	add	r3, pc, #112	; (adr r3, 8001798 <Nav_vTestPathIndependantTrajectoryStateMachine+0x208>)
 8001726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172a:	f7fe ff09 	bl	8000540 <__aeabi_dmul>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4610      	mov	r0, r2
 8001734:	4619      	mov	r1, r3
 8001736:	a318      	add	r3, pc, #96	; (adr r3, 8001798 <Nav_vTestPathIndependantTrajectoryStateMachine+0x208>)
 8001738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173c:	f7fe ff00 	bl	8000540 <__aeabi_dmul>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4926      	ldr	r1, [pc, #152]	; (80017e0 <Nav_vTestPathIndependantTrajectoryStateMachine+0x250>)
 8001746:	e9c1 2300 	strd	r2, r3, [r1]
			REVERSE_LINEAR_TRAJECTORY_PID
 800174a:	4926      	ldr	r1, [pc, #152]	; (80017e4 <Nav_vTestPathIndependantTrajectoryStateMachine+0x254>)
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	4b2e      	ldr	r3, [pc, #184]	; (800180c <Nav_vTestPathIndependantTrajectoryStateMachine+0x27c>)
 8001752:	e9c1 2300 	strd	r2, r3, [r1]
 8001756:	4925      	ldr	r1, [pc, #148]	; (80017ec <Nav_vTestPathIndependantTrajectoryStateMachine+0x25c>)
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	f04f 0300 	mov.w	r3, #0
 8001760:	e9c1 2300 	strd	r2, r3, [r1]
 8001764:	4922      	ldr	r1, [pc, #136]	; (80017f0 <Nav_vTestPathIndependantTrajectoryStateMachine+0x260>)
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	4b29      	ldr	r3, [pc, #164]	; (8001810 <Nav_vTestPathIndependantTrajectoryStateMachine+0x280>)
 800176c:	e9c1 2300 	strd	r2, r3, [r1]
 8001770:	4921      	ldr	r1, [pc, #132]	; (80017f8 <Nav_vTestPathIndependantTrajectoryStateMachine+0x268>)
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	4b21      	ldr	r3, [pc, #132]	; (80017fc <Nav_vTestPathIndependantTrajectoryStateMachine+0x26c>)
 8001778:	e9c1 2300 	strd	r2, r3, [r1]
 800177c:	4920      	ldr	r1, [pc, #128]	; (8001800 <Nav_vTestPathIndependantTrajectoryStateMachine+0x270>)
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	e9c1 2300 	strd	r2, r3, [r1]
 800178a:	491e      	ldr	r1, [pc, #120]	; (8001804 <Nav_vTestPathIndependantTrajectoryStateMachine+0x274>)
 800178c:	a304      	add	r3, pc, #16	; (adr r3, 80017a0 <Nav_vTestPathIndependantTrajectoryStateMachine+0x210>)
 800178e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001792:	e9c1 2300 	strd	r2, r3, [r1]
 8001796:	e0d8      	b.n	800194a <Nav_vTestPathIndependantTrajectoryStateMachine+0x3ba>
 8001798:	47ae147b 	.word	0x47ae147b
 800179c:	3f747ae1 	.word	0x3f747ae1
 80017a0:	00000000 	.word	0x00000000
 80017a4:	408f3800 	.word	0x408f3800
 80017a8:	2000002e 	.word	0x2000002e
 80017ac:	20000480 	.word	0x20000480
 80017b0:	20000000 	.word	0x20000000
 80017b4:	40000c00 	.word	0x40000c00
 80017b8:	20000338 	.word	0x20000338
 80017bc:	20000358 	.word	0x20000358
 80017c0:	200003c0 	.word	0x200003c0
 80017c4:	200003c8 	.word	0x200003c8
 80017c8:	200003d8 	.word	0x200003d8
 80017cc:	200003e0 	.word	0x200003e0
 80017d0:	20000428 	.word	0x20000428
 80017d4:	20000440 	.word	0x20000440
 80017d8:	2000002f 	.word	0x2000002f
 80017dc:	20000468 	.word	0x20000468
 80017e0:	20000460 	.word	0x20000460
 80017e4:	200002d8 	.word	0x200002d8
 80017e8:	40590000 	.word	0x40590000
 80017ec:	200002e0 	.word	0x200002e0
 80017f0:	200002e8 	.word	0x200002e8
 80017f4:	408f4000 	.word	0x408f4000
 80017f8:	200002f0 	.word	0x200002f0
 80017fc:	40568000 	.word	0x40568000
 8001800:	200002f8 	.word	0x200002f8
 8001804:	20000300 	.word	0x20000300
 8001808:	408c2000 	.word	0x408c2000
 800180c:	40584000 	.word	0x40584000
 8001810:	40890000 	.word	0x40890000
		}
		else if ( Nav_TrajectoryMode_en == Nav_ForwardAngularTrajectory_en )
 8001814:	4b9a      	ldr	r3, [pc, #616]	; (8001a80 <Nav_vTestPathIndependantTrajectoryStateMachine+0x4f0>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d149      	bne.n	80018b0 <Nav_vTestPathIndependantTrajectoryStateMachine+0x320>
		{
			Nav_MaxAngularVelocity_d = Nav_MaxAngularVelocity_d * SAMPLING_PERIOD ;
 800181c:	4b99      	ldr	r3, [pc, #612]	; (8001a84 <Nav_vTestPathIndependantTrajectoryStateMachine+0x4f4>)
 800181e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001822:	a393      	add	r3, pc, #588	; (adr r3, 8001a70 <Nav_vTestPathIndependantTrajectoryStateMachine+0x4e0>)
 8001824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001828:	f7fe fe8a 	bl	8000540 <__aeabi_dmul>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4994      	ldr	r1, [pc, #592]	; (8001a84 <Nav_vTestPathIndependantTrajectoryStateMachine+0x4f4>)
 8001832:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_AngularAcc_d = Nav_AngularAcc_d * SAMPLING_PERIOD * SAMPLING_PERIOD;
 8001836:	4b94      	ldr	r3, [pc, #592]	; (8001a88 <Nav_vTestPathIndependantTrajectoryStateMachine+0x4f8>)
 8001838:	e9d3 0100 	ldrd	r0, r1, [r3]
 800183c:	a38c      	add	r3, pc, #560	; (adr r3, 8001a70 <Nav_vTestPathIndependantTrajectoryStateMachine+0x4e0>)
 800183e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001842:	f7fe fe7d 	bl	8000540 <__aeabi_dmul>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	a388      	add	r3, pc, #544	; (adr r3, 8001a70 <Nav_vTestPathIndependantTrajectoryStateMachine+0x4e0>)
 8001850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001854:	f7fe fe74 	bl	8000540 <__aeabi_dmul>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	498a      	ldr	r1, [pc, #552]	; (8001a88 <Nav_vTestPathIndependantTrajectoryStateMachine+0x4f8>)
 800185e:	e9c1 2300 	strd	r2, r3, [r1]
			FORWARD_ANGULAR_TRAJECTORY_PID
 8001862:	498a      	ldr	r1, [pc, #552]	; (8001a8c <Nav_vTestPathIndependantTrajectoryStateMachine+0x4fc>)
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	4b89      	ldr	r3, [pc, #548]	; (8001a90 <Nav_vTestPathIndependantTrajectoryStateMachine+0x500>)
 800186a:	e9c1 2300 	strd	r2, r3, [r1]
 800186e:	4989      	ldr	r1, [pc, #548]	; (8001a94 <Nav_vTestPathIndependantTrajectoryStateMachine+0x504>)
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	e9c1 2300 	strd	r2, r3, [r1]
 800187c:	4986      	ldr	r1, [pc, #536]	; (8001a98 <Nav_vTestPathIndependantTrajectoryStateMachine+0x508>)
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	4b86      	ldr	r3, [pc, #536]	; (8001a9c <Nav_vTestPathIndependantTrajectoryStateMachine+0x50c>)
 8001884:	e9c1 2300 	strd	r2, r3, [r1]
 8001888:	4985      	ldr	r1, [pc, #532]	; (8001aa0 <Nav_vTestPathIndependantTrajectoryStateMachine+0x510>)
 800188a:	a37b      	add	r3, pc, #492	; (adr r3, 8001a78 <Nav_vTestPathIndependantTrajectoryStateMachine+0x4e8>)
 800188c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001890:	e9c1 2300 	strd	r2, r3, [r1]
 8001894:	4983      	ldr	r1, [pc, #524]	; (8001aa4 <Nav_vTestPathIndependantTrajectoryStateMachine+0x514>)
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	f04f 0300 	mov.w	r3, #0
 800189e:	e9c1 2300 	strd	r2, r3, [r1]
 80018a2:	4981      	ldr	r1, [pc, #516]	; (8001aa8 <Nav_vTestPathIndependantTrajectoryStateMachine+0x518>)
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	4b80      	ldr	r3, [pc, #512]	; (8001aac <Nav_vTestPathIndependantTrajectoryStateMachine+0x51c>)
 80018aa:	e9c1 2300 	strd	r2, r3, [r1]
 80018ae:	e04c      	b.n	800194a <Nav_vTestPathIndependantTrajectoryStateMachine+0x3ba>
		}
		else if ( Nav_TrajectoryMode_en == Nav_ReverseAngularTrajectory_en )
 80018b0:	4b73      	ldr	r3, [pc, #460]	; (8001a80 <Nav_vTestPathIndependantTrajectoryStateMachine+0x4f0>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b03      	cmp	r3, #3
 80018b6:	d148      	bne.n	800194a <Nav_vTestPathIndependantTrajectoryStateMachine+0x3ba>
		{
			Nav_MaxAngularVelocity_d = Nav_MaxAngularVelocity_d * SAMPLING_PERIOD ;
 80018b8:	4b72      	ldr	r3, [pc, #456]	; (8001a84 <Nav_vTestPathIndependantTrajectoryStateMachine+0x4f4>)
 80018ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018be:	a36c      	add	r3, pc, #432	; (adr r3, 8001a70 <Nav_vTestPathIndependantTrajectoryStateMachine+0x4e0>)
 80018c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c4:	f7fe fe3c 	bl	8000540 <__aeabi_dmul>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	496d      	ldr	r1, [pc, #436]	; (8001a84 <Nav_vTestPathIndependantTrajectoryStateMachine+0x4f4>)
 80018ce:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_AngularAcc_d = Nav_AngularAcc_d * SAMPLING_PERIOD * SAMPLING_PERIOD;
 80018d2:	4b6d      	ldr	r3, [pc, #436]	; (8001a88 <Nav_vTestPathIndependantTrajectoryStateMachine+0x4f8>)
 80018d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018d8:	a365      	add	r3, pc, #404	; (adr r3, 8001a70 <Nav_vTestPathIndependantTrajectoryStateMachine+0x4e0>)
 80018da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018de:	f7fe fe2f 	bl	8000540 <__aeabi_dmul>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4610      	mov	r0, r2
 80018e8:	4619      	mov	r1, r3
 80018ea:	a361      	add	r3, pc, #388	; (adr r3, 8001a70 <Nav_vTestPathIndependantTrajectoryStateMachine+0x4e0>)
 80018ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f0:	f7fe fe26 	bl	8000540 <__aeabi_dmul>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4963      	ldr	r1, [pc, #396]	; (8001a88 <Nav_vTestPathIndependantTrajectoryStateMachine+0x4f8>)
 80018fa:	e9c1 2300 	strd	r2, r3, [r1]
			FORWARD_ANGULAR_TRAJECTORY_PID
 80018fe:	4963      	ldr	r1, [pc, #396]	; (8001a8c <Nav_vTestPathIndependantTrajectoryStateMachine+0x4fc>)
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	4b62      	ldr	r3, [pc, #392]	; (8001a90 <Nav_vTestPathIndependantTrajectoryStateMachine+0x500>)
 8001906:	e9c1 2300 	strd	r2, r3, [r1]
 800190a:	4962      	ldr	r1, [pc, #392]	; (8001a94 <Nav_vTestPathIndependantTrajectoryStateMachine+0x504>)
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	e9c1 2300 	strd	r2, r3, [r1]
 8001918:	495f      	ldr	r1, [pc, #380]	; (8001a98 <Nav_vTestPathIndependantTrajectoryStateMachine+0x508>)
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	4b5f      	ldr	r3, [pc, #380]	; (8001a9c <Nav_vTestPathIndependantTrajectoryStateMachine+0x50c>)
 8001920:	e9c1 2300 	strd	r2, r3, [r1]
 8001924:	495e      	ldr	r1, [pc, #376]	; (8001aa0 <Nav_vTestPathIndependantTrajectoryStateMachine+0x510>)
 8001926:	a354      	add	r3, pc, #336	; (adr r3, 8001a78 <Nav_vTestPathIndependantTrajectoryStateMachine+0x4e8>)
 8001928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192c:	e9c1 2300 	strd	r2, r3, [r1]
 8001930:	495c      	ldr	r1, [pc, #368]	; (8001aa4 <Nav_vTestPathIndependantTrajectoryStateMachine+0x514>)
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	f04f 0300 	mov.w	r3, #0
 800193a:	e9c1 2300 	strd	r2, r3, [r1]
 800193e:	495a      	ldr	r1, [pc, #360]	; (8001aa8 <Nav_vTestPathIndependantTrajectoryStateMachine+0x518>)
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	4b59      	ldr	r3, [pc, #356]	; (8001aac <Nav_vTestPathIndependantTrajectoryStateMachine+0x51c>)
 8001946:	e9c1 2300 	strd	r2, r3, [r1]
		}
		Nav_Counter_u32 = 0 ;
 800194a:	4b59      	ldr	r3, [pc, #356]	; (8001ab0 <Nav_vTestPathIndependantTrajectoryStateMachine+0x520>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
		Nav_TrajectoryState_en = Nav_Trajectory_WaitToExecute_en;
 8001950:	4b58      	ldr	r3, [pc, #352]	; (8001ab4 <Nav_vTestPathIndependantTrajectoryStateMachine+0x524>)
 8001952:	2203      	movs	r2, #3
 8001954:	701a      	strb	r2, [r3, #0]
	}break;
 8001956:	e29d      	b.n	8001e94 <Nav_vTestPathIndependantTrajectoryStateMachine+0x904>

	case Nav_Trajectory_WaitToExecute_en :
	{
		Nav_Counter_u32++;
 8001958:	4b55      	ldr	r3, [pc, #340]	; (8001ab0 <Nav_vTestPathIndependantTrajectoryStateMachine+0x520>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	3301      	adds	r3, #1
 800195e:	4a54      	ldr	r2, [pc, #336]	; (8001ab0 <Nav_vTestPathIndependantTrajectoryStateMachine+0x520>)
 8001960:	6013      	str	r3, [r2, #0]
		if (Nav_Counter_u32 > 2)
 8001962:	4b53      	ldr	r3, [pc, #332]	; (8001ab0 <Nav_vTestPathIndependantTrajectoryStateMachine+0x520>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b02      	cmp	r3, #2
 8001968:	f240 828b 	bls.w	8001e82 <Nav_vTestPathIndependantTrajectoryStateMachine+0x8f2>
		{
			Nav_TrajectoryState_en = Nav_Trajectory_Execute_en;
 800196c:	4b51      	ldr	r3, [pc, #324]	; (8001ab4 <Nav_vTestPathIndependantTrajectoryStateMachine+0x524>)
 800196e:	2204      	movs	r2, #4
 8001970:	701a      	strb	r2, [r3, #0]
			Nav_Counter_u32 = 0 ;
 8001972:	4b4f      	ldr	r3, [pc, #316]	; (8001ab0 <Nav_vTestPathIndependantTrajectoryStateMachine+0x520>)
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
		}
	}break;
 8001978:	e283      	b.n	8001e82 <Nav_vTestPathIndependantTrajectoryStateMachine+0x8f2>

	case Nav_Trajectory_Execute_en :
	{
		Nav_CurrentSample_u32++;
 800197a:	4b4f      	ldr	r3, [pc, #316]	; (8001ab8 <Nav_vTestPathIndependantTrajectoryStateMachine+0x528>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	3301      	adds	r3, #1
 8001980:	4a4d      	ldr	r2, [pc, #308]	; (8001ab8 <Nav_vTestPathIndependantTrajectoryStateMachine+0x528>)
 8001982:	6013      	str	r3, [r2, #0]
		if  ( Nav_TrajectoryMode_en == Nav_ForwardLinearTrajectory_en )
 8001984:	4b3e      	ldr	r3, [pc, #248]	; (8001a80 <Nav_vTestPathIndependantTrajectoryStateMachine+0x4f0>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d111      	bne.n	80019b0 <Nav_vTestPathIndependantTrajectoryStateMachine+0x420>
		{
//			Nav_TargetDistance_mm_d = sqrt ( pow( Nav_TargetX_mm_d - Nav_CurrentX_mm_d ,2 ) + pow( Nav_TargetY_mm_d - Nav_CurrentY_mm_d , 2 ) ) ;
			Nav_RemainingDistance_mm_d = Nav_TargetDistance_mm_d - Nav_CurrentTargetDistance_mm_d ;
 800198c:	4b4b      	ldr	r3, [pc, #300]	; (8001abc <Nav_vTestPathIndependantTrajectoryStateMachine+0x52c>)
 800198e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001992:	4b4b      	ldr	r3, [pc, #300]	; (8001ac0 <Nav_vTestPathIndependantTrajectoryStateMachine+0x530>)
 8001994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001998:	f7fe fc1a 	bl	80001d0 <__aeabi_dsub>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4948      	ldr	r1, [pc, #288]	; (8001ac4 <Nav_vTestPathIndependantTrajectoryStateMachine+0x534>)
 80019a2:	e9c1 2300 	strd	r2, r3, [r1]
//				Nav_CurrentTargetY_mm_d = Nav_CurrentY_mm_d + ( Nav_CurrentTargetDistance_mm_d -  Nav_MeasuredDistance_mm_d )*sin( Nav_CurrentAngle_rad_d ) ;
//				Nav_CurrentTargetAngle_deg_d = ( atan2( (Nav_TargetY_mm_d - Nav_CurrentTargetY_mm_d) ,(Nav_TargetX_mm_d - Nav_CurrentTargetX_mm_d ) ) * 180.0 ) / M_PI;
//
//				Nav_vCurrentTargetAngleFollower();
//			}
			Nav_TrapezeLinearVelocity2();
 80019a6:	f000 fc57 	bl	8002258 <Nav_TrapezeLinearVelocity2>
			Nav_vTargetDistanceCalculationRoutine();
 80019aa:	f001 fc1b 	bl	80031e4 <Nav_vTargetDistanceCalculationRoutine>
 80019ae:	e040      	b.n	8001a32 <Nav_vTestPathIndependantTrajectoryStateMachine+0x4a2>
		}
		else if ( Nav_TrajectoryMode_en == Nav_ReverseLinearTrajectory_en )
 80019b0:	4b33      	ldr	r3, [pc, #204]	; (8001a80 <Nav_vTestPathIndependantTrajectoryStateMachine+0x4f0>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d111      	bne.n	80019dc <Nav_vTestPathIndependantTrajectoryStateMachine+0x44c>
		{
//			Nav_TargetDistance_mm_d = - sqrt ( pow( Nav_TargetX_mm_d - Nav_CurrentX_mm_d ,2 ) + pow( Nav_TargetY_mm_d - Nav_CurrentY_mm_d , 2 ) ) ;
			Nav_RemainingDistance_mm_d = Nav_TargetDistance_mm_d - Nav_CurrentTargetDistance_mm_d ;
 80019b8:	4b40      	ldr	r3, [pc, #256]	; (8001abc <Nav_vTestPathIndependantTrajectoryStateMachine+0x52c>)
 80019ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019be:	4b40      	ldr	r3, [pc, #256]	; (8001ac0 <Nav_vTestPathIndependantTrajectoryStateMachine+0x530>)
 80019c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c4:	f7fe fc04 	bl	80001d0 <__aeabi_dsub>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	493d      	ldr	r1, [pc, #244]	; (8001ac4 <Nav_vTestPathIndependantTrajectoryStateMachine+0x534>)
 80019ce:	e9c1 2300 	strd	r2, r3, [r1]
//				Nav_CurrentTargetAngle_deg_d = ( atan2( (Nav_CurrentTargetY_mm_d - Nav_TargetY_mm_d ) ,(Nav_CurrentTargetX_mm_d - Nav_TargetX_mm_d ) ) * 180.0 ) / M_PI;
//				Nav_Test_enter_2 ++ ;
//				Nav_vCurrentTargetAngleFollower();
//				//Nav_CurrentTargetAngle_deg_d=0;
//			}
			Nav_TrapezeReverseLinearVelocity2();
 80019d2:	f000 fe2d 	bl	8002630 <Nav_TrapezeReverseLinearVelocity2>
			Nav_vTargetDistanceCalculationRoutine();
 80019d6:	f001 fc05 	bl	80031e4 <Nav_vTargetDistanceCalculationRoutine>
 80019da:	e02a      	b.n	8001a32 <Nav_vTestPathIndependantTrajectoryStateMachine+0x4a2>
			//			Nav_Going_BackwardTargetY_mm_d = 2 * Nav_CurrentY_mm_d - Nav_TargetY_mm_d ;
			//			Nav_TargetAngle_deg_d = ( atan2( (Nav_Going_BackwardTargetY_mm_d - Nav_CurrentY_mm_d) ,(Nav_Going_BackwardTargetX_mm_d - Nav_CurrentX_mm_d ) ) * 180.0 ) / M_PI;


		}
		else if ( Nav_TrajectoryMode_en == Nav_ForwardAngularTrajectory_en )
 80019dc:	4b28      	ldr	r3, [pc, #160]	; (8001a80 <Nav_vTestPathIndependantTrajectoryStateMachine+0x4f0>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d111      	bne.n	8001a08 <Nav_vTestPathIndependantTrajectoryStateMachine+0x478>
//				else
//				{
//					Nav_TargetAngle_deg_d = ( atan2( (Nav_CurrentY_mm_d - Nav_TargetY_mm_d) ,(Nav_CurrentX_mm_d - Nav_TargetX_mm_d ) ) * 180.0 ) / M_PI;
//				}
//			}
			Nav_RemainingAngle_deg_d =  Nav_TargetAngle_deg_d - Nav_CurrentTargetAngle_deg_d  ;
 80019e4:	4b38      	ldr	r3, [pc, #224]	; (8001ac8 <Nav_vTestPathIndependantTrajectoryStateMachine+0x538>)
 80019e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019ea:	4b38      	ldr	r3, [pc, #224]	; (8001acc <Nav_vTestPathIndependantTrajectoryStateMachine+0x53c>)
 80019ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f0:	f7fe fbee 	bl	80001d0 <__aeabi_dsub>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4935      	ldr	r1, [pc, #212]	; (8001ad0 <Nav_vTestPathIndependantTrajectoryStateMachine+0x540>)
 80019fa:	e9c1 2300 	strd	r2, r3, [r1]
//			Nav_vSaturateRemainingAngle();
			Nav_TrapezeAngularVelocity2();
 80019fe:	f001 f803 	bl	8002a08 <Nav_TrapezeAngularVelocity2>
			Nav_vTargetAngleCalculationRoutine();
 8001a02:	f001 fc0d 	bl	8003220 <Nav_vTargetAngleCalculationRoutine>
 8001a06:	e014      	b.n	8001a32 <Nav_vTestPathIndependantTrajectoryStateMachine+0x4a2>
		}
		else if ( Nav_TrajectoryMode_en == Nav_ReverseAngularTrajectory_en )
 8001a08:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <Nav_vTestPathIndependantTrajectoryStateMachine+0x4f0>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d110      	bne.n	8001a32 <Nav_vTestPathIndependantTrajectoryStateMachine+0x4a2>
//				else
//				{
//					Nav_TargetAngle_deg_d = ( atan2( (Nav_CurrentY_mm_d - Nav_TargetY_mm_d) ,(Nav_CurrentX_mm_d - Nav_TargetX_mm_d ) ) * 180.0 ) / M_PI;
//				}
//			}
			Nav_RemainingAngle_deg_d =  Nav_TargetAngle_deg_d - Nav_CurrentTargetAngle_deg_d  ;
 8001a10:	4b2d      	ldr	r3, [pc, #180]	; (8001ac8 <Nav_vTestPathIndependantTrajectoryStateMachine+0x538>)
 8001a12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a16:	4b2d      	ldr	r3, [pc, #180]	; (8001acc <Nav_vTestPathIndependantTrajectoryStateMachine+0x53c>)
 8001a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1c:	f7fe fbd8 	bl	80001d0 <__aeabi_dsub>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	492a      	ldr	r1, [pc, #168]	; (8001ad0 <Nav_vTestPathIndependantTrajectoryStateMachine+0x540>)
 8001a26:	e9c1 2300 	strd	r2, r3, [r1]
//			Nav_vSaturateRemainingAngle();
			Nav_TrapezeReverseAngularVelocity2();
 8001a2a:	f001 f9e9 	bl	8002e00 <Nav_TrapezeReverseAngularVelocity2>
			Nav_vTargetAngleCalculationRoutine();
 8001a2e:	f001 fbf7 	bl	8003220 <Nav_vTargetAngleCalculationRoutine>
		}
		if  ( ( Nav_TrajectoryMode_en == Nav_ForwardLinearTrajectory_en ) || ( Nav_TrajectoryMode_en == Nav_ReverseLinearTrajectory_en ) )
 8001a32:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <Nav_vTestPathIndependantTrajectoryStateMachine+0x4f0>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d004      	beq.n	8001a44 <Nav_vTestPathIndependantTrajectoryStateMachine+0x4b4>
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <Nav_vTestPathIndependantTrajectoryStateMachine+0x4f0>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	f040 808f 	bne.w	8001b62 <Nav_vTestPathIndependantTrajectoryStateMachine+0x5d2>
		{
			if( ( Nav_CurrentSample_u32 > Nav_AccelerationSamples_u32 )
 8001a44:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <Nav_vTestPathIndependantTrajectoryStateMachine+0x528>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b22      	ldr	r3, [pc, #136]	; (8001ad4 <Nav_vTestPathIndependantTrajectoryStateMachine+0x544>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	f240 80e8 	bls.w	8001c22 <Nav_vTestPathIndependantTrajectoryStateMachine+0x692>
					&& ( Nav_TargetLinearVelocity_d == 0 )
 8001a52:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <Nav_vTestPathIndependantTrajectoryStateMachine+0x548>)
 8001a54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	f7fe ffd6 	bl	8000a10 <__aeabi_dcmpeq>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d138      	bne.n	8001adc <Nav_vTestPathIndependantTrajectoryStateMachine+0x54c>
			if( ( Nav_CurrentSample_u32 > Nav_AccelerationSamples_u32 )
 8001a6a:	e0da      	b.n	8001c22 <Nav_vTestPathIndependantTrajectoryStateMachine+0x692>
 8001a6c:	f3af 8000 	nop.w
 8001a70:	47ae147b 	.word	0x47ae147b
 8001a74:	3f747ae1 	.word	0x3f747ae1
 8001a78:	9999999a 	.word	0x9999999a
 8001a7c:	405bb999 	.word	0x405bb999
 8001a80:	2000002f 	.word	0x2000002f
 8001a84:	20000478 	.word	0x20000478
 8001a88:	20000470 	.word	0x20000470
 8001a8c:	200002d8 	.word	0x200002d8
 8001a90:	40568000 	.word	0x40568000
 8001a94:	200002e0 	.word	0x200002e0
 8001a98:	200002e8 	.word	0x200002e8
 8001a9c:	408c2000 	.word	0x408c2000
 8001aa0:	200002f0 	.word	0x200002f0
 8001aa4:	200002f8 	.word	0x200002f8
 8001aa8:	20000300 	.word	0x20000300
 8001aac:	40890000 	.word	0x40890000
 8001ab0:	20000488 	.word	0x20000488
 8001ab4:	2000002e 	.word	0x2000002e
 8001ab8:	20000480 	.word	0x20000480
 8001abc:	200003b0 	.word	0x200003b0
 8001ac0:	200003c0 	.word	0x200003c0
 8001ac4:	200003b8 	.word	0x200003b8
 8001ac8:	200003d0 	.word	0x200003d0
 8001acc:	200003d8 	.word	0x200003d8
 8001ad0:	20000360 	.word	0x20000360
 8001ad4:	20000484 	.word	0x20000484
 8001ad8:	200003e8 	.word	0x200003e8
					&& ( fabs (Nav_TargetAngularVelocity_d) < 0.0001 )
 8001adc:	4ba0      	ldr	r3, [pc, #640]	; (8001d60 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7d0>)
 8001ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae2:	603a      	str	r2, [r7, #0]
 8001ae4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	a397      	add	r3, pc, #604	; (adr r3, 8001d48 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7b8>)
 8001aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001af4:	f7fe ff96 	bl	8000a24 <__aeabi_dcmplt>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d100      	bne.n	8001b00 <Nav_vTestPathIndependantTrajectoryStateMachine+0x570>
			if( ( Nav_CurrentSample_u32 > Nav_AccelerationSamples_u32 )
 8001afe:	e090      	b.n	8001c22 <Nav_vTestPathIndependantTrajectoryStateMachine+0x692>
					&& ( Nav_MeasuredVelocity_mm_d == 0 )
 8001b00:	4b98      	ldr	r3, [pc, #608]	; (8001d64 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7d4>)
 8001b02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b06:	f04f 0200 	mov.w	r2, #0
 8001b0a:	f04f 0300 	mov.w	r3, #0
 8001b0e:	f7fe ff7f 	bl	8000a10 <__aeabi_dcmpeq>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d100      	bne.n	8001b1a <Nav_vTestPathIndependantTrajectoryStateMachine+0x58a>
			if( ( Nav_CurrentSample_u32 > Nav_AccelerationSamples_u32 )
 8001b18:	e083      	b.n	8001c22 <Nav_vTestPathIndependantTrajectoryStateMachine+0x692>
					&& ( Nav_MeasuredAngularVelocity_deg_d == 0 )
 8001b1a:	4b93      	ldr	r3, [pc, #588]	; (8001d68 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7d8>)
 8001b1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	f04f 0300 	mov.w	r3, #0
 8001b28:	f7fe ff72 	bl	8000a10 <__aeabi_dcmpeq>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d100      	bne.n	8001b34 <Nav_vTestPathIndependantTrajectoryStateMachine+0x5a4>
			if( ( Nav_CurrentSample_u32 > Nav_AccelerationSamples_u32 )
 8001b32:	e076      	b.n	8001c22 <Nav_vTestPathIndependantTrajectoryStateMachine+0x692>
					&& ( fabs( Nav_DistanceError_d ) < 1.5 ) )
 8001b34:	4b8d      	ldr	r3, [pc, #564]	; (8001d6c <Nav_vTestPathIndependantTrajectoryStateMachine+0x7dc>)
 8001b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3a:	4692      	mov	sl, r2
 8001b3c:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	4b8a      	ldr	r3, [pc, #552]	; (8001d70 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7e0>)
 8001b46:	4650      	mov	r0, sl
 8001b48:	4659      	mov	r1, fp
 8001b4a:	f7fe ff6b 	bl	8000a24 <__aeabi_dcmplt>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d100      	bne.n	8001b56 <Nav_vTestPathIndependantTrajectoryStateMachine+0x5c6>
			if( ( Nav_CurrentSample_u32 > Nav_AccelerationSamples_u32 )
 8001b54:	e065      	b.n	8001c22 <Nav_vTestPathIndependantTrajectoryStateMachine+0x692>
			{
				Nav_Counter_u32 ++ ;
 8001b56:	4b87      	ldr	r3, [pc, #540]	; (8001d74 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7e4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	4a85      	ldr	r2, [pc, #532]	; (8001d74 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7e4>)
 8001b5e:	6013      	str	r3, [r2, #0]
			if( ( Nav_CurrentSample_u32 > Nav_AccelerationSamples_u32 )
 8001b60:	e05f      	b.n	8001c22 <Nav_vTestPathIndependantTrajectoryStateMachine+0x692>
				//Nav_TrajectoryState_en = Nav_Trajectory_WaitAfterArriving_en;
			}
		}
		else if ( ( Nav_TrajectoryMode_en == Nav_ForwardAngularTrajectory_en ) ||  ( Nav_TrajectoryMode_en == Nav_ReverseAngularTrajectory_en  ) )
 8001b62:	4b85      	ldr	r3, [pc, #532]	; (8001d78 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7e8>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d003      	beq.n	8001b72 <Nav_vTestPathIndependantTrajectoryStateMachine+0x5e2>
 8001b6a:	4b83      	ldr	r3, [pc, #524]	; (8001d78 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7e8>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b03      	cmp	r3, #3
 8001b70:	d154      	bne.n	8001c1c <Nav_vTestPathIndependantTrajectoryStateMachine+0x68c>
		{
			if( ( Nav_CurrentSample_u32 > Nav_AccelerationSamples_u32 )
 8001b72:	4b82      	ldr	r3, [pc, #520]	; (8001d7c <Nav_vTestPathIndependantTrajectoryStateMachine+0x7ec>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	4b82      	ldr	r3, [pc, #520]	; (8001d80 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7f0>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d951      	bls.n	8001c22 <Nav_vTestPathIndependantTrajectoryStateMachine+0x692>
					&& ( Nav_TargetLinearVelocity_d == 0 )
 8001b7e:	4b81      	ldr	r3, [pc, #516]	; (8001d84 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7f4>)
 8001b80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	f7fe ff40 	bl	8000a10 <__aeabi_dcmpeq>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d100      	bne.n	8001b98 <Nav_vTestPathIndependantTrajectoryStateMachine+0x608>
			if( ( Nav_CurrentSample_u32 > Nav_AccelerationSamples_u32 )
 8001b96:	e044      	b.n	8001c22 <Nav_vTestPathIndependantTrajectoryStateMachine+0x692>
					&& ( fabs (Nav_TargetAngularVelocity_d) < 0.0001 )
 8001b98:	4b71      	ldr	r3, [pc, #452]	; (8001d60 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7d0>)
 8001b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9e:	4690      	mov	r8, r2
 8001ba0:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001ba4:	a368      	add	r3, pc, #416	; (adr r3, 8001d48 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7b8>)
 8001ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001baa:	4640      	mov	r0, r8
 8001bac:	4649      	mov	r1, r9
 8001bae:	f7fe ff39 	bl	8000a24 <__aeabi_dcmplt>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d100      	bne.n	8001bba <Nav_vTestPathIndependantTrajectoryStateMachine+0x62a>
			if( ( Nav_CurrentSample_u32 > Nav_AccelerationSamples_u32 )
 8001bb8:	e033      	b.n	8001c22 <Nav_vTestPathIndependantTrajectoryStateMachine+0x692>
					&& ( Nav_MeasuredVelocity_mm_d == 0 )
 8001bba:	4b6a      	ldr	r3, [pc, #424]	; (8001d64 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7d4>)
 8001bbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	f04f 0300 	mov.w	r3, #0
 8001bc8:	f7fe ff22 	bl	8000a10 <__aeabi_dcmpeq>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d100      	bne.n	8001bd4 <Nav_vTestPathIndependantTrajectoryStateMachine+0x644>
			if( ( Nav_CurrentSample_u32 > Nav_AccelerationSamples_u32 )
 8001bd2:	e026      	b.n	8001c22 <Nav_vTestPathIndependantTrajectoryStateMachine+0x692>
					&& ( Nav_MeasuredAngularVelocity_deg_d == 0 )
 8001bd4:	4b64      	ldr	r3, [pc, #400]	; (8001d68 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7d8>)
 8001bd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	f7fe ff15 	bl	8000a10 <__aeabi_dcmpeq>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d100      	bne.n	8001bee <Nav_vTestPathIndependantTrajectoryStateMachine+0x65e>
			if( ( Nav_CurrentSample_u32 > Nav_AccelerationSamples_u32 )
 8001bec:	e019      	b.n	8001c22 <Nav_vTestPathIndependantTrajectoryStateMachine+0x692>
					&& ( fabs( Nav_AngleError_d ) < 1.5 ) )
 8001bee:	4b66      	ldr	r3, [pc, #408]	; (8001d88 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7f8>)
 8001bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf4:	4614      	mov	r4, r2
 8001bf6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	4b5c      	ldr	r3, [pc, #368]	; (8001d70 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7e0>)
 8001c00:	4620      	mov	r0, r4
 8001c02:	4629      	mov	r1, r5
 8001c04:	f7fe ff0e 	bl	8000a24 <__aeabi_dcmplt>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d100      	bne.n	8001c10 <Nav_vTestPathIndependantTrajectoryStateMachine+0x680>
			if( ( Nav_CurrentSample_u32 > Nav_AccelerationSamples_u32 )
 8001c0e:	e008      	b.n	8001c22 <Nav_vTestPathIndependantTrajectoryStateMachine+0x692>
			{
				Nav_Counter_u32 ++ ;
 8001c10:	4b58      	ldr	r3, [pc, #352]	; (8001d74 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7e4>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	3301      	adds	r3, #1
 8001c16:	4a57      	ldr	r2, [pc, #348]	; (8001d74 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7e4>)
 8001c18:	6013      	str	r3, [r2, #0]
			if( ( Nav_CurrentSample_u32 > Nav_AccelerationSamples_u32 )
 8001c1a:	e002      	b.n	8001c22 <Nav_vTestPathIndependantTrajectoryStateMachine+0x692>
				//Nav_TrajectoryState_en = Nav_Trajectory_WaitAfterArriving_en;
			}
		}
		else
		{
			Nav_Counter_u32 = 0 ;
 8001c1c:	4b55      	ldr	r3, [pc, #340]	; (8001d74 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7e4>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
		}
		if ( Nav_Counter_u32 > 5 )
 8001c22:	4b54      	ldr	r3, [pc, #336]	; (8001d74 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7e4>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2b05      	cmp	r3, #5
 8001c28:	f240 812d 	bls.w	8001e86 <Nav_vTestPathIndependantTrajectoryStateMachine+0x8f6>
		{
			Nav_TrajectoryState_en = Nav_Trajectory_WaitAfterArriving_en;
 8001c2c:	4b57      	ldr	r3, [pc, #348]	; (8001d8c <Nav_vTestPathIndependantTrajectoryStateMachine+0x7fc>)
 8001c2e:	2207      	movs	r2, #7
 8001c30:	701a      	strb	r2, [r3, #0]
			Nav_Counter_u32 = 0 ;
 8001c32:	4b50      	ldr	r3, [pc, #320]	; (8001d74 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7e4>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
		}

	}break;
 8001c38:	e125      	b.n	8001e86 <Nav_vTestPathIndependantTrajectoryStateMachine+0x8f6>
	case Nav_Trajectory_OrderSuddenStop_en :
	{
		Nav_TrapezePhase_en = Nav_Trapeze_OrderUrgentDecelerating_en ;
 8001c3a:	4b55      	ldr	r3, [pc, #340]	; (8001d90 <Nav_vTestPathIndependantTrajectoryStateMachine+0x800>)
 8001c3c:	2204      	movs	r2, #4
 8001c3e:	701a      	strb	r2, [r3, #0]

		Nav_TrajectoryState_en = Nav_Trajectory_ExecuteSuddenStop_en ;
 8001c40:	4b52      	ldr	r3, [pc, #328]	; (8001d8c <Nav_vTestPathIndependantTrajectoryStateMachine+0x7fc>)
 8001c42:	2206      	movs	r2, #6
 8001c44:	701a      	strb	r2, [r3, #0]
		if ( Nav_TrajectoryMode_en == Nav_ForwardLinearTrajectory_en )
 8001c46:	4b4c      	ldr	r3, [pc, #304]	; (8001d78 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7e8>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d106      	bne.n	8001c5c <Nav_vTestPathIndependantTrajectoryStateMachine+0x6cc>
		{
			Nav_Acc_d = 16000 * SAMPLING_PERIOD * SAMPLING_PERIOD ;//4000
 8001c4e:	4951      	ldr	r1, [pc, #324]	; (8001d94 <Nav_vTestPathIndependantTrajectoryStateMachine+0x804>)
 8001c50:	a33f      	add	r3, pc, #252	; (adr r3, 8001d50 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7c0>)
 8001c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c56:	e9c1 2300 	strd	r2, r3, [r1]
 8001c5a:	e04f      	b.n	8001cfc <Nav_vTestPathIndependantTrajectoryStateMachine+0x76c>
		}
		else if ( Nav_TrajectoryMode_en == Nav_ReverseLinearTrajectory_en )
 8001c5c:	4b46      	ldr	r3, [pc, #280]	; (8001d78 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7e8>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d116      	bne.n	8001c92 <Nav_vTestPathIndependantTrajectoryStateMachine+0x702>
		{
			Nav_Acc_d = Nav_Acc_d * SAMPLING_PERIOD * SAMPLING_PERIOD ;
 8001c64:	4b4b      	ldr	r3, [pc, #300]	; (8001d94 <Nav_vTestPathIndependantTrajectoryStateMachine+0x804>)
 8001c66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c6a:	a33b      	add	r3, pc, #236	; (adr r3, 8001d58 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7c8>)
 8001c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c70:	f7fe fc66 	bl	8000540 <__aeabi_dmul>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4610      	mov	r0, r2
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	a336      	add	r3, pc, #216	; (adr r3, 8001d58 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7c8>)
 8001c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c82:	f7fe fc5d 	bl	8000540 <__aeabi_dmul>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4942      	ldr	r1, [pc, #264]	; (8001d94 <Nav_vTestPathIndependantTrajectoryStateMachine+0x804>)
 8001c8c:	e9c1 2300 	strd	r2, r3, [r1]
 8001c90:	e034      	b.n	8001cfc <Nav_vTestPathIndependantTrajectoryStateMachine+0x76c>
		}
		else if ( Nav_TrajectoryMode_en == Nav_ForwardAngularTrajectory_en )
 8001c92:	4b39      	ldr	r3, [pc, #228]	; (8001d78 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7e8>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d116      	bne.n	8001cc8 <Nav_vTestPathIndependantTrajectoryStateMachine+0x738>
		{
			Nav_AngularAcc_d = Nav_AngularAcc_d * SAMPLING_PERIOD * SAMPLING_PERIOD;
 8001c9a:	4b3f      	ldr	r3, [pc, #252]	; (8001d98 <Nav_vTestPathIndependantTrajectoryStateMachine+0x808>)
 8001c9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ca0:	a32d      	add	r3, pc, #180	; (adr r3, 8001d58 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7c8>)
 8001ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca6:	f7fe fc4b 	bl	8000540 <__aeabi_dmul>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4610      	mov	r0, r2
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	a329      	add	r3, pc, #164	; (adr r3, 8001d58 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7c8>)
 8001cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb8:	f7fe fc42 	bl	8000540 <__aeabi_dmul>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4935      	ldr	r1, [pc, #212]	; (8001d98 <Nav_vTestPathIndependantTrajectoryStateMachine+0x808>)
 8001cc2:	e9c1 2300 	strd	r2, r3, [r1]
 8001cc6:	e019      	b.n	8001cfc <Nav_vTestPathIndependantTrajectoryStateMachine+0x76c>
		}
		else if ( Nav_TrajectoryMode_en == Nav_ReverseAngularTrajectory_en )
 8001cc8:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7e8>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	d115      	bne.n	8001cfc <Nav_vTestPathIndependantTrajectoryStateMachine+0x76c>
		{
			Nav_AngularAcc_d = Nav_AngularAcc_d * SAMPLING_PERIOD * SAMPLING_PERIOD;
 8001cd0:	4b31      	ldr	r3, [pc, #196]	; (8001d98 <Nav_vTestPathIndependantTrajectoryStateMachine+0x808>)
 8001cd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cd6:	a320      	add	r3, pc, #128	; (adr r3, 8001d58 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7c8>)
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	f7fe fc30 	bl	8000540 <__aeabi_dmul>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	a31b      	add	r3, pc, #108	; (adr r3, 8001d58 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7c8>)
 8001cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cee:	f7fe fc27 	bl	8000540 <__aeabi_dmul>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4928      	ldr	r1, [pc, #160]	; (8001d98 <Nav_vTestPathIndependantTrajectoryStateMachine+0x808>)
 8001cf8:	e9c1 2300 	strd	r2, r3, [r1]
		}
		Nav_CurrentSample_u32++;
 8001cfc:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <Nav_vTestPathIndependantTrajectoryStateMachine+0x7ec>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	3301      	adds	r3, #1
 8001d02:	4a1e      	ldr	r2, [pc, #120]	; (8001d7c <Nav_vTestPathIndependantTrajectoryStateMachine+0x7ec>)
 8001d04:	6013      	str	r3, [r2, #0]
		if (  Nav_TrajectoryMode_en == Nav_ForwardLinearTrajectory_en )
 8001d06:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7e8>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d104      	bne.n	8001d18 <Nav_vTestPathIndependantTrajectoryStateMachine+0x788>
		{
			Nav_TrapezeLinearVelocity2();
 8001d0e:	f000 faa3 	bl	8002258 <Nav_TrapezeLinearVelocity2>
			Nav_vTargetDistanceCalculationRoutine();
 8001d12:	f001 fa67 	bl	80031e4 <Nav_vTargetDistanceCalculationRoutine>
		else if ( Nav_TrajectoryMode_en == Nav_ReverseAngularTrajectory_en )
		{
			Nav_TrapezeReverseAngularVelocity2();
			Nav_vTargetAngleCalculationRoutine();
		}
	}break;
 8001d16:	e0b8      	b.n	8001e8a <Nav_vTestPathIndependantTrajectoryStateMachine+0x8fa>
		else if ( Nav_TrajectoryMode_en == Nav_ReverseLinearTrajectory_en )
 8001d18:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7e8>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	f000 80b4 	beq.w	8001e8a <Nav_vTestPathIndependantTrajectoryStateMachine+0x8fa>
		else if ( Nav_TrajectoryMode_en == Nav_ForwardAngularTrajectory_en )
 8001d22:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7e8>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d104      	bne.n	8001d34 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7a4>
			Nav_TrapezeAngularVelocity2();
 8001d2a:	f000 fe6d 	bl	8002a08 <Nav_TrapezeAngularVelocity2>
			Nav_vTargetAngleCalculationRoutine();
 8001d2e:	f001 fa77 	bl	8003220 <Nav_vTargetAngleCalculationRoutine>
	}break;
 8001d32:	e0aa      	b.n	8001e8a <Nav_vTestPathIndependantTrajectoryStateMachine+0x8fa>
		else if ( Nav_TrajectoryMode_en == Nav_ReverseAngularTrajectory_en )
 8001d34:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <Nav_vTestPathIndependantTrajectoryStateMachine+0x7e8>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	f040 80a6 	bne.w	8001e8a <Nav_vTestPathIndependantTrajectoryStateMachine+0x8fa>
			Nav_TrapezeReverseAngularVelocity2();
 8001d3e:	f001 f85f 	bl	8002e00 <Nav_TrapezeReverseAngularVelocity2>
			Nav_vTargetAngleCalculationRoutine();
 8001d42:	f001 fa6d 	bl	8003220 <Nav_vTargetAngleCalculationRoutine>
	}break;
 8001d46:	e0a0      	b.n	8001e8a <Nav_vTestPathIndependantTrajectoryStateMachine+0x8fa>
 8001d48:	eb1c432d 	.word	0xeb1c432d
 8001d4c:	3f1a36e2 	.word	0x3f1a36e2
 8001d50:	9999999a 	.word	0x9999999a
 8001d54:	3fd99999 	.word	0x3fd99999
 8001d58:	47ae147b 	.word	0x47ae147b
 8001d5c:	3f747ae1 	.word	0x3f747ae1
 8001d60:	200003f0 	.word	0x200003f0
 8001d64:	20000400 	.word	0x20000400
 8001d68:	20000410 	.word	0x20000410
 8001d6c:	20000420 	.word	0x20000420
 8001d70:	3ff80000 	.word	0x3ff80000
 8001d74:	20000488 	.word	0x20000488
 8001d78:	2000002f 	.word	0x2000002f
 8001d7c:	20000480 	.word	0x20000480
 8001d80:	20000484 	.word	0x20000484
 8001d84:	200003e8 	.word	0x200003e8
 8001d88:	20000438 	.word	0x20000438
 8001d8c:	2000002e 	.word	0x2000002e
 8001d90:	20000000 	.word	0x20000000
 8001d94:	20000460 	.word	0x20000460
 8001d98:	20000470 	.word	0x20000470
	case Nav_Trajectory_ExecuteSuddenStop_en :
	{

		Nav_CurrentSample_u32++;
 8001d9c:	4b40      	ldr	r3, [pc, #256]	; (8001ea0 <Nav_vTestPathIndependantTrajectoryStateMachine+0x910>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	3301      	adds	r3, #1
 8001da2:	4a3f      	ldr	r2, [pc, #252]	; (8001ea0 <Nav_vTestPathIndependantTrajectoryStateMachine+0x910>)
 8001da4:	6013      	str	r3, [r2, #0]
		if ( ( Nav_TrajectoryMode_en == Nav_ForwardLinearTrajectory_en ) || ( Nav_TrajectoryMode_en == Nav_ReverseLinearTrajectory_en ) )
 8001da6:	4b3f      	ldr	r3, [pc, #252]	; (8001ea4 <Nav_vTestPathIndependantTrajectoryStateMachine+0x914>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <Nav_vTestPathIndependantTrajectoryStateMachine+0x826>
 8001dae:	4b3d      	ldr	r3, [pc, #244]	; (8001ea4 <Nav_vTestPathIndependantTrajectoryStateMachine+0x914>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d104      	bne.n	8001dc0 <Nav_vTestPathIndependantTrajectoryStateMachine+0x830>
		{
			Nav_TrapezeLinearVelocity2();
 8001db6:	f000 fa4f 	bl	8002258 <Nav_TrapezeLinearVelocity2>
			Nav_vTargetDistanceCalculationRoutine();
 8001dba:	f001 fa13 	bl	80031e4 <Nav_vTargetDistanceCalculationRoutine>
 8001dbe:	e010      	b.n	8001de2 <Nav_vTestPathIndependantTrajectoryStateMachine+0x852>
		}
		else if ( Nav_TrajectoryMode_en == Nav_ForwardAngularTrajectory_en )
 8001dc0:	4b38      	ldr	r3, [pc, #224]	; (8001ea4 <Nav_vTestPathIndependantTrajectoryStateMachine+0x914>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d104      	bne.n	8001dd2 <Nav_vTestPathIndependantTrajectoryStateMachine+0x842>
		{
			Nav_TrapezeAngularVelocity2();
 8001dc8:	f000 fe1e 	bl	8002a08 <Nav_TrapezeAngularVelocity2>
			Nav_vTargetAngleCalculationRoutine();
 8001dcc:	f001 fa28 	bl	8003220 <Nav_vTargetAngleCalculationRoutine>
 8001dd0:	e007      	b.n	8001de2 <Nav_vTestPathIndependantTrajectoryStateMachine+0x852>
		}
		else if ( Nav_TrajectoryMode_en == Nav_ReverseAngularTrajectory_en )
 8001dd2:	4b34      	ldr	r3, [pc, #208]	; (8001ea4 <Nav_vTestPathIndependantTrajectoryStateMachine+0x914>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	d103      	bne.n	8001de2 <Nav_vTestPathIndependantTrajectoryStateMachine+0x852>
		{
			Nav_TrapezeReverseAngularVelocity2();
 8001dda:	f001 f811 	bl	8002e00 <Nav_TrapezeReverseAngularVelocity2>
			Nav_vTargetAngleCalculationRoutine();
 8001dde:	f001 fa1f 	bl	8003220 <Nav_vTargetAngleCalculationRoutine>
		}
		if( ( Nav_CurrentSample_u32 > Nav_AccelerationSamples_u32 )
 8001de2:	4b2f      	ldr	r3, [pc, #188]	; (8001ea0 <Nav_vTestPathIndependantTrajectoryStateMachine+0x910>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	4b30      	ldr	r3, [pc, #192]	; (8001ea8 <Nav_vTestPathIndependantTrajectoryStateMachine+0x918>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d94f      	bls.n	8001e8e <Nav_vTestPathIndependantTrajectoryStateMachine+0x8fe>
				&& ( Nav_TargetLinearVelocity_d == 0 )
 8001dee:	4b2f      	ldr	r3, [pc, #188]	; (8001eac <Nav_vTestPathIndependantTrajectoryStateMachine+0x91c>)
 8001df0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	f04f 0300 	mov.w	r3, #0
 8001dfc:	f7fe fe08 	bl	8000a10 <__aeabi_dcmpeq>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d100      	bne.n	8001e08 <Nav_vTestPathIndependantTrajectoryStateMachine+0x878>
		{
			Nav_Counter_u32 = 0 ;
			Nav_TrajectoryState_en = Nav_Trajectory_WaitAfterArriving_en;
		}

	}break;
 8001e06:	e042      	b.n	8001e8e <Nav_vTestPathIndependantTrajectoryStateMachine+0x8fe>
				&& ( Nav_TargetAngularVelocity_d == 0 )
 8001e08:	4b29      	ldr	r3, [pc, #164]	; (8001eb0 <Nav_vTestPathIndependantTrajectoryStateMachine+0x920>)
 8001e0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	f7fe fdfb 	bl	8000a10 <__aeabi_dcmpeq>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d100      	bne.n	8001e22 <Nav_vTestPathIndependantTrajectoryStateMachine+0x892>
	}break;
 8001e20:	e035      	b.n	8001e8e <Nav_vTestPathIndependantTrajectoryStateMachine+0x8fe>
				&& ( Nav_MeasuredVelocity_mm_d == 0 )
 8001e22:	4b24      	ldr	r3, [pc, #144]	; (8001eb4 <Nav_vTestPathIndependantTrajectoryStateMachine+0x924>)
 8001e24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	f04f 0300 	mov.w	r3, #0
 8001e30:	f7fe fdee 	bl	8000a10 <__aeabi_dcmpeq>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d100      	bne.n	8001e3c <Nav_vTestPathIndependantTrajectoryStateMachine+0x8ac>
	}break;
 8001e3a:	e028      	b.n	8001e8e <Nav_vTestPathIndependantTrajectoryStateMachine+0x8fe>
				&& ( Nav_MeasuredAngularVelocity_deg_d == 0 ))
 8001e3c:	4b1e      	ldr	r3, [pc, #120]	; (8001eb8 <Nav_vTestPathIndependantTrajectoryStateMachine+0x928>)
 8001e3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	f04f 0300 	mov.w	r3, #0
 8001e4a:	f7fe fde1 	bl	8000a10 <__aeabi_dcmpeq>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d100      	bne.n	8001e56 <Nav_vTestPathIndependantTrajectoryStateMachine+0x8c6>
	}break;
 8001e54:	e01b      	b.n	8001e8e <Nav_vTestPathIndependantTrajectoryStateMachine+0x8fe>
			Nav_Counter_u32 = 0 ;
 8001e56:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <Nav_vTestPathIndependantTrajectoryStateMachine+0x92c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
			Nav_TrajectoryState_en = Nav_Trajectory_WaitAfterArriving_en;
 8001e5c:	4b18      	ldr	r3, [pc, #96]	; (8001ec0 <Nav_vTestPathIndependantTrajectoryStateMachine+0x930>)
 8001e5e:	2207      	movs	r2, #7
 8001e60:	701a      	strb	r2, [r3, #0]
	}break;
 8001e62:	e014      	b.n	8001e8e <Nav_vTestPathIndependantTrajectoryStateMachine+0x8fe>

	case Nav_Trajectory_WaitAfterArriving_en :
	{
		Nav_Counter_u32++;
 8001e64:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <Nav_vTestPathIndependantTrajectoryStateMachine+0x92c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	4a14      	ldr	r2, [pc, #80]	; (8001ebc <Nav_vTestPathIndependantTrajectoryStateMachine+0x92c>)
 8001e6c:	6013      	str	r3, [r2, #0]
		if (Nav_Counter_u32 > 2)
 8001e6e:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <Nav_vTestPathIndependantTrajectoryStateMachine+0x92c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d90d      	bls.n	8001e92 <Nav_vTestPathIndependantTrajectoryStateMachine+0x902>
		{
			Nav_TrajectoryState_en = Nav_Trajectory_Finish_en;
 8001e76:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <Nav_vTestPathIndependantTrajectoryStateMachine+0x930>)
 8001e78:	2208      	movs	r2, #8
 8001e7a:	701a      	strb	r2, [r3, #0]

		}
	}break;
 8001e7c:	e009      	b.n	8001e92 <Nav_vTestPathIndependantTrajectoryStateMachine+0x902>
	}break;
 8001e7e:	bf00      	nop
 8001e80:	e008      	b.n	8001e94 <Nav_vTestPathIndependantTrajectoryStateMachine+0x904>
	}break;
 8001e82:	bf00      	nop
 8001e84:	e006      	b.n	8001e94 <Nav_vTestPathIndependantTrajectoryStateMachine+0x904>
	}break;
 8001e86:	bf00      	nop
 8001e88:	e004      	b.n	8001e94 <Nav_vTestPathIndependantTrajectoryStateMachine+0x904>
	}break;
 8001e8a:	bf00      	nop
 8001e8c:	e002      	b.n	8001e94 <Nav_vTestPathIndependantTrajectoryStateMachine+0x904>
	}break;
 8001e8e:	bf00      	nop
 8001e90:	e000      	b.n	8001e94 <Nav_vTestPathIndependantTrajectoryStateMachine+0x904>
	}break;
 8001e92:	bf00      	nop
	{

	}break;
	}

}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000480 	.word	0x20000480
 8001ea4:	2000002f 	.word	0x2000002f
 8001ea8:	20000484 	.word	0x20000484
 8001eac:	200003e8 	.word	0x200003e8
 8001eb0:	200003f0 	.word	0x200003f0
 8001eb4:	20000400 	.word	0x20000400
 8001eb8:	20000410 	.word	0x20000410
 8001ebc:	20000488 	.word	0x20000488
 8001ec0:	2000002e 	.word	0x2000002e
 8001ec4:	00000000 	.word	0x00000000

08001ec8 <Nav_vTestPathStateMachine>:




void Nav_vTestPathStateMachine()
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
	switch( Nav_TestPathState_en )
 8001ecc:	4b6c      	ldr	r3, [pc, #432]	; (8002080 <Nav_vTestPathStateMachine+0x1b8>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b05      	cmp	r3, #5
 8001ed2:	f200 80b9 	bhi.w	8002048 <Nav_vTestPathStateMachine+0x180>
 8001ed6:	a201      	add	r2, pc, #4	; (adr r2, 8001edc <Nav_vTestPathStateMachine+0x14>)
 8001ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001edc:	08001ef5 	.word	0x08001ef5
 8001ee0:	08001efd 	.word	0x08001efd
 8001ee4:	08001f47 	.word	0x08001f47
 8001ee8:	08001f9d 	.word	0x08001f9d
 8001eec:	08001ff3 	.word	0x08001ff3
 8001ef0:	08002049 	.word	0x08002049
	{

	case Nav_Test_Idle_en :
	{
		Nav_TestPathState_en = Nav_Test_Forward_1000mm_en;
 8001ef4:	4b62      	ldr	r3, [pc, #392]	; (8002080 <Nav_vTestPathStateMachine+0x1b8>)
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	701a      	strb	r2, [r3, #0]
	}break;
 8001efa:	e0a5      	b.n	8002048 <Nav_vTestPathStateMachine+0x180>


	case Nav_Test_WallAlign_en :
	{
		if ( Nav_WallAlignState_en == Nav_WallAlign_Idle_en )
 8001efc:	4b61      	ldr	r3, [pc, #388]	; (8002084 <Nav_vTestPathStateMachine+0x1bc>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d115      	bne.n	8001f30 <Nav_vTestPathStateMachine+0x68>
		{
			Nav_MaxVelocity_d = -120 ; //400 ; //300 ;
 8001f04:	4960      	ldr	r1, [pc, #384]	; (8002088 <Nav_vTestPathStateMachine+0x1c0>)
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	4b60      	ldr	r3, [pc, #384]	; (800208c <Nav_vTestPathStateMachine+0x1c4>)
 8001f0c:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_Acc_d = -350 ;
 8001f10:	495f      	ldr	r1, [pc, #380]	; (8002090 <Nav_vTestPathStateMachine+0x1c8>)
 8001f12:	a34f      	add	r3, pc, #316	; (adr r3, 8002050 <Nav_vTestPathStateMachine+0x188>)
 8001f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f18:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TargetDistance_mm_d = -1000 ;
 8001f1c:	495d      	ldr	r1, [pc, #372]	; (8002094 <Nav_vTestPathStateMachine+0x1cc>)
 8001f1e:	a34e      	add	r3, pc, #312	; (adr r3, 8002058 <Nav_vTestPathStateMachine+0x190>)
 8001f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f24:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_WallAlignState_en = Nav_WallAlign_ResetVariables_en;
 8001f28:	4b56      	ldr	r3, [pc, #344]	; (8002084 <Nav_vTestPathStateMachine+0x1bc>)
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	701a      	strb	r2, [r3, #0]
//			MOTOR_PWM->LEFT_REVERSE=0;
//			}
//			Nav_PrevLeftTicks=Nav_LeftTicks_i32;
		}

	}break;
 8001f2e:	e08b      	b.n	8002048 <Nav_vTestPathStateMachine+0x180>
		else if ( Nav_WallAlignState_en == Nav_WallAlign_Finish_en )
 8001f30:	4b54      	ldr	r3, [pc, #336]	; (8002084 <Nav_vTestPathStateMachine+0x1bc>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b05      	cmp	r3, #5
 8001f36:	d103      	bne.n	8001f40 <Nav_vTestPathStateMachine+0x78>
			Nav_WallAlignState_en = Nav_WallAlign_Idle_en ;
 8001f38:	4b52      	ldr	r3, [pc, #328]	; (8002084 <Nav_vTestPathStateMachine+0x1bc>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
	}break;
 8001f3e:	e083      	b.n	8002048 <Nav_vTestPathStateMachine+0x180>
			Nav_vWallAlign();
 8001f40:	f001 f98e 	bl	8003260 <Nav_vWallAlign>
	}break;
 8001f44:	e080      	b.n	8002048 <Nav_vTestPathStateMachine+0x180>

	case Nav_Test_Forward_1000mm_en :
	{
		if ( Nav_TrajectoryState_en == Nav_Trajectory_Idle_en )
 8001f46:	4b54      	ldr	r3, [pc, #336]	; (8002098 <Nav_vTestPathStateMachine+0x1d0>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d118      	bne.n	8001f80 <Nav_vTestPathStateMachine+0xb8>
		{
			Nav_TrajectoryMode_en = Nav_ForwardLinearTrajectory_en;
 8001f4e:	4b53      	ldr	r3, [pc, #332]	; (800209c <Nav_vTestPathStateMachine+0x1d4>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	701a      	strb	r2, [r3, #0]
			Nav_MaxVelocity_d = 500 ; //400 ; //300 ;
 8001f54:	494c      	ldr	r1, [pc, #304]	; (8002088 <Nav_vTestPathStateMachine+0x1c0>)
 8001f56:	f04f 0200 	mov.w	r2, #0
 8001f5a:	4b51      	ldr	r3, [pc, #324]	; (80020a0 <Nav_vTestPathStateMachine+0x1d8>)
 8001f5c:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_Acc_d = 550 ;
 8001f60:	494b      	ldr	r1, [pc, #300]	; (8002090 <Nav_vTestPathStateMachine+0x1c8>)
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	4b4f      	ldr	r3, [pc, #316]	; (80020a4 <Nav_vTestPathStateMachine+0x1dc>)
 8001f68:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TargetDistance_mm_d = 2100 ;
 8001f6c:	4949      	ldr	r1, [pc, #292]	; (8002094 <Nav_vTestPathStateMachine+0x1cc>)
 8001f6e:	a33c      	add	r3, pc, #240	; (adr r3, 8002060 <Nav_vTestPathStateMachine+0x198>)
 8001f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f74:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TrajectoryState_en = Nav_Trajectory_ResetVariables_en;
 8001f78:	4b47      	ldr	r3, [pc, #284]	; (8002098 <Nav_vTestPathStateMachine+0x1d0>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			Nav_vTestPathIndependantTrajectoryStateMachine();
		}
	}break;
 8001f7e:	e063      	b.n	8002048 <Nav_vTestPathStateMachine+0x180>
		else if ( Nav_TrajectoryState_en == Nav_Trajectory_Finish_en)
 8001f80:	4b45      	ldr	r3, [pc, #276]	; (8002098 <Nav_vTestPathStateMachine+0x1d0>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d106      	bne.n	8001f96 <Nav_vTestPathStateMachine+0xce>
			Nav_TestPathState_en = Nav_Test_Finished_en;
 8001f88:	4b3d      	ldr	r3, [pc, #244]	; (8002080 <Nav_vTestPathStateMachine+0x1b8>)
 8001f8a:	2205      	movs	r2, #5
 8001f8c:	701a      	strb	r2, [r3, #0]
			Nav_TrajectoryState_en = Nav_Trajectory_Idle_en;
 8001f8e:	4b42      	ldr	r3, [pc, #264]	; (8002098 <Nav_vTestPathStateMachine+0x1d0>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	701a      	strb	r2, [r3, #0]
	}break;
 8001f94:	e058      	b.n	8002048 <Nav_vTestPathStateMachine+0x180>
			Nav_vTestPathIndependantTrajectoryStateMachine();
 8001f96:	f7ff fafb 	bl	8001590 <Nav_vTestPathIndependantTrajectoryStateMachine>
	}break;
 8001f9a:	e055      	b.n	8002048 <Nav_vTestPathStateMachine+0x180>

	case Nav_Test_Rotate_360deg_en :
	{
		if ( Nav_TrajectoryState_en == Nav_Trajectory_Idle_en )
 8001f9c:	4b3e      	ldr	r3, [pc, #248]	; (8002098 <Nav_vTestPathStateMachine+0x1d0>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d118      	bne.n	8001fd6 <Nav_vTestPathStateMachine+0x10e>
		{
			Nav_TrajectoryMode_en = Nav_ForwardAngularTrajectory_en; //Nav_ReverseAngularTrajectory_en
 8001fa4:	4b3d      	ldr	r3, [pc, #244]	; (800209c <Nav_vTestPathStateMachine+0x1d4>)
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	701a      	strb	r2, [r3, #0]
			Nav_MaxAngularVelocity_d = 150 ; // 150 70 ;
 8001faa:	493f      	ldr	r1, [pc, #252]	; (80020a8 <Nav_vTestPathStateMachine+0x1e0>)
 8001fac:	a32e      	add	r3, pc, #184	; (adr r3, 8002068 <Nav_vTestPathStateMachine+0x1a0>)
 8001fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb2:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_AngularAcc_d = 180 ; //230
 8001fb6:	493d      	ldr	r1, [pc, #244]	; (80020ac <Nav_vTestPathStateMachine+0x1e4>)
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	4b3c      	ldr	r3, [pc, #240]	; (80020b0 <Nav_vTestPathStateMachine+0x1e8>)
 8001fbe:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TargetAngle_deg_d = 360 ;
 8001fc2:	493c      	ldr	r1, [pc, #240]	; (80020b4 <Nav_vTestPathStateMachine+0x1ec>)
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	4b3b      	ldr	r3, [pc, #236]	; (80020b8 <Nav_vTestPathStateMachine+0x1f0>)
 8001fca:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TrajectoryState_en = Nav_Trajectory_ResetVariables_en;
 8001fce:	4b32      	ldr	r3, [pc, #200]	; (8002098 <Nav_vTestPathStateMachine+0x1d0>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			Nav_vTestPathIndependantTrajectoryStateMachine();
		}
	}break;
 8001fd4:	e038      	b.n	8002048 <Nav_vTestPathStateMachine+0x180>
		else if ( Nav_TrajectoryState_en == Nav_Trajectory_Finish_en)
 8001fd6:	4b30      	ldr	r3, [pc, #192]	; (8002098 <Nav_vTestPathStateMachine+0x1d0>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b08      	cmp	r3, #8
 8001fdc:	d106      	bne.n	8001fec <Nav_vTestPathStateMachine+0x124>
			Nav_TestPathState_en = Nav_Test_Finished_en;
 8001fde:	4b28      	ldr	r3, [pc, #160]	; (8002080 <Nav_vTestPathStateMachine+0x1b8>)
 8001fe0:	2205      	movs	r2, #5
 8001fe2:	701a      	strb	r2, [r3, #0]
			Nav_TrajectoryState_en = Nav_Trajectory_Idle_en;
 8001fe4:	4b2c      	ldr	r3, [pc, #176]	; (8002098 <Nav_vTestPathStateMachine+0x1d0>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
	}break;
 8001fea:	e02d      	b.n	8002048 <Nav_vTestPathStateMachine+0x180>
			Nav_vTestPathIndependantTrajectoryStateMachine();
 8001fec:	f7ff fad0 	bl	8001590 <Nav_vTestPathIndependantTrajectoryStateMachine>
	}break;
 8001ff0:	e02a      	b.n	8002048 <Nav_vTestPathStateMachine+0x180>

	case Nav_Test_Reverse_1000mm_en :
	{
		if ( Nav_TrajectoryState_en == Nav_Trajectory_Idle_en )
 8001ff2:	4b29      	ldr	r3, [pc, #164]	; (8002098 <Nav_vTestPathStateMachine+0x1d0>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d118      	bne.n	800202c <Nav_vTestPathStateMachine+0x164>
		{
			Nav_TrajectoryMode_en = Nav_ReverseLinearTrajectory_en;
 8001ffa:	4b28      	ldr	r3, [pc, #160]	; (800209c <Nav_vTestPathStateMachine+0x1d4>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	701a      	strb	r2, [r3, #0]
			Nav_MaxVelocity_d = -500 ; //-400 ; //-300 ;
 8002000:	4921      	ldr	r1, [pc, #132]	; (8002088 <Nav_vTestPathStateMachine+0x1c0>)
 8002002:	a31b      	add	r3, pc, #108	; (adr r3, 8002070 <Nav_vTestPathStateMachine+0x1a8>)
 8002004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002008:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_Acc_d = -400 ;
 800200c:	4920      	ldr	r1, [pc, #128]	; (8002090 <Nav_vTestPathStateMachine+0x1c8>)
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	4b2a      	ldr	r3, [pc, #168]	; (80020bc <Nav_vTestPathStateMachine+0x1f4>)
 8002014:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TargetDistance_mm_d = -2100 ;
 8002018:	491e      	ldr	r1, [pc, #120]	; (8002094 <Nav_vTestPathStateMachine+0x1cc>)
 800201a:	a317      	add	r3, pc, #92	; (adr r3, 8002078 <Nav_vTestPathStateMachine+0x1b0>)
 800201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002020:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TrajectoryState_en = Nav_Trajectory_ResetVariables_en;
 8002024:	4b1c      	ldr	r3, [pc, #112]	; (8002098 <Nav_vTestPathStateMachine+0x1d0>)
 8002026:	2201      	movs	r2, #1
 8002028:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			Nav_vTestPathIndependantTrajectoryStateMachine();
		}
	}break;
 800202a:	e00c      	b.n	8002046 <Nav_vTestPathStateMachine+0x17e>
		else if ( Nav_TrajectoryState_en == Nav_Trajectory_Finish_en)
 800202c:	4b1a      	ldr	r3, [pc, #104]	; (8002098 <Nav_vTestPathStateMachine+0x1d0>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b08      	cmp	r3, #8
 8002032:	d106      	bne.n	8002042 <Nav_vTestPathStateMachine+0x17a>
			Nav_TestPathState_en = Nav_Test_Finished_en;
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <Nav_vTestPathStateMachine+0x1b8>)
 8002036:	2205      	movs	r2, #5
 8002038:	701a      	strb	r2, [r3, #0]
			Nav_TrajectoryState_en = Nav_Trajectory_Idle_en;
 800203a:	4b17      	ldr	r3, [pc, #92]	; (8002098 <Nav_vTestPathStateMachine+0x1d0>)
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
	}break;
 8002040:	e001      	b.n	8002046 <Nav_vTestPathStateMachine+0x17e>
			Nav_vTestPathIndependantTrajectoryStateMachine();
 8002042:	f7ff faa5 	bl	8001590 <Nav_vTestPathIndependantTrajectoryStateMachine>
	}break;
 8002046:	bf00      	nop
	{
		//Nav_TestPathState_en = Nav_Test_Idle_en;
	}break;
	}

	Nav_vNavigationRoutine();
 8002048:	f7fe feba 	bl	8000dc0 <Nav_vNavigationRoutine>
}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}
 8002050:	00000000 	.word	0x00000000
 8002054:	c075e000 	.word	0xc075e000
 8002058:	00000000 	.word	0x00000000
 800205c:	c08f4000 	.word	0xc08f4000
 8002060:	00000000 	.word	0x00000000
 8002064:	40a06800 	.word	0x40a06800
 8002068:	00000000 	.word	0x00000000
 800206c:	4062c000 	.word	0x4062c000
 8002070:	00000000 	.word	0x00000000
 8002074:	c07f4000 	.word	0xc07f4000
 8002078:	00000000 	.word	0x00000000
 800207c:	c0a06800 	.word	0xc0a06800
 8002080:	2000002c 	.word	0x2000002c
 8002084:	2000002d 	.word	0x2000002d
 8002088:	20000468 	.word	0x20000468
 800208c:	c05e0000 	.word	0xc05e0000
 8002090:	20000460 	.word	0x20000460
 8002094:	200003b0 	.word	0x200003b0
 8002098:	2000002e 	.word	0x2000002e
 800209c:	2000002f 	.word	0x2000002f
 80020a0:	407f4000 	.word	0x407f4000
 80020a4:	40813000 	.word	0x40813000
 80020a8:	20000478 	.word	0x20000478
 80020ac:	20000470 	.word	0x20000470
 80020b0:	40668000 	.word	0x40668000
 80020b4:	200003d0 	.word	0x200003d0
 80020b8:	40768000 	.word	0x40768000
 80020bc:	c0790000 	.word	0xc0790000

080020c0 <Nav_vNavigatorInit>:

/* Private user code ---------------------------------------------------------*/


void Nav_vNavigatorInit()
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
	Nav_ConvertRight_Ticks2mm_d =( M_PI * WHEEL_DIAMETER_MM ) / ENCODER_RESOLUTION  ;
 80020c4:	4956      	ldr	r1, [pc, #344]	; (8002220 <Nav_vNavigatorInit+0x160>)
 80020c6:	a350      	add	r3, pc, #320	; (adr r3, 8002208 <Nav_vNavigatorInit+0x148>)
 80020c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020cc:	e9c1 2300 	strd	r2, r3, [r1]
	Nav_ConvertLeft_Ticks2mm_d  = (  M_PI * WHEEL_DIAMETER_MM * LEFT_WHEEL_GAIN ) / ENCODER_RESOLUTION  ;
 80020d0:	4954      	ldr	r1, [pc, #336]	; (8002224 <Nav_vNavigatorInit+0x164>)
 80020d2:	a34f      	add	r3, pc, #316	; (adr r3, 8002210 <Nav_vNavigatorInit+0x150>)
 80020d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d8:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_CurrentX_mm_d = 0.0 ;
 80020dc:	4952      	ldr	r1, [pc, #328]	; (8002228 <Nav_vNavigatorInit+0x168>)
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_CurrentY_mm_d =0;
 80020ea:	4950      	ldr	r1, [pc, #320]	; (800222c <Nav_vNavigatorInit+0x16c>)
 80020ec:	f04f 0200 	mov.w	r2, #0
 80020f0:	f04f 0300 	mov.w	r3, #0
 80020f4:	e9c1 2300 	strd	r2, r3, [r1]
	Nav_CurrentAngle_rad_d	= 0 ;
 80020f8:	494d      	ldr	r1, [pc, #308]	; (8002230 <Nav_vNavigatorInit+0x170>)
 80020fa:	f04f 0200 	mov.w	r2, #0
 80020fe:	f04f 0300 	mov.w	r3, #0
 8002102:	e9c1 2300 	strd	r2, r3, [r1]
	Nav_CurrentAngle_deg_d = 0 ;
 8002106:	494b      	ldr	r1, [pc, #300]	; (8002234 <Nav_vNavigatorInit+0x174>)
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	f04f 0300 	mov.w	r3, #0
 8002110:	e9c1 2300 	strd	r2, r3, [r1]
	Nav_CurrentTargetAngle_deg_d =0 ;
 8002114:	4948      	ldr	r1, [pc, #288]	; (8002238 <Nav_vNavigatorInit+0x178>)
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	f04f 0300 	mov.w	r3, #0
 800211e:	e9c1 2300 	strd	r2, r3, [r1]
	Nav_PrevTargetAngle_deg_d =0 ;
 8002122:	4946      	ldr	r1, [pc, #280]	; (800223c <Nav_vNavigatorInit+0x17c>)
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	f04f 0300 	mov.w	r3, #0
 800212c:	e9c1 2300 	strd	r2, r3, [r1]



	Nav_NumberOfTargets_u8 =4 ; // DYNAMICCCCC
 8002130:	4b43      	ldr	r3, [pc, #268]	; (8002240 <Nav_vNavigatorInit+0x180>)
 8002132:	2204      	movs	r2, #4
 8002134:	701a      	strb	r2, [r3, #0]
//	Nav_XYTargets_ad[2][0] = 0 ; 	Nav_XYTargets_ad[2][1] = 700 ;	Nav_XYTargets_ad[2][2] = 1000.0 ;   Nav_XYTargets_ad[2][3] = ROBOT_Going_Forward ;
//Nav_XYTargets_ad[3][0] = 0.0 	;   Nav_XYTargets_ad[3][1] = 0 	;	Nav_XYTargets_ad[3][2] = 0 ;   Nav_XYTargets_ad[3][3]  = ROBOT_Going_Forward;



	Nav_XYTargets_ad[0][0] = 1300 	; 	Nav_XYTargets_ad[0][1] = 0 	; 	Nav_XYTargets_ad[0][2] = 1000.0 ;   Nav_XYTargets_ad[0][3] = ROBOT_Going_Forward ;
 8002136:	4943      	ldr	r1, [pc, #268]	; (8002244 <Nav_vNavigatorInit+0x184>)
 8002138:	a337      	add	r3, pc, #220	; (adr r3, 8002218 <Nav_vNavigatorInit+0x158>)
 800213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213e:	e9c1 2300 	strd	r2, r3, [r1]
 8002142:	4940      	ldr	r1, [pc, #256]	; (8002244 <Nav_vNavigatorInit+0x184>)
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	f04f 0300 	mov.w	r3, #0
 800214c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002150:	493c      	ldr	r1, [pc, #240]	; (8002244 <Nav_vNavigatorInit+0x184>)
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	4b3c      	ldr	r3, [pc, #240]	; (8002248 <Nav_vNavigatorInit+0x188>)
 8002158:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800215c:	4939      	ldr	r1, [pc, #228]	; (8002244 <Nav_vNavigatorInit+0x184>)
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	4b3a      	ldr	r3, [pc, #232]	; (800224c <Nav_vNavigatorInit+0x18c>)
 8002164:	e9c1 2306 	strd	r2, r3, [r1, #24]

	Nav_XYTargets_ad[1][0] = 1300	; 	Nav_XYTargets_ad[1][1] = 1600; 	;	Nav_XYTargets_ad[1][2] = 1000.0 ;   Nav_XYTargets_ad[1][3] = ROBOT_Going_Forward ;
 8002168:	4936      	ldr	r1, [pc, #216]	; (8002244 <Nav_vNavigatorInit+0x184>)
 800216a:	a32b      	add	r3, pc, #172	; (adr r3, 8002218 <Nav_vNavigatorInit+0x158>)
 800216c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002170:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8002174:	4933      	ldr	r1, [pc, #204]	; (8002244 <Nav_vNavigatorInit+0x184>)
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	4b35      	ldr	r3, [pc, #212]	; (8002250 <Nav_vNavigatorInit+0x190>)
 800217c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8002180:	4930      	ldr	r1, [pc, #192]	; (8002244 <Nav_vNavigatorInit+0x184>)
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	4b30      	ldr	r3, [pc, #192]	; (8002248 <Nav_vNavigatorInit+0x188>)
 8002188:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 800218c:	492d      	ldr	r1, [pc, #180]	; (8002244 <Nav_vNavigatorInit+0x184>)
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	4b2e      	ldr	r3, [pc, #184]	; (800224c <Nav_vNavigatorInit+0x18c>)
 8002194:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

		Nav_XYTargets_ad[2][0] = 0 ; 	Nav_XYTargets_ad[2][1] = 1600.0 ;	Nav_XYTargets_ad[2][2] = 1000.0 ;   Nav_XYTargets_ad[2][3] = ROBOT_Going_Forward ;
 8002198:	492a      	ldr	r1, [pc, #168]	; (8002244 <Nav_vNavigatorInit+0x184>)
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	f04f 0300 	mov.w	r3, #0
 80021a2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 80021a6:	4927      	ldr	r1, [pc, #156]	; (8002244 <Nav_vNavigatorInit+0x184>)
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	4b28      	ldr	r3, [pc, #160]	; (8002250 <Nav_vNavigatorInit+0x190>)
 80021ae:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 80021b2:	4924      	ldr	r1, [pc, #144]	; (8002244 <Nav_vNavigatorInit+0x184>)
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	4b23      	ldr	r3, [pc, #140]	; (8002248 <Nav_vNavigatorInit+0x188>)
 80021ba:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80021be:	4921      	ldr	r1, [pc, #132]	; (8002244 <Nav_vNavigatorInit+0x184>)
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	4b21      	ldr	r3, [pc, #132]	; (800224c <Nav_vNavigatorInit+0x18c>)
 80021c6:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

		Nav_XYTargets_ad[3][0] = 0.0 	;   Nav_XYTargets_ad[3][1] = 0.0 	;	Nav_XYTargets_ad[3][2] = 1000 ;   Nav_XYTargets_ad[3][3]  = ROBOT_Going_Backward ;
 80021ca:	491e      	ldr	r1, [pc, #120]	; (8002244 <Nav_vNavigatorInit+0x184>)
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	f04f 0300 	mov.w	r3, #0
 80021d4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 80021d8:	491a      	ldr	r1, [pc, #104]	; (8002244 <Nav_vNavigatorInit+0x184>)
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	f04f 0300 	mov.w	r3, #0
 80021e2:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 80021e6:	4917      	ldr	r1, [pc, #92]	; (8002244 <Nav_vNavigatorInit+0x184>)
 80021e8:	f04f 0200 	mov.w	r2, #0
 80021ec:	4b16      	ldr	r3, [pc, #88]	; (8002248 <Nav_vNavigatorInit+0x188>)
 80021ee:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 80021f2:	4914      	ldr	r1, [pc, #80]	; (8002244 <Nav_vNavigatorInit+0x184>)
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	4b16      	ldr	r3, [pc, #88]	; (8002254 <Nav_vNavigatorInit+0x194>)
 80021fa:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
//
//		// pushing  (1964;2463.9)
//		Nav_XYTargets_ad[13][0] =1954.0 	;   Nav_XYTargets_ad[13][1] = 2464.0	;	Nav_XYTargets_ad[13][2] = 1000 ;   Nav_XYTargets_ad[13][3]  = ROBOT_Going_Forward ;
//		// the end (-200;2604)
//		Nav_XYTargets_ad[14][0] =20.0 	;   Nav_XYTargets_ad[14][1] = 2604.0	;	Nav_XYTargets_ad[14][2] = 1000 ;   Nav_XYTargets_ad[14][3]  = ROBOT_Going_Forward ;
}
 80021fe:	bf00      	nop
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	03d55507 	.word	0x03d55507
 800220c:	3fb8067c 	.word	0x3fb8067c
 8002210:	77a5eaab 	.word	0x77a5eaab
 8002214:	3fb80719 	.word	0x3fb80719
 8002218:	00000000 	.word	0x00000000
 800221c:	40945000 	.word	0x40945000
 8002220:	20000318 	.word	0x20000318
 8002224:	20000310 	.word	0x20000310
 8002228:	200003a0 	.word	0x200003a0
 800222c:	200003a8 	.word	0x200003a8
 8002230:	20000370 	.word	0x20000370
 8002234:	20000388 	.word	0x20000388
 8002238:	200003d8 	.word	0x200003d8
 800223c:	200003e0 	.word	0x200003e0
 8002240:	200002d0 	.word	0x200002d0
 8002244:	20000030 	.word	0x20000030
 8002248:	408f4000 	.word	0x408f4000
 800224c:	40080000 	.word	0x40080000
 8002250:	40990000 	.word	0x40990000
 8002254:	40100000 	.word	0x40100000

08002258 <Nav_TrapezeLinearVelocity2>:




void Nav_TrapezeLinearVelocity2()
{
 8002258:	b5b0      	push	{r4, r5, r7, lr}
 800225a:	af00      	add	r7, sp, #0
	switch( Nav_TrapezePhase_en )
 800225c:	4b9c      	ldr	r3, [pc, #624]	; (80024d0 <Nav_TrapezeLinearVelocity2+0x278>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b06      	cmp	r3, #6
 8002262:	f200 81d4 	bhi.w	800260e <Nav_TrapezeLinearVelocity2+0x3b6>
 8002266:	a201      	add	r2, pc, #4	; (adr r2, 800226c <Nav_TrapezeLinearVelocity2+0x14>)
 8002268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800226c:	0800260d 	.word	0x0800260d
 8002270:	08002289 	.word	0x08002289
 8002274:	080023d5 	.word	0x080023d5
 8002278:	08002467 	.word	0x08002467
 800227c:	08002573 	.word	0x08002573
 8002280:	08002591 	.word	0x08002591
 8002284:	080025f7 	.word	0x080025f7
	{

	}break;
	case Nav_Trapeze_Accelerating_en:
	{
		Nav_ReferenceDistance_d = (Nav_TargetLinearVelocity_d * Nav_TargetLinearVelocity_d) / ( 2 * Nav_Acc_d ) ;
 8002288:	4b92      	ldr	r3, [pc, #584]	; (80024d4 <Nav_TrapezeLinearVelocity2+0x27c>)
 800228a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800228e:	4b91      	ldr	r3, [pc, #580]	; (80024d4 <Nav_TrapezeLinearVelocity2+0x27c>)
 8002290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002294:	f7fe f954 	bl	8000540 <__aeabi_dmul>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	4614      	mov	r4, r2
 800229e:	461d      	mov	r5, r3
 80022a0:	4b8d      	ldr	r3, [pc, #564]	; (80024d8 <Nav_TrapezeLinearVelocity2+0x280>)
 80022a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	f7fd ff93 	bl	80001d4 <__adddf3>
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	4620      	mov	r0, r4
 80022b4:	4629      	mov	r1, r5
 80022b6:	f7fe fa6d 	bl	8000794 <__aeabi_ddiv>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	4987      	ldr	r1, [pc, #540]	; (80024dc <Nav_TrapezeLinearVelocity2+0x284>)
 80022c0:	e9c1 2300 	strd	r2, r3, [r1]

		if( Nav_RemainingDistance_mm_d < 2.0 ) // calibring seuil
 80022c4:	4b86      	ldr	r3, [pc, #536]	; (80024e0 <Nav_TrapezeLinearVelocity2+0x288>)
 80022c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022d2:	f7fe fba7 	bl	8000a24 <__aeabi_dcmplt>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d038      	beq.n	800234e <Nav_TrapezeLinearVelocity2+0xf6>
		{
			if( Nav_RemainingDistance_mm_d > Nav_ReferenceDistance_d )
 80022dc:	4b80      	ldr	r3, [pc, #512]	; (80024e0 <Nav_TrapezeLinearVelocity2+0x288>)
 80022de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022e2:	4b7e      	ldr	r3, [pc, #504]	; (80024dc <Nav_TrapezeLinearVelocity2+0x284>)
 80022e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e8:	f7fe fbba 	bl	8000a60 <__aeabi_dcmpgt>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d01e      	beq.n	8002330 <Nav_TrapezeLinearVelocity2+0xd8>
			{
				if ( Nav_TargetLinearVelocity_d < Nav_MaxVelocity_d )
 80022f2:	4b78      	ldr	r3, [pc, #480]	; (80024d4 <Nav_TrapezeLinearVelocity2+0x27c>)
 80022f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022f8:	4b7a      	ldr	r3, [pc, #488]	; (80024e4 <Nav_TrapezeLinearVelocity2+0x28c>)
 80022fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fe:	f7fe fb91 	bl	8000a24 <__aeabi_dcmplt>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00f      	beq.n	8002328 <Nav_TrapezeLinearVelocity2+0xd0>
				{
					Nav_TargetLinearVelocity_d = Nav_Acc_d * Nav_CurrentSample_u32 ;
 8002308:	4b77      	ldr	r3, [pc, #476]	; (80024e8 <Nav_TrapezeLinearVelocity2+0x290>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f7fe f89d 	bl	800044c <__aeabi_ui2d>
 8002312:	4b71      	ldr	r3, [pc, #452]	; (80024d8 <Nav_TrapezeLinearVelocity2+0x280>)
 8002314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002318:	f7fe f912 	bl	8000540 <__aeabi_dmul>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	496c      	ldr	r1, [pc, #432]	; (80024d4 <Nav_TrapezeLinearVelocity2+0x27c>)
 8002322:	e9c1 2300 	strd	r2, r3, [r1]
		}




	}break;
 8002326:	e172      	b.n	800260e <Nav_TrapezeLinearVelocity2+0x3b6>
					Nav_TrapezePhase_en = Nav_Trapeze_ConstantVelocity_en;
 8002328:	4b69      	ldr	r3, [pc, #420]	; (80024d0 <Nav_TrapezeLinearVelocity2+0x278>)
 800232a:	2202      	movs	r2, #2
 800232c:	701a      	strb	r2, [r3, #0]
	}break;
 800232e:	e16e      	b.n	800260e <Nav_TrapezeLinearVelocity2+0x3b6>
				Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 8002330:	4b6d      	ldr	r3, [pc, #436]	; (80024e8 <Nav_TrapezeLinearVelocity2+0x290>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	3b01      	subs	r3, #1
 8002336:	4a6d      	ldr	r2, [pc, #436]	; (80024ec <Nav_TrapezeLinearVelocity2+0x294>)
 8002338:	6013      	str	r3, [r2, #0]
				Nav_ReferenceLinearVelocity_d = Nav_TargetLinearVelocity_d;
 800233a:	4b66      	ldr	r3, [pc, #408]	; (80024d4 <Nav_TrapezeLinearVelocity2+0x27c>)
 800233c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002340:	496b      	ldr	r1, [pc, #428]	; (80024f0 <Nav_TrapezeLinearVelocity2+0x298>)
 8002342:	e9c1 2300 	strd	r2, r3, [r1]
				Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
 8002346:	4b62      	ldr	r3, [pc, #392]	; (80024d0 <Nav_TrapezeLinearVelocity2+0x278>)
 8002348:	2203      	movs	r2, #3
 800234a:	701a      	strb	r2, [r3, #0]
	}break;
 800234c:	e15f      	b.n	800260e <Nav_TrapezeLinearVelocity2+0x3b6>
			if( Nav_RemainingDistance_mm_d > ( Nav_ReferenceDistance_d + 2.0 ) )
 800234e:	4b63      	ldr	r3, [pc, #396]	; (80024dc <Nav_TrapezeLinearVelocity2+0x284>)
 8002350:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800235c:	f7fd ff3a 	bl	80001d4 <__adddf3>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4610      	mov	r0, r2
 8002366:	4619      	mov	r1, r3
 8002368:	4b5d      	ldr	r3, [pc, #372]	; (80024e0 <Nav_TrapezeLinearVelocity2+0x288>)
 800236a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236e:	f7fe fb59 	bl	8000a24 <__aeabi_dcmplt>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d01e      	beq.n	80023b6 <Nav_TrapezeLinearVelocity2+0x15e>
				if ( Nav_TargetLinearVelocity_d < Nav_MaxVelocity_d )
 8002378:	4b56      	ldr	r3, [pc, #344]	; (80024d4 <Nav_TrapezeLinearVelocity2+0x27c>)
 800237a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800237e:	4b59      	ldr	r3, [pc, #356]	; (80024e4 <Nav_TrapezeLinearVelocity2+0x28c>)
 8002380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002384:	f7fe fb4e 	bl	8000a24 <__aeabi_dcmplt>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00f      	beq.n	80023ae <Nav_TrapezeLinearVelocity2+0x156>
					Nav_TargetLinearVelocity_d = Nav_Acc_d * Nav_CurrentSample_u32 ;
 800238e:	4b56      	ldr	r3, [pc, #344]	; (80024e8 <Nav_TrapezeLinearVelocity2+0x290>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe f85a 	bl	800044c <__aeabi_ui2d>
 8002398:	4b4f      	ldr	r3, [pc, #316]	; (80024d8 <Nav_TrapezeLinearVelocity2+0x280>)
 800239a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239e:	f7fe f8cf 	bl	8000540 <__aeabi_dmul>
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	494b      	ldr	r1, [pc, #300]	; (80024d4 <Nav_TrapezeLinearVelocity2+0x27c>)
 80023a8:	e9c1 2300 	strd	r2, r3, [r1]
	}break;
 80023ac:	e12f      	b.n	800260e <Nav_TrapezeLinearVelocity2+0x3b6>
					Nav_TrapezePhase_en = Nav_Trapeze_ConstantVelocity_en;
 80023ae:	4b48      	ldr	r3, [pc, #288]	; (80024d0 <Nav_TrapezeLinearVelocity2+0x278>)
 80023b0:	2202      	movs	r2, #2
 80023b2:	701a      	strb	r2, [r3, #0]
	}break;
 80023b4:	e12b      	b.n	800260e <Nav_TrapezeLinearVelocity2+0x3b6>
				Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 80023b6:	4b4c      	ldr	r3, [pc, #304]	; (80024e8 <Nav_TrapezeLinearVelocity2+0x290>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	4a4b      	ldr	r2, [pc, #300]	; (80024ec <Nav_TrapezeLinearVelocity2+0x294>)
 80023be:	6013      	str	r3, [r2, #0]
				Nav_ReferenceLinearVelocity_d = Nav_TargetLinearVelocity_d;
 80023c0:	4b44      	ldr	r3, [pc, #272]	; (80024d4 <Nav_TrapezeLinearVelocity2+0x27c>)
 80023c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c6:	494a      	ldr	r1, [pc, #296]	; (80024f0 <Nav_TrapezeLinearVelocity2+0x298>)
 80023c8:	e9c1 2300 	strd	r2, r3, [r1]
				Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
 80023cc:	4b40      	ldr	r3, [pc, #256]	; (80024d0 <Nav_TrapezeLinearVelocity2+0x278>)
 80023ce:	2203      	movs	r2, #3
 80023d0:	701a      	strb	r2, [r3, #0]
	}break;
 80023d2:	e11c      	b.n	800260e <Nav_TrapezeLinearVelocity2+0x3b6>

	case Nav_Trapeze_ConstantVelocity_en:
	{
		Nav_ReferenceDistance_d = (Nav_TargetLinearVelocity_d * Nav_TargetLinearVelocity_d) / ( 2 * Nav_Acc_d ) ;
 80023d4:	4b3f      	ldr	r3, [pc, #252]	; (80024d4 <Nav_TrapezeLinearVelocity2+0x27c>)
 80023d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023da:	4b3e      	ldr	r3, [pc, #248]	; (80024d4 <Nav_TrapezeLinearVelocity2+0x27c>)
 80023dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e0:	f7fe f8ae 	bl	8000540 <__aeabi_dmul>
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	4614      	mov	r4, r2
 80023ea:	461d      	mov	r5, r3
 80023ec:	4b3a      	ldr	r3, [pc, #232]	; (80024d8 <Nav_TrapezeLinearVelocity2+0x280>)
 80023ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	f7fd feed 	bl	80001d4 <__adddf3>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	4620      	mov	r0, r4
 8002400:	4629      	mov	r1, r5
 8002402:	f7fe f9c7 	bl	8000794 <__aeabi_ddiv>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	4934      	ldr	r1, [pc, #208]	; (80024dc <Nav_TrapezeLinearVelocity2+0x284>)
 800240c:	e9c1 2300 	strd	r2, r3, [r1]
		if( Nav_RemainingDistance_mm_d > ( Nav_ReferenceDistance_d + 2.0 ) )
 8002410:	4b32      	ldr	r3, [pc, #200]	; (80024dc <Nav_TrapezeLinearVelocity2+0x284>)
 8002412:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800241e:	f7fd fed9 	bl	80001d4 <__adddf3>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4610      	mov	r0, r2
 8002428:	4619      	mov	r1, r3
 800242a:	4b2d      	ldr	r3, [pc, #180]	; (80024e0 <Nav_TrapezeLinearVelocity2+0x288>)
 800242c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002430:	f7fe faf8 	bl	8000a24 <__aeabi_dcmplt>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d006      	beq.n	8002448 <Nav_TrapezeLinearVelocity2+0x1f0>
		{
			Nav_TargetLinearVelocity_d = Nav_MaxVelocity_d ;
 800243a:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <Nav_TrapezeLinearVelocity2+0x28c>)
 800243c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002440:	4924      	ldr	r1, [pc, #144]	; (80024d4 <Nav_TrapezeLinearVelocity2+0x27c>)
 8002442:	e9c1 2300 	strd	r2, r3, [r1]
		{
			Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
			Nav_ReferenceLinearVelocity_d = Nav_TargetLinearVelocity_d;
			Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
		}
	}break;
 8002446:	e0e2      	b.n	800260e <Nav_TrapezeLinearVelocity2+0x3b6>
			Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 8002448:	4b27      	ldr	r3, [pc, #156]	; (80024e8 <Nav_TrapezeLinearVelocity2+0x290>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	3b01      	subs	r3, #1
 800244e:	4a27      	ldr	r2, [pc, #156]	; (80024ec <Nav_TrapezeLinearVelocity2+0x294>)
 8002450:	6013      	str	r3, [r2, #0]
			Nav_ReferenceLinearVelocity_d = Nav_TargetLinearVelocity_d;
 8002452:	4b20      	ldr	r3, [pc, #128]	; (80024d4 <Nav_TrapezeLinearVelocity2+0x27c>)
 8002454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002458:	4925      	ldr	r1, [pc, #148]	; (80024f0 <Nav_TrapezeLinearVelocity2+0x298>)
 800245a:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
 800245e:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <Nav_TrapezeLinearVelocity2+0x278>)
 8002460:	2203      	movs	r2, #3
 8002462:	701a      	strb	r2, [r3, #0]
	}break;
 8002464:	e0d3      	b.n	800260e <Nav_TrapezeLinearVelocity2+0x3b6>

	case Nav_Trapeze_Decelerating_en:
	{
		Nav_ReferenceDistance_d = (Nav_TargetLinearVelocity_d * Nav_TargetLinearVelocity_d) / ( 2 * Nav_Acc_d ) ;
 8002466:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <Nav_TrapezeLinearVelocity2+0x27c>)
 8002468:	e9d3 0100 	ldrd	r0, r1, [r3]
 800246c:	4b19      	ldr	r3, [pc, #100]	; (80024d4 <Nav_TrapezeLinearVelocity2+0x27c>)
 800246e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002472:	f7fe f865 	bl	8000540 <__aeabi_dmul>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4614      	mov	r4, r2
 800247c:	461d      	mov	r5, r3
 800247e:	4b16      	ldr	r3, [pc, #88]	; (80024d8 <Nav_TrapezeLinearVelocity2+0x280>)
 8002480:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	f7fd fea4 	bl	80001d4 <__adddf3>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4620      	mov	r0, r4
 8002492:	4629      	mov	r1, r5
 8002494:	f7fe f97e 	bl	8000794 <__aeabi_ddiv>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	490f      	ldr	r1, [pc, #60]	; (80024dc <Nav_TrapezeLinearVelocity2+0x284>)
 800249e:	e9c1 2300 	strd	r2, r3, [r1]

		if( Nav_RemainingDistance_mm_d >= Nav_ReferenceDistance_d )
 80024a2:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <Nav_TrapezeLinearVelocity2+0x288>)
 80024a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024a8:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <Nav_TrapezeLinearVelocity2+0x284>)
 80024aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ae:	f7fe facd 	bl	8000a4c <__aeabi_dcmpge>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d01d      	beq.n	80024f4 <Nav_TrapezeLinearVelocity2+0x29c>
		{
			Nav_ReferenceLinearVelocity_d = Nav_TargetLinearVelocity_d;
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <Nav_TrapezeLinearVelocity2+0x27c>)
 80024ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024be:	490c      	ldr	r1, [pc, #48]	; (80024f0 <Nav_TrapezeLinearVelocity2+0x298>)
 80024c0:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 80024c4:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <Nav_TrapezeLinearVelocity2+0x290>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	3b01      	subs	r3, #1
 80024ca:	4a08      	ldr	r2, [pc, #32]	; (80024ec <Nav_TrapezeLinearVelocity2+0x294>)
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	e02c      	b.n	800252a <Nav_TrapezeLinearVelocity2+0x2d2>
 80024d0:	20000000 	.word	0x20000000
 80024d4:	200003e8 	.word	0x200003e8
 80024d8:	20000460 	.word	0x20000460
 80024dc:	20000348 	.word	0x20000348
 80024e0:	200003b8 	.word	0x200003b8
 80024e4:	20000468 	.word	0x20000468
 80024e8:	20000480 	.word	0x20000480
 80024ec:	20000484 	.word	0x20000484
 80024f0:	20000418 	.word	0x20000418
		}
		else
		{
			Nav_TargetLinearVelocity_d = Nav_ReferenceLinearVelocity_d - ( Nav_Acc_d * ( Nav_CurrentSample_u32 -Nav_AccelerationSamples_u32 ) )  ;
 80024f4:	4b47      	ldr	r3, [pc, #284]	; (8002614 <Nav_TrapezeLinearVelocity2+0x3bc>)
 80024f6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80024fa:	4b47      	ldr	r3, [pc, #284]	; (8002618 <Nav_TrapezeLinearVelocity2+0x3c0>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	4b47      	ldr	r3, [pc, #284]	; (800261c <Nav_TrapezeLinearVelocity2+0x3c4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	4618      	mov	r0, r3
 8002506:	f7fd ffa1 	bl	800044c <__aeabi_ui2d>
 800250a:	4b45      	ldr	r3, [pc, #276]	; (8002620 <Nav_TrapezeLinearVelocity2+0x3c8>)
 800250c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002510:	f7fe f816 	bl	8000540 <__aeabi_dmul>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4620      	mov	r0, r4
 800251a:	4629      	mov	r1, r5
 800251c:	f7fd fe58 	bl	80001d0 <__aeabi_dsub>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	493f      	ldr	r1, [pc, #252]	; (8002624 <Nav_TrapezeLinearVelocity2+0x3cc>)
 8002526:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if( ( Nav_RemainingDistance_mm_d <= 0.0 ) || ( Nav_TargetLinearVelocity_d <= 0.0) )
 800252a:	4b3f      	ldr	r3, [pc, #252]	; (8002628 <Nav_TrapezeLinearVelocity2+0x3d0>)
 800252c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	f7fe fa7e 	bl	8000a38 <__aeabi_dcmple>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10c      	bne.n	800255c <Nav_TrapezeLinearVelocity2+0x304>
 8002542:	4b38      	ldr	r3, [pc, #224]	; (8002624 <Nav_TrapezeLinearVelocity2+0x3cc>)
 8002544:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	f04f 0300 	mov.w	r3, #0
 8002550:	f7fe fa72 	bl	8000a38 <__aeabi_dcmple>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d100      	bne.n	800255c <Nav_TrapezeLinearVelocity2+0x304>
		{
			Nav_TargetLinearVelocity_d = 0 ;
			Nav_TrapezePhase_en = Nav_Trapeze_Finished_en ;
		}

	}break;
 800255a:	e058      	b.n	800260e <Nav_TrapezeLinearVelocity2+0x3b6>
			Nav_TargetLinearVelocity_d = 0 ;
 800255c:	4931      	ldr	r1, [pc, #196]	; (8002624 <Nav_TrapezeLinearVelocity2+0x3cc>)
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	f04f 0300 	mov.w	r3, #0
 8002566:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TrapezePhase_en = Nav_Trapeze_Finished_en ;
 800256a:	4b30      	ldr	r3, [pc, #192]	; (800262c <Nav_TrapezeLinearVelocity2+0x3d4>)
 800256c:	2206      	movs	r2, #6
 800256e:	701a      	strb	r2, [r3, #0]
	}break;
 8002570:	e04d      	b.n	800260e <Nav_TrapezeLinearVelocity2+0x3b6>
	case Nav_Trapeze_OrderUrgentDecelerating_en:
	{
		Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 8002572:	4b29      	ldr	r3, [pc, #164]	; (8002618 <Nav_TrapezeLinearVelocity2+0x3c0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	3b01      	subs	r3, #1
 8002578:	4a28      	ldr	r2, [pc, #160]	; (800261c <Nav_TrapezeLinearVelocity2+0x3c4>)
 800257a:	6013      	str	r3, [r2, #0]
		Nav_ReferenceLinearVelocity_d = Nav_TargetLinearVelocity_d;
 800257c:	4b29      	ldr	r3, [pc, #164]	; (8002624 <Nav_TrapezeLinearVelocity2+0x3cc>)
 800257e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002582:	4924      	ldr	r1, [pc, #144]	; (8002614 <Nav_TrapezeLinearVelocity2+0x3bc>)
 8002584:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_TrapezePhase_en = Nav_Trapeze_UrgentDecelerating_en;
 8002588:	4b28      	ldr	r3, [pc, #160]	; (800262c <Nav_TrapezeLinearVelocity2+0x3d4>)
 800258a:	2205      	movs	r2, #5
 800258c:	701a      	strb	r2, [r3, #0]
	}break;
 800258e:	e03e      	b.n	800260e <Nav_TrapezeLinearVelocity2+0x3b6>
	case Nav_Trapeze_UrgentDecelerating_en:
	{
		Nav_TargetLinearVelocity_d = Nav_ReferenceLinearVelocity_d - ( Nav_Acc_d * ( Nav_CurrentSample_u32 -Nav_AccelerationSamples_u32 ) )  ;
 8002590:	4b20      	ldr	r3, [pc, #128]	; (8002614 <Nav_TrapezeLinearVelocity2+0x3bc>)
 8002592:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002596:	4b20      	ldr	r3, [pc, #128]	; (8002618 <Nav_TrapezeLinearVelocity2+0x3c0>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	4b20      	ldr	r3, [pc, #128]	; (800261c <Nav_TrapezeLinearVelocity2+0x3c4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fd ff53 	bl	800044c <__aeabi_ui2d>
 80025a6:	4b1e      	ldr	r3, [pc, #120]	; (8002620 <Nav_TrapezeLinearVelocity2+0x3c8>)
 80025a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ac:	f7fd ffc8 	bl	8000540 <__aeabi_dmul>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	4620      	mov	r0, r4
 80025b6:	4629      	mov	r1, r5
 80025b8:	f7fd fe0a 	bl	80001d0 <__aeabi_dsub>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4918      	ldr	r1, [pc, #96]	; (8002624 <Nav_TrapezeLinearVelocity2+0x3cc>)
 80025c2:	e9c1 2300 	strd	r2, r3, [r1]
		if(  Nav_TargetLinearVelocity_d < 0.0)
 80025c6:	4b17      	ldr	r3, [pc, #92]	; (8002624 <Nav_TrapezeLinearVelocity2+0x3cc>)
 80025c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	f7fe fa26 	bl	8000a24 <__aeabi_dcmplt>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d100      	bne.n	80025e0 <Nav_TrapezeLinearVelocity2+0x388>
		{
			Nav_TargetLinearVelocity_d = 0 ;
			Nav_TrapezePhase_en = Nav_Trapeze_Finished_en ;
		}
	}break;
 80025de:	e016      	b.n	800260e <Nav_TrapezeLinearVelocity2+0x3b6>
			Nav_TargetLinearVelocity_d = 0 ;
 80025e0:	4910      	ldr	r1, [pc, #64]	; (8002624 <Nav_TrapezeLinearVelocity2+0x3cc>)
 80025e2:	f04f 0200 	mov.w	r2, #0
 80025e6:	f04f 0300 	mov.w	r3, #0
 80025ea:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TrapezePhase_en = Nav_Trapeze_Finished_en ;
 80025ee:	4b0f      	ldr	r3, [pc, #60]	; (800262c <Nav_TrapezeLinearVelocity2+0x3d4>)
 80025f0:	2206      	movs	r2, #6
 80025f2:	701a      	strb	r2, [r3, #0]
	}break;
 80025f4:	e00b      	b.n	800260e <Nav_TrapezeLinearVelocity2+0x3b6>


	case Nav_Trapeze_Finished_en:
	{
		Nav_TargetLinearVelocity_d = 0.0 ;
 80025f6:	490b      	ldr	r1, [pc, #44]	; (8002624 <Nav_TrapezeLinearVelocity2+0x3cc>)
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_TrapezePhase_en = Nav_Trapeze_Idle_en ;
 8002604:	4b09      	ldr	r3, [pc, #36]	; (800262c <Nav_TrapezeLinearVelocity2+0x3d4>)
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
	}break;
 800260a:	e000      	b.n	800260e <Nav_TrapezeLinearVelocity2+0x3b6>
	}break;
 800260c:	bf00      	nop

	}
}
 800260e:	bf00      	nop
 8002610:	bdb0      	pop	{r4, r5, r7, pc}
 8002612:	bf00      	nop
 8002614:	20000418 	.word	0x20000418
 8002618:	20000480 	.word	0x20000480
 800261c:	20000484 	.word	0x20000484
 8002620:	20000460 	.word	0x20000460
 8002624:	200003e8 	.word	0x200003e8
 8002628:	200003b8 	.word	0x200003b8
 800262c:	20000000 	.word	0x20000000

08002630 <Nav_TrapezeReverseLinearVelocity2>:

void Nav_TrapezeReverseLinearVelocity2()
{
 8002630:	b5b0      	push	{r4, r5, r7, lr}
 8002632:	af00      	add	r7, sp, #0
	switch( Nav_TrapezePhase_en )
 8002634:	4b9c      	ldr	r3, [pc, #624]	; (80028a8 <Nav_TrapezeReverseLinearVelocity2+0x278>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b06      	cmp	r3, #6
 800263a:	f200 81d4 	bhi.w	80029e6 <Nav_TrapezeReverseLinearVelocity2+0x3b6>
 800263e:	a201      	add	r2, pc, #4	; (adr r2, 8002644 <Nav_TrapezeReverseLinearVelocity2+0x14>)
 8002640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002644:	080029e5 	.word	0x080029e5
 8002648:	08002661 	.word	0x08002661
 800264c:	080027ad 	.word	0x080027ad
 8002650:	0800283f 	.word	0x0800283f
 8002654:	0800294b 	.word	0x0800294b
 8002658:	08002969 	.word	0x08002969
 800265c:	080029cf 	.word	0x080029cf

	}break;
	case Nav_Trapeze_Accelerating_en:
	{

		Nav_ReferenceDistance_d = (Nav_TargetLinearVelocity_d * Nav_TargetLinearVelocity_d) / ( 2 * Nav_Acc_d ) ;
 8002660:	4b92      	ldr	r3, [pc, #584]	; (80028ac <Nav_TrapezeReverseLinearVelocity2+0x27c>)
 8002662:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002666:	4b91      	ldr	r3, [pc, #580]	; (80028ac <Nav_TrapezeReverseLinearVelocity2+0x27c>)
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	f7fd ff68 	bl	8000540 <__aeabi_dmul>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4614      	mov	r4, r2
 8002676:	461d      	mov	r5, r3
 8002678:	4b8d      	ldr	r3, [pc, #564]	; (80028b0 <Nav_TrapezeReverseLinearVelocity2+0x280>)
 800267a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	f7fd fda7 	bl	80001d4 <__adddf3>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4620      	mov	r0, r4
 800268c:	4629      	mov	r1, r5
 800268e:	f7fe f881 	bl	8000794 <__aeabi_ddiv>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4987      	ldr	r1, [pc, #540]	; (80028b4 <Nav_TrapezeReverseLinearVelocity2+0x284>)
 8002698:	e9c1 2300 	strd	r2, r3, [r1]
		if( Nav_RemainingDistance_mm_d > (-2.0) )
 800269c:	4b86      	ldr	r3, [pc, #536]	; (80028b8 <Nav_TrapezeReverseLinearVelocity2+0x288>)
 800269e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026a2:	f04f 0200 	mov.w	r2, #0
 80026a6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80026aa:	f7fe f9d9 	bl	8000a60 <__aeabi_dcmpgt>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d038      	beq.n	8002726 <Nav_TrapezeReverseLinearVelocity2+0xf6>
		{
			if( Nav_RemainingDistance_mm_d <  Nav_ReferenceDistance_d  )
 80026b4:	4b80      	ldr	r3, [pc, #512]	; (80028b8 <Nav_TrapezeReverseLinearVelocity2+0x288>)
 80026b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026ba:	4b7e      	ldr	r3, [pc, #504]	; (80028b4 <Nav_TrapezeReverseLinearVelocity2+0x284>)
 80026bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c0:	f7fe f9b0 	bl	8000a24 <__aeabi_dcmplt>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d01e      	beq.n	8002708 <Nav_TrapezeReverseLinearVelocity2+0xd8>
			{
				if ( Nav_TargetLinearVelocity_d > Nav_MaxVelocity_d )
 80026ca:	4b78      	ldr	r3, [pc, #480]	; (80028ac <Nav_TrapezeReverseLinearVelocity2+0x27c>)
 80026cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026d0:	4b7a      	ldr	r3, [pc, #488]	; (80028bc <Nav_TrapezeReverseLinearVelocity2+0x28c>)
 80026d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d6:	f7fe f9c3 	bl	8000a60 <__aeabi_dcmpgt>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00f      	beq.n	8002700 <Nav_TrapezeReverseLinearVelocity2+0xd0>
				{
					Nav_TargetLinearVelocity_d = Nav_Acc_d * Nav_CurrentSample_u32 ;
 80026e0:	4b77      	ldr	r3, [pc, #476]	; (80028c0 <Nav_TrapezeReverseLinearVelocity2+0x290>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fd feb1 	bl	800044c <__aeabi_ui2d>
 80026ea:	4b71      	ldr	r3, [pc, #452]	; (80028b0 <Nav_TrapezeReverseLinearVelocity2+0x280>)
 80026ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f0:	f7fd ff26 	bl	8000540 <__aeabi_dmul>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	496c      	ldr	r1, [pc, #432]	; (80028ac <Nav_TrapezeReverseLinearVelocity2+0x27c>)
 80026fa:	e9c1 2300 	strd	r2, r3, [r1]
				Nav_ReferenceLinearVelocity_d = Nav_TargetLinearVelocity_d;
				Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
			}
		}

	}break;
 80026fe:	e172      	b.n	80029e6 <Nav_TrapezeReverseLinearVelocity2+0x3b6>
					Nav_TrapezePhase_en = Nav_Trapeze_ConstantVelocity_en;
 8002700:	4b69      	ldr	r3, [pc, #420]	; (80028a8 <Nav_TrapezeReverseLinearVelocity2+0x278>)
 8002702:	2202      	movs	r2, #2
 8002704:	701a      	strb	r2, [r3, #0]
	}break;
 8002706:	e16e      	b.n	80029e6 <Nav_TrapezeReverseLinearVelocity2+0x3b6>
				Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 8002708:	4b6d      	ldr	r3, [pc, #436]	; (80028c0 <Nav_TrapezeReverseLinearVelocity2+0x290>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	3b01      	subs	r3, #1
 800270e:	4a6d      	ldr	r2, [pc, #436]	; (80028c4 <Nav_TrapezeReverseLinearVelocity2+0x294>)
 8002710:	6013      	str	r3, [r2, #0]
				Nav_ReferenceLinearVelocity_d = Nav_TargetLinearVelocity_d;
 8002712:	4b66      	ldr	r3, [pc, #408]	; (80028ac <Nav_TrapezeReverseLinearVelocity2+0x27c>)
 8002714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002718:	496b      	ldr	r1, [pc, #428]	; (80028c8 <Nav_TrapezeReverseLinearVelocity2+0x298>)
 800271a:	e9c1 2300 	strd	r2, r3, [r1]
				Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
 800271e:	4b62      	ldr	r3, [pc, #392]	; (80028a8 <Nav_TrapezeReverseLinearVelocity2+0x278>)
 8002720:	2203      	movs	r2, #3
 8002722:	701a      	strb	r2, [r3, #0]
	}break;
 8002724:	e15f      	b.n	80029e6 <Nav_TrapezeReverseLinearVelocity2+0x3b6>
			if( Nav_RemainingDistance_mm_d <  ( Nav_ReferenceDistance_d - 2.0 ) )
 8002726:	4b63      	ldr	r3, [pc, #396]	; (80028b4 <Nav_TrapezeReverseLinearVelocity2+0x284>)
 8002728:	e9d3 0100 	ldrd	r0, r1, [r3]
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002734:	f7fd fd4c 	bl	80001d0 <__aeabi_dsub>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4610      	mov	r0, r2
 800273e:	4619      	mov	r1, r3
 8002740:	4b5d      	ldr	r3, [pc, #372]	; (80028b8 <Nav_TrapezeReverseLinearVelocity2+0x288>)
 8002742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002746:	f7fe f98b 	bl	8000a60 <__aeabi_dcmpgt>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d01e      	beq.n	800278e <Nav_TrapezeReverseLinearVelocity2+0x15e>
				if ( Nav_TargetLinearVelocity_d > Nav_MaxVelocity_d )
 8002750:	4b56      	ldr	r3, [pc, #344]	; (80028ac <Nav_TrapezeReverseLinearVelocity2+0x27c>)
 8002752:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002756:	4b59      	ldr	r3, [pc, #356]	; (80028bc <Nav_TrapezeReverseLinearVelocity2+0x28c>)
 8002758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275c:	f7fe f980 	bl	8000a60 <__aeabi_dcmpgt>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00f      	beq.n	8002786 <Nav_TrapezeReverseLinearVelocity2+0x156>
					Nav_TargetLinearVelocity_d = Nav_Acc_d * Nav_CurrentSample_u32 ;
 8002766:	4b56      	ldr	r3, [pc, #344]	; (80028c0 <Nav_TrapezeReverseLinearVelocity2+0x290>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7fd fe6e 	bl	800044c <__aeabi_ui2d>
 8002770:	4b4f      	ldr	r3, [pc, #316]	; (80028b0 <Nav_TrapezeReverseLinearVelocity2+0x280>)
 8002772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002776:	f7fd fee3 	bl	8000540 <__aeabi_dmul>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	494b      	ldr	r1, [pc, #300]	; (80028ac <Nav_TrapezeReverseLinearVelocity2+0x27c>)
 8002780:	e9c1 2300 	strd	r2, r3, [r1]
	}break;
 8002784:	e12f      	b.n	80029e6 <Nav_TrapezeReverseLinearVelocity2+0x3b6>
					Nav_TrapezePhase_en = Nav_Trapeze_ConstantVelocity_en;
 8002786:	4b48      	ldr	r3, [pc, #288]	; (80028a8 <Nav_TrapezeReverseLinearVelocity2+0x278>)
 8002788:	2202      	movs	r2, #2
 800278a:	701a      	strb	r2, [r3, #0]
	}break;
 800278c:	e12b      	b.n	80029e6 <Nav_TrapezeReverseLinearVelocity2+0x3b6>
				Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 800278e:	4b4c      	ldr	r3, [pc, #304]	; (80028c0 <Nav_TrapezeReverseLinearVelocity2+0x290>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	3b01      	subs	r3, #1
 8002794:	4a4b      	ldr	r2, [pc, #300]	; (80028c4 <Nav_TrapezeReverseLinearVelocity2+0x294>)
 8002796:	6013      	str	r3, [r2, #0]
				Nav_ReferenceLinearVelocity_d = Nav_TargetLinearVelocity_d;
 8002798:	4b44      	ldr	r3, [pc, #272]	; (80028ac <Nav_TrapezeReverseLinearVelocity2+0x27c>)
 800279a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279e:	494a      	ldr	r1, [pc, #296]	; (80028c8 <Nav_TrapezeReverseLinearVelocity2+0x298>)
 80027a0:	e9c1 2300 	strd	r2, r3, [r1]
				Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
 80027a4:	4b40      	ldr	r3, [pc, #256]	; (80028a8 <Nav_TrapezeReverseLinearVelocity2+0x278>)
 80027a6:	2203      	movs	r2, #3
 80027a8:	701a      	strb	r2, [r3, #0]
	}break;
 80027aa:	e11c      	b.n	80029e6 <Nav_TrapezeReverseLinearVelocity2+0x3b6>

	case Nav_Trapeze_ConstantVelocity_en:
	{
		Nav_ReferenceDistance_d = (Nav_TargetLinearVelocity_d * Nav_TargetLinearVelocity_d) / ( 2 * Nav_Acc_d ) ;
 80027ac:	4b3f      	ldr	r3, [pc, #252]	; (80028ac <Nav_TrapezeReverseLinearVelocity2+0x27c>)
 80027ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027b2:	4b3e      	ldr	r3, [pc, #248]	; (80028ac <Nav_TrapezeReverseLinearVelocity2+0x27c>)
 80027b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b8:	f7fd fec2 	bl	8000540 <__aeabi_dmul>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	4614      	mov	r4, r2
 80027c2:	461d      	mov	r5, r3
 80027c4:	4b3a      	ldr	r3, [pc, #232]	; (80028b0 <Nav_TrapezeReverseLinearVelocity2+0x280>)
 80027c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	f7fd fd01 	bl	80001d4 <__adddf3>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4620      	mov	r0, r4
 80027d8:	4629      	mov	r1, r5
 80027da:	f7fd ffdb 	bl	8000794 <__aeabi_ddiv>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	4934      	ldr	r1, [pc, #208]	; (80028b4 <Nav_TrapezeReverseLinearVelocity2+0x284>)
 80027e4:	e9c1 2300 	strd	r2, r3, [r1]
		if( Nav_RemainingDistance_mm_d < ( Nav_ReferenceDistance_d - 2.0 ) )
 80027e8:	4b32      	ldr	r3, [pc, #200]	; (80028b4 <Nav_TrapezeReverseLinearVelocity2+0x284>)
 80027ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027f6:	f7fd fceb 	bl	80001d0 <__aeabi_dsub>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	4610      	mov	r0, r2
 8002800:	4619      	mov	r1, r3
 8002802:	4b2d      	ldr	r3, [pc, #180]	; (80028b8 <Nav_TrapezeReverseLinearVelocity2+0x288>)
 8002804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002808:	f7fe f92a 	bl	8000a60 <__aeabi_dcmpgt>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d006      	beq.n	8002820 <Nav_TrapezeReverseLinearVelocity2+0x1f0>
		{
			Nav_TargetLinearVelocity_d = Nav_MaxVelocity_d ;
 8002812:	4b2a      	ldr	r3, [pc, #168]	; (80028bc <Nav_TrapezeReverseLinearVelocity2+0x28c>)
 8002814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002818:	4924      	ldr	r1, [pc, #144]	; (80028ac <Nav_TrapezeReverseLinearVelocity2+0x27c>)
 800281a:	e9c1 2300 	strd	r2, r3, [r1]
		{
			Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
			Nav_ReferenceLinearVelocity_d = Nav_TargetLinearVelocity_d;
			Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
		}
	}break;
 800281e:	e0e2      	b.n	80029e6 <Nav_TrapezeReverseLinearVelocity2+0x3b6>
			Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 8002820:	4b27      	ldr	r3, [pc, #156]	; (80028c0 <Nav_TrapezeReverseLinearVelocity2+0x290>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	3b01      	subs	r3, #1
 8002826:	4a27      	ldr	r2, [pc, #156]	; (80028c4 <Nav_TrapezeReverseLinearVelocity2+0x294>)
 8002828:	6013      	str	r3, [r2, #0]
			Nav_ReferenceLinearVelocity_d = Nav_TargetLinearVelocity_d;
 800282a:	4b20      	ldr	r3, [pc, #128]	; (80028ac <Nav_TrapezeReverseLinearVelocity2+0x27c>)
 800282c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002830:	4925      	ldr	r1, [pc, #148]	; (80028c8 <Nav_TrapezeReverseLinearVelocity2+0x298>)
 8002832:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
 8002836:	4b1c      	ldr	r3, [pc, #112]	; (80028a8 <Nav_TrapezeReverseLinearVelocity2+0x278>)
 8002838:	2203      	movs	r2, #3
 800283a:	701a      	strb	r2, [r3, #0]
	}break;
 800283c:	e0d3      	b.n	80029e6 <Nav_TrapezeReverseLinearVelocity2+0x3b6>

	case Nav_Trapeze_Decelerating_en:
	{
		Nav_ReferenceDistance_d = (Nav_TargetLinearVelocity_d * Nav_TargetLinearVelocity_d) / ( 2 * Nav_Acc_d ) ;
 800283e:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <Nav_TrapezeReverseLinearVelocity2+0x27c>)
 8002840:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002844:	4b19      	ldr	r3, [pc, #100]	; (80028ac <Nav_TrapezeReverseLinearVelocity2+0x27c>)
 8002846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284a:	f7fd fe79 	bl	8000540 <__aeabi_dmul>
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	4614      	mov	r4, r2
 8002854:	461d      	mov	r5, r3
 8002856:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <Nav_TrapezeReverseLinearVelocity2+0x280>)
 8002858:	e9d3 0100 	ldrd	r0, r1, [r3]
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	f7fd fcb8 	bl	80001d4 <__adddf3>
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	4620      	mov	r0, r4
 800286a:	4629      	mov	r1, r5
 800286c:	f7fd ff92 	bl	8000794 <__aeabi_ddiv>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	490f      	ldr	r1, [pc, #60]	; (80028b4 <Nav_TrapezeReverseLinearVelocity2+0x284>)
 8002876:	e9c1 2300 	strd	r2, r3, [r1]

		if( Nav_RemainingDistance_mm_d <= Nav_ReferenceDistance_d )
 800287a:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <Nav_TrapezeReverseLinearVelocity2+0x288>)
 800287c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002880:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <Nav_TrapezeReverseLinearVelocity2+0x284>)
 8002882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002886:	f7fe f8d7 	bl	8000a38 <__aeabi_dcmple>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d01d      	beq.n	80028cc <Nav_TrapezeReverseLinearVelocity2+0x29c>
		{
			Nav_ReferenceLinearVelocity_d = Nav_TargetLinearVelocity_d;
 8002890:	4b06      	ldr	r3, [pc, #24]	; (80028ac <Nav_TrapezeReverseLinearVelocity2+0x27c>)
 8002892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002896:	490c      	ldr	r1, [pc, #48]	; (80028c8 <Nav_TrapezeReverseLinearVelocity2+0x298>)
 8002898:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 800289c:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <Nav_TrapezeReverseLinearVelocity2+0x290>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	3b01      	subs	r3, #1
 80028a2:	4a08      	ldr	r2, [pc, #32]	; (80028c4 <Nav_TrapezeReverseLinearVelocity2+0x294>)
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	e02c      	b.n	8002902 <Nav_TrapezeReverseLinearVelocity2+0x2d2>
 80028a8:	20000000 	.word	0x20000000
 80028ac:	200003e8 	.word	0x200003e8
 80028b0:	20000460 	.word	0x20000460
 80028b4:	20000348 	.word	0x20000348
 80028b8:	200003b8 	.word	0x200003b8
 80028bc:	20000468 	.word	0x20000468
 80028c0:	20000480 	.word	0x20000480
 80028c4:	20000484 	.word	0x20000484
 80028c8:	20000418 	.word	0x20000418
		}
		else
		{
			Nav_TargetLinearVelocity_d = Nav_ReferenceLinearVelocity_d - ( Nav_Acc_d * ( Nav_CurrentSample_u32 -Nav_AccelerationSamples_u32 ) )  ;
 80028cc:	4b47      	ldr	r3, [pc, #284]	; (80029ec <Nav_TrapezeReverseLinearVelocity2+0x3bc>)
 80028ce:	e9d3 4500 	ldrd	r4, r5, [r3]
 80028d2:	4b47      	ldr	r3, [pc, #284]	; (80029f0 <Nav_TrapezeReverseLinearVelocity2+0x3c0>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	4b47      	ldr	r3, [pc, #284]	; (80029f4 <Nav_TrapezeReverseLinearVelocity2+0x3c4>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fd fdb5 	bl	800044c <__aeabi_ui2d>
 80028e2:	4b45      	ldr	r3, [pc, #276]	; (80029f8 <Nav_TrapezeReverseLinearVelocity2+0x3c8>)
 80028e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e8:	f7fd fe2a 	bl	8000540 <__aeabi_dmul>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4620      	mov	r0, r4
 80028f2:	4629      	mov	r1, r5
 80028f4:	f7fd fc6c 	bl	80001d0 <__aeabi_dsub>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	493f      	ldr	r1, [pc, #252]	; (80029fc <Nav_TrapezeReverseLinearVelocity2+0x3cc>)
 80028fe:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if( ( Nav_RemainingDistance_mm_d >= 0.0 ) || ( Nav_TargetLinearVelocity_d >= 0.0) )
 8002902:	4b3f      	ldr	r3, [pc, #252]	; (8002a00 <Nav_TrapezeReverseLinearVelocity2+0x3d0>)
 8002904:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	f04f 0300 	mov.w	r3, #0
 8002910:	f7fe f89c 	bl	8000a4c <__aeabi_dcmpge>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10c      	bne.n	8002934 <Nav_TrapezeReverseLinearVelocity2+0x304>
 800291a:	4b38      	ldr	r3, [pc, #224]	; (80029fc <Nav_TrapezeReverseLinearVelocity2+0x3cc>)
 800291c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	f7fe f890 	bl	8000a4c <__aeabi_dcmpge>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d100      	bne.n	8002934 <Nav_TrapezeReverseLinearVelocity2+0x304>
		{
			Nav_TargetLinearVelocity_d = 0 ;
			Nav_TrapezePhase_en = Nav_Trapeze_Finished_en ;
		}

	}break;
 8002932:	e058      	b.n	80029e6 <Nav_TrapezeReverseLinearVelocity2+0x3b6>
			Nav_TargetLinearVelocity_d = 0 ;
 8002934:	4931      	ldr	r1, [pc, #196]	; (80029fc <Nav_TrapezeReverseLinearVelocity2+0x3cc>)
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TrapezePhase_en = Nav_Trapeze_Finished_en ;
 8002942:	4b30      	ldr	r3, [pc, #192]	; (8002a04 <Nav_TrapezeReverseLinearVelocity2+0x3d4>)
 8002944:	2206      	movs	r2, #6
 8002946:	701a      	strb	r2, [r3, #0]
	}break;
 8002948:	e04d      	b.n	80029e6 <Nav_TrapezeReverseLinearVelocity2+0x3b6>
	case Nav_Trapeze_OrderUrgentDecelerating_en:
	{
		Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 800294a:	4b29      	ldr	r3, [pc, #164]	; (80029f0 <Nav_TrapezeReverseLinearVelocity2+0x3c0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	3b01      	subs	r3, #1
 8002950:	4a28      	ldr	r2, [pc, #160]	; (80029f4 <Nav_TrapezeReverseLinearVelocity2+0x3c4>)
 8002952:	6013      	str	r3, [r2, #0]
		Nav_ReferenceLinearVelocity_d = Nav_TargetLinearVelocity_d;
 8002954:	4b29      	ldr	r3, [pc, #164]	; (80029fc <Nav_TrapezeReverseLinearVelocity2+0x3cc>)
 8002956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295a:	4924      	ldr	r1, [pc, #144]	; (80029ec <Nav_TrapezeReverseLinearVelocity2+0x3bc>)
 800295c:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_TrapezePhase_en = Nav_Trapeze_UrgentDecelerating_en;
 8002960:	4b28      	ldr	r3, [pc, #160]	; (8002a04 <Nav_TrapezeReverseLinearVelocity2+0x3d4>)
 8002962:	2205      	movs	r2, #5
 8002964:	701a      	strb	r2, [r3, #0]
	}break;
 8002966:	e03e      	b.n	80029e6 <Nav_TrapezeReverseLinearVelocity2+0x3b6>
	case Nav_Trapeze_UrgentDecelerating_en:
	{
		Nav_TargetLinearVelocity_d = Nav_ReferenceLinearVelocity_d - ( Nav_Acc_d * ( Nav_CurrentSample_u32 -Nav_AccelerationSamples_u32 ) )  ;
 8002968:	4b20      	ldr	r3, [pc, #128]	; (80029ec <Nav_TrapezeReverseLinearVelocity2+0x3bc>)
 800296a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800296e:	4b20      	ldr	r3, [pc, #128]	; (80029f0 <Nav_TrapezeReverseLinearVelocity2+0x3c0>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	4b20      	ldr	r3, [pc, #128]	; (80029f4 <Nav_TrapezeReverseLinearVelocity2+0x3c4>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	4618      	mov	r0, r3
 800297a:	f7fd fd67 	bl	800044c <__aeabi_ui2d>
 800297e:	4b1e      	ldr	r3, [pc, #120]	; (80029f8 <Nav_TrapezeReverseLinearVelocity2+0x3c8>)
 8002980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002984:	f7fd fddc 	bl	8000540 <__aeabi_dmul>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4620      	mov	r0, r4
 800298e:	4629      	mov	r1, r5
 8002990:	f7fd fc1e 	bl	80001d0 <__aeabi_dsub>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4918      	ldr	r1, [pc, #96]	; (80029fc <Nav_TrapezeReverseLinearVelocity2+0x3cc>)
 800299a:	e9c1 2300 	strd	r2, r3, [r1]
		if(  Nav_TargetLinearVelocity_d >= 0.0)
 800299e:	4b17      	ldr	r3, [pc, #92]	; (80029fc <Nav_TrapezeReverseLinearVelocity2+0x3cc>)
 80029a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	f04f 0300 	mov.w	r3, #0
 80029ac:	f7fe f84e 	bl	8000a4c <__aeabi_dcmpge>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d100      	bne.n	80029b8 <Nav_TrapezeReverseLinearVelocity2+0x388>
		{
			Nav_TargetLinearVelocity_d = 0 ;
			Nav_TrapezePhase_en = Nav_Trapeze_Finished_en ;
		}
	}break;
 80029b6:	e016      	b.n	80029e6 <Nav_TrapezeReverseLinearVelocity2+0x3b6>
			Nav_TargetLinearVelocity_d = 0 ;
 80029b8:	4910      	ldr	r1, [pc, #64]	; (80029fc <Nav_TrapezeReverseLinearVelocity2+0x3cc>)
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TrapezePhase_en = Nav_Trapeze_Finished_en ;
 80029c6:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <Nav_TrapezeReverseLinearVelocity2+0x3d4>)
 80029c8:	2206      	movs	r2, #6
 80029ca:	701a      	strb	r2, [r3, #0]
	}break;
 80029cc:	e00b      	b.n	80029e6 <Nav_TrapezeReverseLinearVelocity2+0x3b6>


	case Nav_Trapeze_Finished_en:
	{
		Nav_TargetLinearVelocity_d = 0.0 ;
 80029ce:	490b      	ldr	r1, [pc, #44]	; (80029fc <Nav_TrapezeReverseLinearVelocity2+0x3cc>)
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	f04f 0300 	mov.w	r3, #0
 80029d8:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_TrapezePhase_en = Nav_Trapeze_Idle_en ;
 80029dc:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <Nav_TrapezeReverseLinearVelocity2+0x3d4>)
 80029de:	2200      	movs	r2, #0
 80029e0:	701a      	strb	r2, [r3, #0]
	}break;
 80029e2:	e000      	b.n	80029e6 <Nav_TrapezeReverseLinearVelocity2+0x3b6>
	}break;
 80029e4:	bf00      	nop

	}
}
 80029e6:	bf00      	nop
 80029e8:	bdb0      	pop	{r4, r5, r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000418 	.word	0x20000418
 80029f0:	20000480 	.word	0x20000480
 80029f4:	20000484 	.word	0x20000484
 80029f8:	20000460 	.word	0x20000460
 80029fc:	200003e8 	.word	0x200003e8
 8002a00:	200003b8 	.word	0x200003b8
 8002a04:	20000000 	.word	0x20000000

08002a08 <Nav_TrapezeAngularVelocity2>:


void Nav_TrapezeAngularVelocity2()
{
 8002a08:	b5b0      	push	{r4, r5, r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
	switch( Nav_TrapezePhase_en )
 8002a0c:	4b9c      	ldr	r3, [pc, #624]	; (8002c80 <Nav_TrapezeAngularVelocity2+0x278>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b06      	cmp	r3, #6
 8002a12:	f200 81e0 	bhi.w	8002dd6 <Nav_TrapezeAngularVelocity2+0x3ce>
 8002a16:	a201      	add	r2, pc, #4	; (adr r2, 8002a1c <Nav_TrapezeAngularVelocity2+0x14>)
 8002a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1c:	08002dd5 	.word	0x08002dd5
 8002a20:	08002a39 	.word	0x08002a39
 8002a24:	08002b85 	.word	0x08002b85
 8002a28:	08002c17 	.word	0x08002c17
 8002a2c:	08002d23 	.word	0x08002d23
 8002a30:	08002d41 	.word	0x08002d41
 8002a34:	08002dbf 	.word	0x08002dbf
	{

	}break;
	case Nav_Trapeze_Accelerating_en:
	{
		Nav_ReferenceAngle_deg_d = ( Nav_TargetAngularVelocity_d * Nav_TargetAngularVelocity_d) / ( 2 * Nav_AngularAcc_d ) ;
 8002a38:	4b92      	ldr	r3, [pc, #584]	; (8002c84 <Nav_TrapezeAngularVelocity2+0x27c>)
 8002a3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a3e:	4b91      	ldr	r3, [pc, #580]	; (8002c84 <Nav_TrapezeAngularVelocity2+0x27c>)
 8002a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a44:	f7fd fd7c 	bl	8000540 <__aeabi_dmul>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4614      	mov	r4, r2
 8002a4e:	461d      	mov	r5, r3
 8002a50:	4b8d      	ldr	r3, [pc, #564]	; (8002c88 <Nav_TrapezeAngularVelocity2+0x280>)
 8002a52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	f7fd fbbb 	bl	80001d4 <__adddf3>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4620      	mov	r0, r4
 8002a64:	4629      	mov	r1, r5
 8002a66:	f7fd fe95 	bl	8000794 <__aeabi_ddiv>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4987      	ldr	r1, [pc, #540]	; (8002c8c <Nav_TrapezeAngularVelocity2+0x284>)
 8002a70:	e9c1 2300 	strd	r2, r3, [r1]

		if( Nav_RemainingAngle_deg_d < 2.0 )
 8002a74:	4b86      	ldr	r3, [pc, #536]	; (8002c90 <Nav_TrapezeAngularVelocity2+0x288>)
 8002a76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a82:	f7fd ffcf 	bl	8000a24 <__aeabi_dcmplt>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d038      	beq.n	8002afe <Nav_TrapezeAngularVelocity2+0xf6>
		{
			if( Nav_RemainingAngle_deg_d > Nav_ReferenceAngle_deg_d )
 8002a8c:	4b80      	ldr	r3, [pc, #512]	; (8002c90 <Nav_TrapezeAngularVelocity2+0x288>)
 8002a8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a92:	4b7e      	ldr	r3, [pc, #504]	; (8002c8c <Nav_TrapezeAngularVelocity2+0x284>)
 8002a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a98:	f7fd ffe2 	bl	8000a60 <__aeabi_dcmpgt>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d01e      	beq.n	8002ae0 <Nav_TrapezeAngularVelocity2+0xd8>
			{
				if ( Nav_TargetAngularVelocity_d < Nav_MaxAngularVelocity_d  )
 8002aa2:	4b78      	ldr	r3, [pc, #480]	; (8002c84 <Nav_TrapezeAngularVelocity2+0x27c>)
 8002aa4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002aa8:	4b7a      	ldr	r3, [pc, #488]	; (8002c94 <Nav_TrapezeAngularVelocity2+0x28c>)
 8002aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aae:	f7fd ffb9 	bl	8000a24 <__aeabi_dcmplt>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00f      	beq.n	8002ad8 <Nav_TrapezeAngularVelocity2+0xd0>
				{
					Nav_TargetAngularVelocity_d = Nav_AngularAcc_d * Nav_CurrentSample_u32 ;
 8002ab8:	4b77      	ldr	r3, [pc, #476]	; (8002c98 <Nav_TrapezeAngularVelocity2+0x290>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fd fcc5 	bl	800044c <__aeabi_ui2d>
 8002ac2:	4b71      	ldr	r3, [pc, #452]	; (8002c88 <Nav_TrapezeAngularVelocity2+0x280>)
 8002ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac8:	f7fd fd3a 	bl	8000540 <__aeabi_dmul>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	496c      	ldr	r1, [pc, #432]	; (8002c84 <Nav_TrapezeAngularVelocity2+0x27c>)
 8002ad2:	e9c1 2300 	strd	r2, r3, [r1]
				Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
			}
		}


	}break;
 8002ad6:	e17e      	b.n	8002dd6 <Nav_TrapezeAngularVelocity2+0x3ce>
					Nav_TrapezePhase_en = Nav_Trapeze_ConstantVelocity_en;
 8002ad8:	4b69      	ldr	r3, [pc, #420]	; (8002c80 <Nav_TrapezeAngularVelocity2+0x278>)
 8002ada:	2202      	movs	r2, #2
 8002adc:	701a      	strb	r2, [r3, #0]
	}break;
 8002ade:	e17a      	b.n	8002dd6 <Nav_TrapezeAngularVelocity2+0x3ce>
				Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 8002ae0:	4b6d      	ldr	r3, [pc, #436]	; (8002c98 <Nav_TrapezeAngularVelocity2+0x290>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	4a6d      	ldr	r2, [pc, #436]	; (8002c9c <Nav_TrapezeAngularVelocity2+0x294>)
 8002ae8:	6013      	str	r3, [r2, #0]
				Nav_ReferenceAngularVelocity_d = Nav_TargetAngularVelocity_d;
 8002aea:	4b66      	ldr	r3, [pc, #408]	; (8002c84 <Nav_TrapezeAngularVelocity2+0x27c>)
 8002aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af0:	496b      	ldr	r1, [pc, #428]	; (8002ca0 <Nav_TrapezeAngularVelocity2+0x298>)
 8002af2:	e9c1 2300 	strd	r2, r3, [r1]
				Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
 8002af6:	4b62      	ldr	r3, [pc, #392]	; (8002c80 <Nav_TrapezeAngularVelocity2+0x278>)
 8002af8:	2203      	movs	r2, #3
 8002afa:	701a      	strb	r2, [r3, #0]
	}break;
 8002afc:	e16b      	b.n	8002dd6 <Nav_TrapezeAngularVelocity2+0x3ce>
			if( Nav_RemainingAngle_deg_d > ( Nav_ReferenceAngle_deg_d + 2.0 ) )
 8002afe:	4b63      	ldr	r3, [pc, #396]	; (8002c8c <Nav_TrapezeAngularVelocity2+0x284>)
 8002b00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b0c:	f7fd fb62 	bl	80001d4 <__adddf3>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	4610      	mov	r0, r2
 8002b16:	4619      	mov	r1, r3
 8002b18:	4b5d      	ldr	r3, [pc, #372]	; (8002c90 <Nav_TrapezeAngularVelocity2+0x288>)
 8002b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1e:	f7fd ff81 	bl	8000a24 <__aeabi_dcmplt>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d01e      	beq.n	8002b66 <Nav_TrapezeAngularVelocity2+0x15e>
				if ( Nav_TargetAngularVelocity_d < Nav_MaxAngularVelocity_d  )
 8002b28:	4b56      	ldr	r3, [pc, #344]	; (8002c84 <Nav_TrapezeAngularVelocity2+0x27c>)
 8002b2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b2e:	4b59      	ldr	r3, [pc, #356]	; (8002c94 <Nav_TrapezeAngularVelocity2+0x28c>)
 8002b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b34:	f7fd ff76 	bl	8000a24 <__aeabi_dcmplt>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00f      	beq.n	8002b5e <Nav_TrapezeAngularVelocity2+0x156>
					Nav_TargetAngularVelocity_d = Nav_AngularAcc_d * Nav_CurrentSample_u32 ;
 8002b3e:	4b56      	ldr	r3, [pc, #344]	; (8002c98 <Nav_TrapezeAngularVelocity2+0x290>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fd fc82 	bl	800044c <__aeabi_ui2d>
 8002b48:	4b4f      	ldr	r3, [pc, #316]	; (8002c88 <Nav_TrapezeAngularVelocity2+0x280>)
 8002b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4e:	f7fd fcf7 	bl	8000540 <__aeabi_dmul>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	494b      	ldr	r1, [pc, #300]	; (8002c84 <Nav_TrapezeAngularVelocity2+0x27c>)
 8002b58:	e9c1 2300 	strd	r2, r3, [r1]
	}break;
 8002b5c:	e13b      	b.n	8002dd6 <Nav_TrapezeAngularVelocity2+0x3ce>
					Nav_TrapezePhase_en = Nav_Trapeze_ConstantVelocity_en;
 8002b5e:	4b48      	ldr	r3, [pc, #288]	; (8002c80 <Nav_TrapezeAngularVelocity2+0x278>)
 8002b60:	2202      	movs	r2, #2
 8002b62:	701a      	strb	r2, [r3, #0]
	}break;
 8002b64:	e137      	b.n	8002dd6 <Nav_TrapezeAngularVelocity2+0x3ce>
				Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 8002b66:	4b4c      	ldr	r3, [pc, #304]	; (8002c98 <Nav_TrapezeAngularVelocity2+0x290>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	4a4b      	ldr	r2, [pc, #300]	; (8002c9c <Nav_TrapezeAngularVelocity2+0x294>)
 8002b6e:	6013      	str	r3, [r2, #0]
				Nav_ReferenceAngularVelocity_d = Nav_TargetAngularVelocity_d;
 8002b70:	4b44      	ldr	r3, [pc, #272]	; (8002c84 <Nav_TrapezeAngularVelocity2+0x27c>)
 8002b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b76:	494a      	ldr	r1, [pc, #296]	; (8002ca0 <Nav_TrapezeAngularVelocity2+0x298>)
 8002b78:	e9c1 2300 	strd	r2, r3, [r1]
				Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
 8002b7c:	4b40      	ldr	r3, [pc, #256]	; (8002c80 <Nav_TrapezeAngularVelocity2+0x278>)
 8002b7e:	2203      	movs	r2, #3
 8002b80:	701a      	strb	r2, [r3, #0]
	}break;
 8002b82:	e128      	b.n	8002dd6 <Nav_TrapezeAngularVelocity2+0x3ce>

	case Nav_Trapeze_ConstantVelocity_en:
	{
		Nav_ReferenceAngle_deg_d = ( Nav_TargetAngularVelocity_d * Nav_TargetAngularVelocity_d) / ( 2 * Nav_AngularAcc_d ) ;
 8002b84:	4b3f      	ldr	r3, [pc, #252]	; (8002c84 <Nav_TrapezeAngularVelocity2+0x27c>)
 8002b86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b8a:	4b3e      	ldr	r3, [pc, #248]	; (8002c84 <Nav_TrapezeAngularVelocity2+0x27c>)
 8002b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b90:	f7fd fcd6 	bl	8000540 <__aeabi_dmul>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4614      	mov	r4, r2
 8002b9a:	461d      	mov	r5, r3
 8002b9c:	4b3a      	ldr	r3, [pc, #232]	; (8002c88 <Nav_TrapezeAngularVelocity2+0x280>)
 8002b9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	f7fd fb15 	bl	80001d4 <__adddf3>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4620      	mov	r0, r4
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	f7fd fdef 	bl	8000794 <__aeabi_ddiv>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4934      	ldr	r1, [pc, #208]	; (8002c8c <Nav_TrapezeAngularVelocity2+0x284>)
 8002bbc:	e9c1 2300 	strd	r2, r3, [r1]
		if( Nav_RemainingAngle_deg_d > ( Nav_ReferenceAngle_deg_d + 2.0 ) )
 8002bc0:	4b32      	ldr	r3, [pc, #200]	; (8002c8c <Nav_TrapezeAngularVelocity2+0x284>)
 8002bc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002bce:	f7fd fb01 	bl	80001d4 <__adddf3>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4b2d      	ldr	r3, [pc, #180]	; (8002c90 <Nav_TrapezeAngularVelocity2+0x288>)
 8002bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be0:	f7fd ff20 	bl	8000a24 <__aeabi_dcmplt>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d006      	beq.n	8002bf8 <Nav_TrapezeAngularVelocity2+0x1f0>
		{
			Nav_TargetAngularVelocity_d = Nav_MaxAngularVelocity_d ;
 8002bea:	4b2a      	ldr	r3, [pc, #168]	; (8002c94 <Nav_TrapezeAngularVelocity2+0x28c>)
 8002bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf0:	4924      	ldr	r1, [pc, #144]	; (8002c84 <Nav_TrapezeAngularVelocity2+0x27c>)
 8002bf2:	e9c1 2300 	strd	r2, r3, [r1]
		{
			Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
			Nav_ReferenceAngularVelocity_d = Nav_TargetAngularVelocity_d;
			Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
		}
	}break;
 8002bf6:	e0ee      	b.n	8002dd6 <Nav_TrapezeAngularVelocity2+0x3ce>
			Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 8002bf8:	4b27      	ldr	r3, [pc, #156]	; (8002c98 <Nav_TrapezeAngularVelocity2+0x290>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	4a27      	ldr	r2, [pc, #156]	; (8002c9c <Nav_TrapezeAngularVelocity2+0x294>)
 8002c00:	6013      	str	r3, [r2, #0]
			Nav_ReferenceAngularVelocity_d = Nav_TargetAngularVelocity_d;
 8002c02:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <Nav_TrapezeAngularVelocity2+0x27c>)
 8002c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c08:	4925      	ldr	r1, [pc, #148]	; (8002ca0 <Nav_TrapezeAngularVelocity2+0x298>)
 8002c0a:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
 8002c0e:	4b1c      	ldr	r3, [pc, #112]	; (8002c80 <Nav_TrapezeAngularVelocity2+0x278>)
 8002c10:	2203      	movs	r2, #3
 8002c12:	701a      	strb	r2, [r3, #0]
	}break;
 8002c14:	e0df      	b.n	8002dd6 <Nav_TrapezeAngularVelocity2+0x3ce>

	case Nav_Trapeze_Decelerating_en:
	{
		Nav_ReferenceAngle_deg_d = ( Nav_TargetAngularVelocity_d * Nav_TargetAngularVelocity_d) / ( 2 * Nav_AngularAcc_d ) ;
 8002c16:	4b1b      	ldr	r3, [pc, #108]	; (8002c84 <Nav_TrapezeAngularVelocity2+0x27c>)
 8002c18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c1c:	4b19      	ldr	r3, [pc, #100]	; (8002c84 <Nav_TrapezeAngularVelocity2+0x27c>)
 8002c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c22:	f7fd fc8d 	bl	8000540 <__aeabi_dmul>
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4614      	mov	r4, r2
 8002c2c:	461d      	mov	r5, r3
 8002c2e:	4b16      	ldr	r3, [pc, #88]	; (8002c88 <Nav_TrapezeAngularVelocity2+0x280>)
 8002c30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	f7fd facc 	bl	80001d4 <__adddf3>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4620      	mov	r0, r4
 8002c42:	4629      	mov	r1, r5
 8002c44:	f7fd fda6 	bl	8000794 <__aeabi_ddiv>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	490f      	ldr	r1, [pc, #60]	; (8002c8c <Nav_TrapezeAngularVelocity2+0x284>)
 8002c4e:	e9c1 2300 	strd	r2, r3, [r1]
		if( Nav_RemainingAngle_deg_d > Nav_ReferenceAngle_deg_d )
 8002c52:	4b0f      	ldr	r3, [pc, #60]	; (8002c90 <Nav_TrapezeAngularVelocity2+0x288>)
 8002c54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c58:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <Nav_TrapezeAngularVelocity2+0x284>)
 8002c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5e:	f7fd feff 	bl	8000a60 <__aeabi_dcmpgt>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d01d      	beq.n	8002ca4 <Nav_TrapezeAngularVelocity2+0x29c>
		{
			Nav_ReferenceAngularVelocity_d = Nav_TargetAngularVelocity_d;
 8002c68:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <Nav_TrapezeAngularVelocity2+0x27c>)
 8002c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6e:	490c      	ldr	r1, [pc, #48]	; (8002ca0 <Nav_TrapezeAngularVelocity2+0x298>)
 8002c70:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 8002c74:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <Nav_TrapezeAngularVelocity2+0x290>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	4a08      	ldr	r2, [pc, #32]	; (8002c9c <Nav_TrapezeAngularVelocity2+0x294>)
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	e02c      	b.n	8002cda <Nav_TrapezeAngularVelocity2+0x2d2>
 8002c80:	20000000 	.word	0x20000000
 8002c84:	200003f0 	.word	0x200003f0
 8002c88:	20000470 	.word	0x20000470
 8002c8c:	20000340 	.word	0x20000340
 8002c90:	20000360 	.word	0x20000360
 8002c94:	20000478 	.word	0x20000478
 8002c98:	20000480 	.word	0x20000480
 8002c9c:	20000484 	.word	0x20000484
 8002ca0:	200003f8 	.word	0x200003f8
		}
		else
		{
			Nav_TargetAngularVelocity_d = Nav_ReferenceAngularVelocity_d - ( Nav_AngularAcc_d * ( Nav_CurrentSample_u32 -Nav_AccelerationSamples_u32 ) )  ;
 8002ca4:	4b4d      	ldr	r3, [pc, #308]	; (8002ddc <Nav_TrapezeAngularVelocity2+0x3d4>)
 8002ca6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002caa:	4b4d      	ldr	r3, [pc, #308]	; (8002de0 <Nav_TrapezeAngularVelocity2+0x3d8>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	4b4d      	ldr	r3, [pc, #308]	; (8002de4 <Nav_TrapezeAngularVelocity2+0x3dc>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fd fbc9 	bl	800044c <__aeabi_ui2d>
 8002cba:	4b4b      	ldr	r3, [pc, #300]	; (8002de8 <Nav_TrapezeAngularVelocity2+0x3e0>)
 8002cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc0:	f7fd fc3e 	bl	8000540 <__aeabi_dmul>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4620      	mov	r0, r4
 8002cca:	4629      	mov	r1, r5
 8002ccc:	f7fd fa80 	bl	80001d0 <__aeabi_dsub>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4945      	ldr	r1, [pc, #276]	; (8002dec <Nav_TrapezeAngularVelocity2+0x3e4>)
 8002cd6:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if( ( Nav_RemainingAngle_deg_d <= 0.0 ) || (Nav_TargetAngularVelocity_d <= 0.0) )
 8002cda:	4b45      	ldr	r3, [pc, #276]	; (8002df0 <Nav_TrapezeAngularVelocity2+0x3e8>)
 8002cdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	f04f 0300 	mov.w	r3, #0
 8002ce8:	f7fd fea6 	bl	8000a38 <__aeabi_dcmple>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10c      	bne.n	8002d0c <Nav_TrapezeAngularVelocity2+0x304>
 8002cf2:	4b3e      	ldr	r3, [pc, #248]	; (8002dec <Nav_TrapezeAngularVelocity2+0x3e4>)
 8002cf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	f7fd fe9a 	bl	8000a38 <__aeabi_dcmple>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d100      	bne.n	8002d0c <Nav_TrapezeAngularVelocity2+0x304>
		{
			Nav_TargetAngularVelocity_d = 0 ;
			Nav_TrapezePhase_en = Nav_Trapeze_Finished_en ;
		}
	}break;
 8002d0a:	e064      	b.n	8002dd6 <Nav_TrapezeAngularVelocity2+0x3ce>
			Nav_TargetAngularVelocity_d = 0 ;
 8002d0c:	4937      	ldr	r1, [pc, #220]	; (8002dec <Nav_TrapezeAngularVelocity2+0x3e4>)
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TrapezePhase_en = Nav_Trapeze_Finished_en ;
 8002d1a:	4b36      	ldr	r3, [pc, #216]	; (8002df4 <Nav_TrapezeAngularVelocity2+0x3ec>)
 8002d1c:	2206      	movs	r2, #6
 8002d1e:	701a      	strb	r2, [r3, #0]
	}break;
 8002d20:	e059      	b.n	8002dd6 <Nav_TrapezeAngularVelocity2+0x3ce>
	case Nav_Trapeze_OrderUrgentDecelerating_en:
	{
		Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 8002d22:	4b2f      	ldr	r3, [pc, #188]	; (8002de0 <Nav_TrapezeAngularVelocity2+0x3d8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	4a2e      	ldr	r2, [pc, #184]	; (8002de4 <Nav_TrapezeAngularVelocity2+0x3dc>)
 8002d2a:	6013      	str	r3, [r2, #0]
		Nav_ReferenceLinearVelocity_d = Nav_TargetLinearVelocity_d;
 8002d2c:	4b32      	ldr	r3, [pc, #200]	; (8002df8 <Nav_TrapezeAngularVelocity2+0x3f0>)
 8002d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d32:	4932      	ldr	r1, [pc, #200]	; (8002dfc <Nav_TrapezeAngularVelocity2+0x3f4>)
 8002d34:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_TrapezePhase_en = Nav_Trapeze_UrgentDecelerating_en;
 8002d38:	4b2e      	ldr	r3, [pc, #184]	; (8002df4 <Nav_TrapezeAngularVelocity2+0x3ec>)
 8002d3a:	2205      	movs	r2, #5
 8002d3c:	701a      	strb	r2, [r3, #0]
	}break;
 8002d3e:	e04a      	b.n	8002dd6 <Nav_TrapezeAngularVelocity2+0x3ce>
	case Nav_Trapeze_UrgentDecelerating_en :
	{
		Nav_TargetAngularVelocity_d = Nav_ReferenceAngularVelocity_d - ( Nav_AngularAcc_d * ( Nav_CurrentSample_u32 -Nav_AccelerationSamples_u32 ) )  ;
 8002d40:	4b26      	ldr	r3, [pc, #152]	; (8002ddc <Nav_TrapezeAngularVelocity2+0x3d4>)
 8002d42:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002d46:	4b26      	ldr	r3, [pc, #152]	; (8002de0 <Nav_TrapezeAngularVelocity2+0x3d8>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	4b26      	ldr	r3, [pc, #152]	; (8002de4 <Nav_TrapezeAngularVelocity2+0x3dc>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fd fb7b 	bl	800044c <__aeabi_ui2d>
 8002d56:	4b24      	ldr	r3, [pc, #144]	; (8002de8 <Nav_TrapezeAngularVelocity2+0x3e0>)
 8002d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5c:	f7fd fbf0 	bl	8000540 <__aeabi_dmul>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4620      	mov	r0, r4
 8002d66:	4629      	mov	r1, r5
 8002d68:	f7fd fa32 	bl	80001d0 <__aeabi_dsub>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	491e      	ldr	r1, [pc, #120]	; (8002dec <Nav_TrapezeAngularVelocity2+0x3e4>)
 8002d72:	e9c1 2300 	strd	r2, r3, [r1]

		if( ( Nav_RemainingAngle_deg_d <= 0.0 ) || (Nav_TargetAngularVelocity_d <= 0.0) )
 8002d76:	4b1e      	ldr	r3, [pc, #120]	; (8002df0 <Nav_TrapezeAngularVelocity2+0x3e8>)
 8002d78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d7c:	f04f 0200 	mov.w	r2, #0
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	f7fd fe58 	bl	8000a38 <__aeabi_dcmple>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10c      	bne.n	8002da8 <Nav_TrapezeAngularVelocity2+0x3a0>
 8002d8e:	4b17      	ldr	r3, [pc, #92]	; (8002dec <Nav_TrapezeAngularVelocity2+0x3e4>)
 8002d90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	f7fd fe4c 	bl	8000a38 <__aeabi_dcmple>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d100      	bne.n	8002da8 <Nav_TrapezeAngularVelocity2+0x3a0>
		{
			Nav_TargetAngularVelocity_d = 0 ;
			Nav_TrapezePhase_en = Nav_Trapeze_Finished_en ;
		}
	}break ;
 8002da6:	e016      	b.n	8002dd6 <Nav_TrapezeAngularVelocity2+0x3ce>
			Nav_TargetAngularVelocity_d = 0 ;
 8002da8:	4910      	ldr	r1, [pc, #64]	; (8002dec <Nav_TrapezeAngularVelocity2+0x3e4>)
 8002daa:	f04f 0200 	mov.w	r2, #0
 8002dae:	f04f 0300 	mov.w	r3, #0
 8002db2:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TrapezePhase_en = Nav_Trapeze_Finished_en ;
 8002db6:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <Nav_TrapezeAngularVelocity2+0x3ec>)
 8002db8:	2206      	movs	r2, #6
 8002dba:	701a      	strb	r2, [r3, #0]
	}break ;
 8002dbc:	e00b      	b.n	8002dd6 <Nav_TrapezeAngularVelocity2+0x3ce>
	case Nav_Trapeze_Finished_en:
	{
		Nav_TargetAngularVelocity_d = 0.0 ;
 8002dbe:	490b      	ldr	r1, [pc, #44]	; (8002dec <Nav_TrapezeAngularVelocity2+0x3e4>)
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_TrapezePhase_en = Nav_Trapeze_Idle_en ;
 8002dcc:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <Nav_TrapezeAngularVelocity2+0x3ec>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	701a      	strb	r2, [r3, #0]
	}break;
 8002dd2:	e000      	b.n	8002dd6 <Nav_TrapezeAngularVelocity2+0x3ce>
	}break;
 8002dd4:	bf00      	nop

	}
}
 8002dd6:	bf00      	nop
 8002dd8:	bdb0      	pop	{r4, r5, r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	200003f8 	.word	0x200003f8
 8002de0:	20000480 	.word	0x20000480
 8002de4:	20000484 	.word	0x20000484
 8002de8:	20000470 	.word	0x20000470
 8002dec:	200003f0 	.word	0x200003f0
 8002df0:	20000360 	.word	0x20000360
 8002df4:	20000000 	.word	0x20000000
 8002df8:	200003e8 	.word	0x200003e8
 8002dfc:	20000418 	.word	0x20000418

08002e00 <Nav_TrapezeReverseAngularVelocity2>:

void Nav_TrapezeReverseAngularVelocity2()
{
 8002e00:	b5b0      	push	{r4, r5, r7, lr}
 8002e02:	af00      	add	r7, sp, #0
	switch( Nav_TrapezePhase_en )
 8002e04:	4b97      	ldr	r3, [pc, #604]	; (8003064 <Nav_TrapezeReverseAngularVelocity2+0x264>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b06      	cmp	r3, #6
 8002e0a:	f200 81d6 	bhi.w	80031ba <Nav_TrapezeReverseAngularVelocity2+0x3ba>
 8002e0e:	a201      	add	r2, pc, #4	; (adr r2, 8002e14 <Nav_TrapezeReverseAngularVelocity2+0x14>)
 8002e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e14:	080031b9 	.word	0x080031b9
 8002e18:	08002e31 	.word	0x08002e31
 8002e1c:	08002f7d 	.word	0x08002f7d
 8002e20:	08002ffb 	.word	0x08002ffb
 8002e24:	08003107 	.word	0x08003107
 8002e28:	08003125 	.word	0x08003125
 8002e2c:	080031a3 	.word	0x080031a3
	{

	}break;
	case Nav_Trapeze_Accelerating_en:
	{
		Nav_ReferenceAngle_deg_d = ( Nav_TargetAngularVelocity_d * Nav_TargetAngularVelocity_d) / ( 2 * Nav_AngularAcc_d ) ;
 8002e30:	4b8d      	ldr	r3, [pc, #564]	; (8003068 <Nav_TrapezeReverseAngularVelocity2+0x268>)
 8002e32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e36:	4b8c      	ldr	r3, [pc, #560]	; (8003068 <Nav_TrapezeReverseAngularVelocity2+0x268>)
 8002e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e3c:	f7fd fb80 	bl	8000540 <__aeabi_dmul>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	4614      	mov	r4, r2
 8002e46:	461d      	mov	r5, r3
 8002e48:	4b88      	ldr	r3, [pc, #544]	; (800306c <Nav_TrapezeReverseAngularVelocity2+0x26c>)
 8002e4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e4e:	4602      	mov	r2, r0
 8002e50:	460b      	mov	r3, r1
 8002e52:	f7fd f9bf 	bl	80001d4 <__adddf3>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4620      	mov	r0, r4
 8002e5c:	4629      	mov	r1, r5
 8002e5e:	f7fd fc99 	bl	8000794 <__aeabi_ddiv>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4982      	ldr	r1, [pc, #520]	; (8003070 <Nav_TrapezeReverseAngularVelocity2+0x270>)
 8002e68:	e9c1 2300 	strd	r2, r3, [r1]

		if( Nav_RemainingAngle_deg_d > (-2.0) )
 8002e6c:	4b81      	ldr	r3, [pc, #516]	; (8003074 <Nav_TrapezeReverseAngularVelocity2+0x274>)
 8002e6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8002e7a:	f7fd fdf1 	bl	8000a60 <__aeabi_dcmpgt>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d038      	beq.n	8002ef6 <Nav_TrapezeReverseAngularVelocity2+0xf6>
		{
			if( Nav_RemainingAngle_deg_d < Nav_ReferenceAngle_deg_d )
 8002e84:	4b7b      	ldr	r3, [pc, #492]	; (8003074 <Nav_TrapezeReverseAngularVelocity2+0x274>)
 8002e86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e8a:	4b79      	ldr	r3, [pc, #484]	; (8003070 <Nav_TrapezeReverseAngularVelocity2+0x270>)
 8002e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e90:	f7fd fdc8 	bl	8000a24 <__aeabi_dcmplt>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d01e      	beq.n	8002ed8 <Nav_TrapezeReverseAngularVelocity2+0xd8>
			{
				if ( Nav_TargetAngularVelocity_d > Nav_MaxAngularVelocity_d  )
 8002e9a:	4b73      	ldr	r3, [pc, #460]	; (8003068 <Nav_TrapezeReverseAngularVelocity2+0x268>)
 8002e9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ea0:	4b75      	ldr	r3, [pc, #468]	; (8003078 <Nav_TrapezeReverseAngularVelocity2+0x278>)
 8002ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea6:	f7fd fddb 	bl	8000a60 <__aeabi_dcmpgt>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00f      	beq.n	8002ed0 <Nav_TrapezeReverseAngularVelocity2+0xd0>
				{
					Nav_TargetAngularVelocity_d = Nav_AngularAcc_d * Nav_CurrentSample_u32 ;
 8002eb0:	4b72      	ldr	r3, [pc, #456]	; (800307c <Nav_TrapezeReverseAngularVelocity2+0x27c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fd fac9 	bl	800044c <__aeabi_ui2d>
 8002eba:	4b6c      	ldr	r3, [pc, #432]	; (800306c <Nav_TrapezeReverseAngularVelocity2+0x26c>)
 8002ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec0:	f7fd fb3e 	bl	8000540 <__aeabi_dmul>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4967      	ldr	r1, [pc, #412]	; (8003068 <Nav_TrapezeReverseAngularVelocity2+0x268>)
 8002eca:	e9c1 2300 	strd	r2, r3, [r1]
				Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
			}
		}


	}break;
 8002ece:	e174      	b.n	80031ba <Nav_TrapezeReverseAngularVelocity2+0x3ba>
					Nav_TrapezePhase_en = Nav_Trapeze_ConstantVelocity_en;
 8002ed0:	4b64      	ldr	r3, [pc, #400]	; (8003064 <Nav_TrapezeReverseAngularVelocity2+0x264>)
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	701a      	strb	r2, [r3, #0]
	}break;
 8002ed6:	e170      	b.n	80031ba <Nav_TrapezeReverseAngularVelocity2+0x3ba>
				Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 8002ed8:	4b68      	ldr	r3, [pc, #416]	; (800307c <Nav_TrapezeReverseAngularVelocity2+0x27c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	3b01      	subs	r3, #1
 8002ede:	4a68      	ldr	r2, [pc, #416]	; (8003080 <Nav_TrapezeReverseAngularVelocity2+0x280>)
 8002ee0:	6013      	str	r3, [r2, #0]
				Nav_ReferenceAngularVelocity_d = Nav_TargetAngularVelocity_d;
 8002ee2:	4b61      	ldr	r3, [pc, #388]	; (8003068 <Nav_TrapezeReverseAngularVelocity2+0x268>)
 8002ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee8:	4966      	ldr	r1, [pc, #408]	; (8003084 <Nav_TrapezeReverseAngularVelocity2+0x284>)
 8002eea:	e9c1 2300 	strd	r2, r3, [r1]
				Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
 8002eee:	4b5d      	ldr	r3, [pc, #372]	; (8003064 <Nav_TrapezeReverseAngularVelocity2+0x264>)
 8002ef0:	2203      	movs	r2, #3
 8002ef2:	701a      	strb	r2, [r3, #0]
	}break;
 8002ef4:	e161      	b.n	80031ba <Nav_TrapezeReverseAngularVelocity2+0x3ba>
			if( Nav_RemainingAngle_deg_d < ( Nav_ReferenceAngle_deg_d - 2.0 ) )
 8002ef6:	4b5e      	ldr	r3, [pc, #376]	; (8003070 <Nav_TrapezeReverseAngularVelocity2+0x270>)
 8002ef8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f04:	f7fd f964 	bl	80001d0 <__aeabi_dsub>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4b58      	ldr	r3, [pc, #352]	; (8003074 <Nav_TrapezeReverseAngularVelocity2+0x274>)
 8002f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f16:	f7fd fda3 	bl	8000a60 <__aeabi_dcmpgt>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d01e      	beq.n	8002f5e <Nav_TrapezeReverseAngularVelocity2+0x15e>
				if ( Nav_TargetAngularVelocity_d > Nav_MaxAngularVelocity_d  )
 8002f20:	4b51      	ldr	r3, [pc, #324]	; (8003068 <Nav_TrapezeReverseAngularVelocity2+0x268>)
 8002f22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f26:	4b54      	ldr	r3, [pc, #336]	; (8003078 <Nav_TrapezeReverseAngularVelocity2+0x278>)
 8002f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2c:	f7fd fd98 	bl	8000a60 <__aeabi_dcmpgt>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00f      	beq.n	8002f56 <Nav_TrapezeReverseAngularVelocity2+0x156>
					Nav_TargetAngularVelocity_d = Nav_AngularAcc_d * Nav_CurrentSample_u32 ;
 8002f36:	4b51      	ldr	r3, [pc, #324]	; (800307c <Nav_TrapezeReverseAngularVelocity2+0x27c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fd fa86 	bl	800044c <__aeabi_ui2d>
 8002f40:	4b4a      	ldr	r3, [pc, #296]	; (800306c <Nav_TrapezeReverseAngularVelocity2+0x26c>)
 8002f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f46:	f7fd fafb 	bl	8000540 <__aeabi_dmul>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4946      	ldr	r1, [pc, #280]	; (8003068 <Nav_TrapezeReverseAngularVelocity2+0x268>)
 8002f50:	e9c1 2300 	strd	r2, r3, [r1]
	}break;
 8002f54:	e131      	b.n	80031ba <Nav_TrapezeReverseAngularVelocity2+0x3ba>
					Nav_TrapezePhase_en = Nav_Trapeze_ConstantVelocity_en;
 8002f56:	4b43      	ldr	r3, [pc, #268]	; (8003064 <Nav_TrapezeReverseAngularVelocity2+0x264>)
 8002f58:	2202      	movs	r2, #2
 8002f5a:	701a      	strb	r2, [r3, #0]
	}break;
 8002f5c:	e12d      	b.n	80031ba <Nav_TrapezeReverseAngularVelocity2+0x3ba>
				Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 8002f5e:	4b47      	ldr	r3, [pc, #284]	; (800307c <Nav_TrapezeReverseAngularVelocity2+0x27c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	4a46      	ldr	r2, [pc, #280]	; (8003080 <Nav_TrapezeReverseAngularVelocity2+0x280>)
 8002f66:	6013      	str	r3, [r2, #0]
				Nav_ReferenceAngularVelocity_d = Nav_TargetAngularVelocity_d;
 8002f68:	4b3f      	ldr	r3, [pc, #252]	; (8003068 <Nav_TrapezeReverseAngularVelocity2+0x268>)
 8002f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6e:	4945      	ldr	r1, [pc, #276]	; (8003084 <Nav_TrapezeReverseAngularVelocity2+0x284>)
 8002f70:	e9c1 2300 	strd	r2, r3, [r1]
				Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
 8002f74:	4b3b      	ldr	r3, [pc, #236]	; (8003064 <Nav_TrapezeReverseAngularVelocity2+0x264>)
 8002f76:	2203      	movs	r2, #3
 8002f78:	701a      	strb	r2, [r3, #0]
	}break;
 8002f7a:	e11e      	b.n	80031ba <Nav_TrapezeReverseAngularVelocity2+0x3ba>

	case Nav_Trapeze_ConstantVelocity_en:
	{
		Nav_ReferenceAngle_deg_d = ( Nav_TargetAngularVelocity_d * Nav_TargetAngularVelocity_d) / ( 2 * Nav_AngularAcc_d ) ;
 8002f7c:	4b3a      	ldr	r3, [pc, #232]	; (8003068 <Nav_TrapezeReverseAngularVelocity2+0x268>)
 8002f7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f82:	4b39      	ldr	r3, [pc, #228]	; (8003068 <Nav_TrapezeReverseAngularVelocity2+0x268>)
 8002f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f88:	f7fd fada 	bl	8000540 <__aeabi_dmul>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4614      	mov	r4, r2
 8002f92:	461d      	mov	r5, r3
 8002f94:	4b35      	ldr	r3, [pc, #212]	; (800306c <Nav_TrapezeReverseAngularVelocity2+0x26c>)
 8002f96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	f7fd f919 	bl	80001d4 <__adddf3>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	4620      	mov	r0, r4
 8002fa8:	4629      	mov	r1, r5
 8002faa:	f7fd fbf3 	bl	8000794 <__aeabi_ddiv>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	492f      	ldr	r1, [pc, #188]	; (8003070 <Nav_TrapezeReverseAngularVelocity2+0x270>)
 8002fb4:	e9c1 2300 	strd	r2, r3, [r1]
		if( Nav_RemainingAngle_deg_d < ( Nav_ReferenceAngle_deg_d /*- 2.0*/ ))
 8002fb8:	4b2e      	ldr	r3, [pc, #184]	; (8003074 <Nav_TrapezeReverseAngularVelocity2+0x274>)
 8002fba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fbe:	4b2c      	ldr	r3, [pc, #176]	; (8003070 <Nav_TrapezeReverseAngularVelocity2+0x270>)
 8002fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc4:	f7fd fd2e 	bl	8000a24 <__aeabi_dcmplt>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d006      	beq.n	8002fdc <Nav_TrapezeReverseAngularVelocity2+0x1dc>
		{
			Nav_TargetAngularVelocity_d = Nav_MaxAngularVelocity_d ;
 8002fce:	4b2a      	ldr	r3, [pc, #168]	; (8003078 <Nav_TrapezeReverseAngularVelocity2+0x278>)
 8002fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd4:	4924      	ldr	r1, [pc, #144]	; (8003068 <Nav_TrapezeReverseAngularVelocity2+0x268>)
 8002fd6:	e9c1 2300 	strd	r2, r3, [r1]
		{
			Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
			Nav_ReferenceAngularVelocity_d = Nav_TargetAngularVelocity_d;
			Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
		}
	}break;
 8002fda:	e0ee      	b.n	80031ba <Nav_TrapezeReverseAngularVelocity2+0x3ba>
			Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 8002fdc:	4b27      	ldr	r3, [pc, #156]	; (800307c <Nav_TrapezeReverseAngularVelocity2+0x27c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	4a27      	ldr	r2, [pc, #156]	; (8003080 <Nav_TrapezeReverseAngularVelocity2+0x280>)
 8002fe4:	6013      	str	r3, [r2, #0]
			Nav_ReferenceAngularVelocity_d = Nav_TargetAngularVelocity_d;
 8002fe6:	4b20      	ldr	r3, [pc, #128]	; (8003068 <Nav_TrapezeReverseAngularVelocity2+0x268>)
 8002fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fec:	4925      	ldr	r1, [pc, #148]	; (8003084 <Nav_TrapezeReverseAngularVelocity2+0x284>)
 8002fee:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
 8002ff2:	4b1c      	ldr	r3, [pc, #112]	; (8003064 <Nav_TrapezeReverseAngularVelocity2+0x264>)
 8002ff4:	2203      	movs	r2, #3
 8002ff6:	701a      	strb	r2, [r3, #0]
	}break;
 8002ff8:	e0df      	b.n	80031ba <Nav_TrapezeReverseAngularVelocity2+0x3ba>

	case Nav_Trapeze_Decelerating_en:
	{
		Nav_ReferenceAngle_deg_d = ( Nav_TargetAngularVelocity_d * Nav_TargetAngularVelocity_d) / ( 2 * Nav_AngularAcc_d ) ;
 8002ffa:	4b1b      	ldr	r3, [pc, #108]	; (8003068 <Nav_TrapezeReverseAngularVelocity2+0x268>)
 8002ffc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003000:	4b19      	ldr	r3, [pc, #100]	; (8003068 <Nav_TrapezeReverseAngularVelocity2+0x268>)
 8003002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003006:	f7fd fa9b 	bl	8000540 <__aeabi_dmul>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	4614      	mov	r4, r2
 8003010:	461d      	mov	r5, r3
 8003012:	4b16      	ldr	r3, [pc, #88]	; (800306c <Nav_TrapezeReverseAngularVelocity2+0x26c>)
 8003014:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	f7fd f8da 	bl	80001d4 <__adddf3>
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	4620      	mov	r0, r4
 8003026:	4629      	mov	r1, r5
 8003028:	f7fd fbb4 	bl	8000794 <__aeabi_ddiv>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	490f      	ldr	r1, [pc, #60]	; (8003070 <Nav_TrapezeReverseAngularVelocity2+0x270>)
 8003032:	e9c1 2300 	strd	r2, r3, [r1]
		if( Nav_RemainingAngle_deg_d < Nav_ReferenceAngle_deg_d )
 8003036:	4b0f      	ldr	r3, [pc, #60]	; (8003074 <Nav_TrapezeReverseAngularVelocity2+0x274>)
 8003038:	e9d3 0100 	ldrd	r0, r1, [r3]
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <Nav_TrapezeReverseAngularVelocity2+0x270>)
 800303e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003042:	f7fd fcef 	bl	8000a24 <__aeabi_dcmplt>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d01d      	beq.n	8003088 <Nav_TrapezeReverseAngularVelocity2+0x288>
		{
			Nav_ReferenceAngularVelocity_d = Nav_TargetAngularVelocity_d;
 800304c:	4b06      	ldr	r3, [pc, #24]	; (8003068 <Nav_TrapezeReverseAngularVelocity2+0x268>)
 800304e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003052:	490c      	ldr	r1, [pc, #48]	; (8003084 <Nav_TrapezeReverseAngularVelocity2+0x284>)
 8003054:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 8003058:	4b08      	ldr	r3, [pc, #32]	; (800307c <Nav_TrapezeReverseAngularVelocity2+0x27c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	3b01      	subs	r3, #1
 800305e:	4a08      	ldr	r2, [pc, #32]	; (8003080 <Nav_TrapezeReverseAngularVelocity2+0x280>)
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	e02c      	b.n	80030be <Nav_TrapezeReverseAngularVelocity2+0x2be>
 8003064:	20000000 	.word	0x20000000
 8003068:	200003f0 	.word	0x200003f0
 800306c:	20000470 	.word	0x20000470
 8003070:	20000340 	.word	0x20000340
 8003074:	20000360 	.word	0x20000360
 8003078:	20000478 	.word	0x20000478
 800307c:	20000480 	.word	0x20000480
 8003080:	20000484 	.word	0x20000484
 8003084:	200003f8 	.word	0x200003f8
		}
		else
		{
			Nav_TargetAngularVelocity_d = Nav_ReferenceAngularVelocity_d - ( Nav_AngularAcc_d * ( Nav_CurrentSample_u32 -Nav_AccelerationSamples_u32 ) )  ;
 8003088:	4b4d      	ldr	r3, [pc, #308]	; (80031c0 <Nav_TrapezeReverseAngularVelocity2+0x3c0>)
 800308a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800308e:	4b4d      	ldr	r3, [pc, #308]	; (80031c4 <Nav_TrapezeReverseAngularVelocity2+0x3c4>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	4b4d      	ldr	r3, [pc, #308]	; (80031c8 <Nav_TrapezeReverseAngularVelocity2+0x3c8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	4618      	mov	r0, r3
 800309a:	f7fd f9d7 	bl	800044c <__aeabi_ui2d>
 800309e:	4b4b      	ldr	r3, [pc, #300]	; (80031cc <Nav_TrapezeReverseAngularVelocity2+0x3cc>)
 80030a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a4:	f7fd fa4c 	bl	8000540 <__aeabi_dmul>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4620      	mov	r0, r4
 80030ae:	4629      	mov	r1, r5
 80030b0:	f7fd f88e 	bl	80001d0 <__aeabi_dsub>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4945      	ldr	r1, [pc, #276]	; (80031d0 <Nav_TrapezeReverseAngularVelocity2+0x3d0>)
 80030ba:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if( ( Nav_RemainingAngle_deg_d >= 0.0 ) || (Nav_TargetAngularVelocity_d >= 0.0) )
 80030be:	4b45      	ldr	r3, [pc, #276]	; (80031d4 <Nav_TrapezeReverseAngularVelocity2+0x3d4>)
 80030c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	f7fd fcbe 	bl	8000a4c <__aeabi_dcmpge>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10c      	bne.n	80030f0 <Nav_TrapezeReverseAngularVelocity2+0x2f0>
 80030d6:	4b3e      	ldr	r3, [pc, #248]	; (80031d0 <Nav_TrapezeReverseAngularVelocity2+0x3d0>)
 80030d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	f04f 0300 	mov.w	r3, #0
 80030e4:	f7fd fcb2 	bl	8000a4c <__aeabi_dcmpge>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d100      	bne.n	80030f0 <Nav_TrapezeReverseAngularVelocity2+0x2f0>
		{
			Nav_TargetAngularVelocity_d = 0 ;
			Nav_TrapezePhase_en = Nav_Trapeze_Finished_en ;
		}
	}break;
 80030ee:	e064      	b.n	80031ba <Nav_TrapezeReverseAngularVelocity2+0x3ba>
			Nav_TargetAngularVelocity_d = 0 ;
 80030f0:	4937      	ldr	r1, [pc, #220]	; (80031d0 <Nav_TrapezeReverseAngularVelocity2+0x3d0>)
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	f04f 0300 	mov.w	r3, #0
 80030fa:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TrapezePhase_en = Nav_Trapeze_Finished_en ;
 80030fe:	4b36      	ldr	r3, [pc, #216]	; (80031d8 <Nav_TrapezeReverseAngularVelocity2+0x3d8>)
 8003100:	2206      	movs	r2, #6
 8003102:	701a      	strb	r2, [r3, #0]
	}break;
 8003104:	e059      	b.n	80031ba <Nav_TrapezeReverseAngularVelocity2+0x3ba>
	case Nav_Trapeze_OrderUrgentDecelerating_en:
	{
		Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 8003106:	4b2f      	ldr	r3, [pc, #188]	; (80031c4 <Nav_TrapezeReverseAngularVelocity2+0x3c4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	3b01      	subs	r3, #1
 800310c:	4a2e      	ldr	r2, [pc, #184]	; (80031c8 <Nav_TrapezeReverseAngularVelocity2+0x3c8>)
 800310e:	6013      	str	r3, [r2, #0]
		Nav_ReferenceLinearVelocity_d = Nav_TargetLinearVelocity_d;
 8003110:	4b32      	ldr	r3, [pc, #200]	; (80031dc <Nav_TrapezeReverseAngularVelocity2+0x3dc>)
 8003112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003116:	4932      	ldr	r1, [pc, #200]	; (80031e0 <Nav_TrapezeReverseAngularVelocity2+0x3e0>)
 8003118:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_TrapezePhase_en = Nav_Trapeze_UrgentDecelerating_en;
 800311c:	4b2e      	ldr	r3, [pc, #184]	; (80031d8 <Nav_TrapezeReverseAngularVelocity2+0x3d8>)
 800311e:	2205      	movs	r2, #5
 8003120:	701a      	strb	r2, [r3, #0]
	}break;
 8003122:	e04a      	b.n	80031ba <Nav_TrapezeReverseAngularVelocity2+0x3ba>
	case Nav_Trapeze_UrgentDecelerating_en :
	{
		Nav_TargetAngularVelocity_d = Nav_ReferenceAngularVelocity_d - ( Nav_AngularAcc_d * ( Nav_CurrentSample_u32 -Nav_AccelerationSamples_u32 ) )  ;
 8003124:	4b26      	ldr	r3, [pc, #152]	; (80031c0 <Nav_TrapezeReverseAngularVelocity2+0x3c0>)
 8003126:	e9d3 4500 	ldrd	r4, r5, [r3]
 800312a:	4b26      	ldr	r3, [pc, #152]	; (80031c4 <Nav_TrapezeReverseAngularVelocity2+0x3c4>)
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	4b26      	ldr	r3, [pc, #152]	; (80031c8 <Nav_TrapezeReverseAngularVelocity2+0x3c8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	4618      	mov	r0, r3
 8003136:	f7fd f989 	bl	800044c <__aeabi_ui2d>
 800313a:	4b24      	ldr	r3, [pc, #144]	; (80031cc <Nav_TrapezeReverseAngularVelocity2+0x3cc>)
 800313c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003140:	f7fd f9fe 	bl	8000540 <__aeabi_dmul>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4620      	mov	r0, r4
 800314a:	4629      	mov	r1, r5
 800314c:	f7fd f840 	bl	80001d0 <__aeabi_dsub>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	491e      	ldr	r1, [pc, #120]	; (80031d0 <Nav_TrapezeReverseAngularVelocity2+0x3d0>)
 8003156:	e9c1 2300 	strd	r2, r3, [r1]
		if( ( Nav_RemainingAngle_deg_d >= 0.0 ) || (Nav_TargetAngularVelocity_d >= 0.0) )
 800315a:	4b1e      	ldr	r3, [pc, #120]	; (80031d4 <Nav_TrapezeReverseAngularVelocity2+0x3d4>)
 800315c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	f04f 0300 	mov.w	r3, #0
 8003168:	f7fd fc70 	bl	8000a4c <__aeabi_dcmpge>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10c      	bne.n	800318c <Nav_TrapezeReverseAngularVelocity2+0x38c>
 8003172:	4b17      	ldr	r3, [pc, #92]	; (80031d0 <Nav_TrapezeReverseAngularVelocity2+0x3d0>)
 8003174:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	f04f 0300 	mov.w	r3, #0
 8003180:	f7fd fc64 	bl	8000a4c <__aeabi_dcmpge>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d100      	bne.n	800318c <Nav_TrapezeReverseAngularVelocity2+0x38c>
		{
			Nav_TargetAngularVelocity_d = 0 ;
			Nav_TrapezePhase_en = Nav_Trapeze_Finished_en ;
		}

	}break;
 800318a:	e016      	b.n	80031ba <Nav_TrapezeReverseAngularVelocity2+0x3ba>
			Nav_TargetAngularVelocity_d = 0 ;
 800318c:	4910      	ldr	r1, [pc, #64]	; (80031d0 <Nav_TrapezeReverseAngularVelocity2+0x3d0>)
 800318e:	f04f 0200 	mov.w	r2, #0
 8003192:	f04f 0300 	mov.w	r3, #0
 8003196:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TrapezePhase_en = Nav_Trapeze_Finished_en ;
 800319a:	4b0f      	ldr	r3, [pc, #60]	; (80031d8 <Nav_TrapezeReverseAngularVelocity2+0x3d8>)
 800319c:	2206      	movs	r2, #6
 800319e:	701a      	strb	r2, [r3, #0]
	}break;
 80031a0:	e00b      	b.n	80031ba <Nav_TrapezeReverseAngularVelocity2+0x3ba>

	case Nav_Trapeze_Finished_en:
	{
		Nav_TargetAngularVelocity_d = 0.0 ;
 80031a2:	490b      	ldr	r1, [pc, #44]	; (80031d0 <Nav_TrapezeReverseAngularVelocity2+0x3d0>)
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_TrapezePhase_en = Nav_Trapeze_Idle_en ;
 80031b0:	4b09      	ldr	r3, [pc, #36]	; (80031d8 <Nav_TrapezeReverseAngularVelocity2+0x3d8>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	701a      	strb	r2, [r3, #0]
	}break;
 80031b6:	e000      	b.n	80031ba <Nav_TrapezeReverseAngularVelocity2+0x3ba>
	}break;
 80031b8:	bf00      	nop

	}

}
 80031ba:	bf00      	nop
 80031bc:	bdb0      	pop	{r4, r5, r7, pc}
 80031be:	bf00      	nop
 80031c0:	200003f8 	.word	0x200003f8
 80031c4:	20000480 	.word	0x20000480
 80031c8:	20000484 	.word	0x20000484
 80031cc:	20000470 	.word	0x20000470
 80031d0:	200003f0 	.word	0x200003f0
 80031d4:	20000360 	.word	0x20000360
 80031d8:	20000000 	.word	0x20000000
 80031dc:	200003e8 	.word	0x200003e8
 80031e0:	20000418 	.word	0x20000418

080031e4 <Nav_vTargetDistanceCalculationRoutine>:



void Nav_vTargetDistanceCalculationRoutine()
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
	Nav_CurrentTargetDistance_mm_d = Nav_PrevTargetDistance_mm_d + Nav_TargetLinearVelocity_d ;
 80031e8:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <Nav_vTargetDistanceCalculationRoutine+0x30>)
 80031ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031ee:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <Nav_vTargetDistanceCalculationRoutine+0x34>)
 80031f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f4:	f7fc ffee 	bl	80001d4 <__adddf3>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	4907      	ldr	r1, [pc, #28]	; (800321c <Nav_vTargetDistanceCalculationRoutine+0x38>)
 80031fe:	e9c1 2300 	strd	r2, r3, [r1]
	Nav_PrevTargetDistance_mm_d = Nav_CurrentTargetDistance_mm_d ;
 8003202:	4b06      	ldr	r3, [pc, #24]	; (800321c <Nav_vTargetDistanceCalculationRoutine+0x38>)
 8003204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003208:	4902      	ldr	r1, [pc, #8]	; (8003214 <Nav_vTargetDistanceCalculationRoutine+0x30>)
 800320a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800320e:	bf00      	nop
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	200003c8 	.word	0x200003c8
 8003218:	200003e8 	.word	0x200003e8
 800321c:	200003c0 	.word	0x200003c0

08003220 <Nav_vTargetAngleCalculationRoutine>:

void Nav_vTargetAngleCalculationRoutine()
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
	Nav_CurrentTargetAngle_deg_d = Nav_PrevTargetAngle_deg_d + Nav_TargetAngularVelocity_d ;
 8003224:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <Nav_vTargetAngleCalculationRoutine+0x30>)
 8003226:	e9d3 0100 	ldrd	r0, r1, [r3]
 800322a:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <Nav_vTargetAngleCalculationRoutine+0x34>)
 800322c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003230:	f7fc ffd0 	bl	80001d4 <__adddf3>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	4907      	ldr	r1, [pc, #28]	; (8003258 <Nav_vTargetAngleCalculationRoutine+0x38>)
 800323a:	e9c1 2300 	strd	r2, r3, [r1]
	Nav_PrevTargetAngle_deg_d = Nav_CurrentTargetAngle_deg_d;
 800323e:	4b06      	ldr	r3, [pc, #24]	; (8003258 <Nav_vTargetAngleCalculationRoutine+0x38>)
 8003240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003244:	4902      	ldr	r1, [pc, #8]	; (8003250 <Nav_vTargetAngleCalculationRoutine+0x30>)
 8003246:	e9c1 2300 	strd	r2, r3, [r1]
}
 800324a:	bf00      	nop
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	200003e0 	.word	0x200003e0
 8003254:	200003f0 	.word	0x200003f0
 8003258:	200003d8 	.word	0x200003d8
 800325c:	00000000 	.word	0x00000000

08003260 <Nav_vWallAlign>:
		Nav_PrevAngle_rad_d -=  ((double) M_2PI );
	}
}

void Nav_vWallAlign()
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
	switch(Nav_WallAlignState_en)
 8003264:	4b80      	ldr	r3, [pc, #512]	; (8003468 <Nav_vWallAlign+0x208>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b05      	cmp	r3, #5
 800326a:	f200 81ab 	bhi.w	80035c4 <Nav_vWallAlign+0x364>
 800326e:	a201      	add	r2, pc, #4	; (adr r2, 8003274 <Nav_vWallAlign+0x14>)
 8003270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003274:	080035bf 	.word	0x080035bf
 8003278:	0800328d 	.word	0x0800328d
 800327c:	08003323 	.word	0x08003323
 8003280:	080033bd 	.word	0x080033bd
 8003284:	080034d9 	.word	0x080034d9
 8003288:	080035b7 	.word	0x080035b7

	}break;
	case Nav_WallAlign_ResetVariables_en :
	{
		//reset the current sample
		Nav_CurrentSample_u32 = 0;
 800328c:	4b77      	ldr	r3, [pc, #476]	; (800346c <Nav_vWallAlign+0x20c>)
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]
		Nav_TrapezePhase_en = Nav_Trapeze_Accelerating_en;
 8003292:	4b77      	ldr	r3, [pc, #476]	; (8003470 <Nav_vWallAlign+0x210>)
 8003294:	2201      	movs	r2, #1
 8003296:	701a      	strb	r2, [r3, #0]
		//reset measuring variables
		ENCODER_RIGHT->CNT = ENCODER_RIGHT->ARR / 2 ;
 8003298:	4b76      	ldr	r3, [pc, #472]	; (8003474 <Nav_vWallAlign+0x214>)
 800329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329c:	4a75      	ldr	r2, [pc, #468]	; (8003474 <Nav_vWallAlign+0x214>)
 800329e:	085b      	lsrs	r3, r3, #1
 80032a0:	6253      	str	r3, [r2, #36]	; 0x24
		ENCODER_LEFT->CNT = ENCODER_LEFT->ARR / 2 ;
 80032a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032ac:	085b      	lsrs	r3, r3, #1
 80032ae:	6253      	str	r3, [r2, #36]	; 0x24
		Nav_PrevMeasuredDistance_mm_d = 0.0 ;
 80032b0:	4971      	ldr	r1, [pc, #452]	; (8003478 <Nav_vWallAlign+0x218>)
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_PrevMeasuredAngle_rad_d   = 0.0 ;
 80032be:	496f      	ldr	r1, [pc, #444]	; (800347c <Nav_vWallAlign+0x21c>)
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	f04f 0300 	mov.w	r3, #0
 80032c8:	e9c1 2300 	strd	r2, r3, [r1]
		//Nav_PrevMeasuredAngle_deg_d   = 0.0 ;
		Nav_vFeedbackRoutine();
 80032cc:	f7fd fd88 	bl	8000de0 <Nav_vFeedbackRoutine>

		//reset the Target Distance variables
		Nav_CurrentTargetDistance_mm_d = 0.0 ;
 80032d0:	496b      	ldr	r1, [pc, #428]	; (8003480 <Nav_vWallAlign+0x220>)
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_PrevTargetDistance_mm_d = 0.0 ;
 80032de:	4969      	ldr	r1, [pc, #420]	; (8003484 <Nav_vWallAlign+0x224>)
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	e9c1 2300 	strd	r2, r3, [r1]

		Nav_PrevTargetAngle_deg_d = Nav_CurrentTargetAngle_deg_d;
 80032ec:	4b66      	ldr	r3, [pc, #408]	; (8003488 <Nav_vWallAlign+0x228>)
 80032ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f2:	4966      	ldr	r1, [pc, #408]	; (800348c <Nav_vWallAlign+0x22c>)
 80032f4:	e9c1 2300 	strd	r2, r3, [r1]

		//reset the pid variables
		Nav_SumDistanceError_d = 0.0 ;
 80032f8:	4965      	ldr	r1, [pc, #404]	; (8003490 <Nav_vWallAlign+0x230>)
 80032fa:	f04f 0200 	mov.w	r2, #0
 80032fe:	f04f 0300 	mov.w	r3, #0
 8003302:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_SumAngleError_d = 0.0 ;
 8003306:	4963      	ldr	r1, [pc, #396]	; (8003494 <Nav_vWallAlign+0x234>)
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_Counter_u32 = 0;
 8003314:	4b60      	ldr	r3, [pc, #384]	; (8003498 <Nav_vWallAlign+0x238>)
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]

		Nav_WallAlignState_en = Nav_WallAlign_SetTarget_en;
 800331a:	4b53      	ldr	r3, [pc, #332]	; (8003468 <Nav_vWallAlign+0x208>)
 800331c:	2202      	movs	r2, #2
 800331e:	701a      	strb	r2, [r3, #0]
	}break;
 8003320:	e150      	b.n	80035c4 <Nav_vWallAlign+0x364>

	case Nav_WallAlign_SetTarget_en :
	{
		Nav_MaxVelocity_d = Nav_MaxVelocity_d * SAMPLING_PERIOD ;
 8003322:	4b5e      	ldr	r3, [pc, #376]	; (800349c <Nav_vWallAlign+0x23c>)
 8003324:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003328:	a349      	add	r3, pc, #292	; (adr r3, 8003450 <Nav_vWallAlign+0x1f0>)
 800332a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332e:	f7fd f907 	bl	8000540 <__aeabi_dmul>
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	4959      	ldr	r1, [pc, #356]	; (800349c <Nav_vWallAlign+0x23c>)
 8003338:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_Acc_d = Nav_Acc_d * SAMPLING_PERIOD * SAMPLING_PERIOD ;
 800333c:	4b58      	ldr	r3, [pc, #352]	; (80034a0 <Nav_vWallAlign+0x240>)
 800333e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003342:	a343      	add	r3, pc, #268	; (adr r3, 8003450 <Nav_vWallAlign+0x1f0>)
 8003344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003348:	f7fd f8fa 	bl	8000540 <__aeabi_dmul>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4610      	mov	r0, r2
 8003352:	4619      	mov	r1, r3
 8003354:	a33e      	add	r3, pc, #248	; (adr r3, 8003450 <Nav_vWallAlign+0x1f0>)
 8003356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335a:	f7fd f8f1 	bl	8000540 <__aeabi_dmul>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	494f      	ldr	r1, [pc, #316]	; (80034a0 <Nav_vWallAlign+0x240>)
 8003364:	e9c1 2300 	strd	r2, r3, [r1]
		REVERSE_LINEAR_TRAJECTORY_PID
 8003368:	494e      	ldr	r1, [pc, #312]	; (80034a4 <Nav_vWallAlign+0x244>)
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	4b4e      	ldr	r3, [pc, #312]	; (80034a8 <Nav_vWallAlign+0x248>)
 8003370:	e9c1 2300 	strd	r2, r3, [r1]
 8003374:	494d      	ldr	r1, [pc, #308]	; (80034ac <Nav_vWallAlign+0x24c>)
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	e9c1 2300 	strd	r2, r3, [r1]
 8003382:	494b      	ldr	r1, [pc, #300]	; (80034b0 <Nav_vWallAlign+0x250>)
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	4b4a      	ldr	r3, [pc, #296]	; (80034b4 <Nav_vWallAlign+0x254>)
 800338a:	e9c1 2300 	strd	r2, r3, [r1]
 800338e:	494a      	ldr	r1, [pc, #296]	; (80034b8 <Nav_vWallAlign+0x258>)
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	4b49      	ldr	r3, [pc, #292]	; (80034bc <Nav_vWallAlign+0x25c>)
 8003396:	e9c1 2300 	strd	r2, r3, [r1]
 800339a:	4949      	ldr	r1, [pc, #292]	; (80034c0 <Nav_vWallAlign+0x260>)
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	e9c1 2300 	strd	r2, r3, [r1]
 80033a8:	4946      	ldr	r1, [pc, #280]	; (80034c4 <Nav_vWallAlign+0x264>)
 80033aa:	a32b      	add	r3, pc, #172	; (adr r3, 8003458 <Nav_vWallAlign+0x1f8>)
 80033ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b0:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_WallAlignState_en = Nav_WallAlign_ConstantVelocityMove_en;
 80033b4:	4b2c      	ldr	r3, [pc, #176]	; (8003468 <Nav_vWallAlign+0x208>)
 80033b6:	2203      	movs	r2, #3
 80033b8:	701a      	strb	r2, [r3, #0]


	}break;
 80033ba:	e103      	b.n	80035c4 <Nav_vWallAlign+0x364>
	case Nav_WallAlign_ConstantVelocityMove_en :
	{
		Nav_CurrentSample_u32++;
 80033bc:	4b2b      	ldr	r3, [pc, #172]	; (800346c <Nav_vWallAlign+0x20c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	3301      	adds	r3, #1
 80033c2:	4a2a      	ldr	r2, [pc, #168]	; (800346c <Nav_vWallAlign+0x20c>)
 80033c4:	6013      	str	r3, [r2, #0]
		Nav_RemainingDistance_mm_d = -1000.0;
 80033c6:	4940      	ldr	r1, [pc, #256]	; (80034c8 <Nav_vWallAlign+0x268>)
 80033c8:	a325      	add	r3, pc, #148	; (adr r3, 8003460 <Nav_vWallAlign+0x200>)
 80033ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ce:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_TrapezeReverseLinearVelocity2();
 80033d2:	f7ff f92d 	bl	8002630 <Nav_TrapezeReverseLinearVelocity2>
		Nav_vTargetDistanceCalculationRoutine();
 80033d6:	f7ff ff05 	bl	80031e4 <Nav_vTargetDistanceCalculationRoutine>
		if(  ( Nav_CurrentSample_u32 >  100  )
 80033da:	4b24      	ldr	r3, [pc, #144]	; (800346c <Nav_vWallAlign+0x20c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b64      	cmp	r3, #100	; 0x64
 80033e0:	d91d      	bls.n	800341e <Nav_vWallAlign+0x1be>
				&& ( Nav_MeasuredVelocity_mm_d == 0 )
 80033e2:	4b3a      	ldr	r3, [pc, #232]	; (80034cc <Nav_vWallAlign+0x26c>)
 80033e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	f7fd fb0e 	bl	8000a10 <__aeabi_dcmpeq>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d011      	beq.n	800341e <Nav_vWallAlign+0x1be>
				&& ( Nav_MeasuredAngularVelocity_deg_d == 0 ))
 80033fa:	4b35      	ldr	r3, [pc, #212]	; (80034d0 <Nav_vWallAlign+0x270>)
 80033fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	f7fd fb02 	bl	8000a10 <__aeabi_dcmpeq>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d005      	beq.n	800341e <Nav_vWallAlign+0x1be>
		{
			Nav_Counter_u32++;
 8003412:	4b21      	ldr	r3, [pc, #132]	; (8003498 <Nav_vWallAlign+0x238>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	3301      	adds	r3, #1
 8003418:	4a1f      	ldr	r2, [pc, #124]	; (8003498 <Nav_vWallAlign+0x238>)
 800341a:	6013      	str	r3, [r2, #0]
 800341c:	e002      	b.n	8003424 <Nav_vWallAlign+0x1c4>
		}
		else
		{
			Nav_Counter_u32 = 0;
 800341e:	4b1e      	ldr	r3, [pc, #120]	; (8003498 <Nav_vWallAlign+0x238>)
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
		}
		if  ( Nav_Counter_u32 > 3 )
 8003424:	4b1c      	ldr	r3, [pc, #112]	; (8003498 <Nav_vWallAlign+0x238>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b03      	cmp	r3, #3
 800342a:	f240 80ca 	bls.w	80035c2 <Nav_vWallAlign+0x362>
		{
			Nav_TargetLinearVelocity_d = 0.0 ;
 800342e:	4929      	ldr	r1, [pc, #164]	; (80034d4 <Nav_vWallAlign+0x274>)
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	f04f 0300 	mov.w	r3, #0
 8003438:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TrapezePhase_en = Nav_Trapeze_Idle_en ;
 800343c:	4b0c      	ldr	r3, [pc, #48]	; (8003470 <Nav_vWallAlign+0x210>)
 800343e:	2200      	movs	r2, #0
 8003440:	701a      	strb	r2, [r3, #0]
			Nav_WallAlignState_en = Nav_WallAlign_ArrivedAtWall_en;
 8003442:	4b09      	ldr	r3, [pc, #36]	; (8003468 <Nav_vWallAlign+0x208>)
 8003444:	2204      	movs	r2, #4
 8003446:	701a      	strb	r2, [r3, #0]
		}

	}break;
 8003448:	e0bb      	b.n	80035c2 <Nav_vWallAlign+0x362>
 800344a:	bf00      	nop
 800344c:	f3af 8000 	nop.w
 8003450:	47ae147b 	.word	0x47ae147b
 8003454:	3f747ae1 	.word	0x3f747ae1
 8003458:	00000000 	.word	0x00000000
 800345c:	408f3800 	.word	0x408f3800
 8003460:	00000000 	.word	0x00000000
 8003464:	c08f4000 	.word	0xc08f4000
 8003468:	2000002d 	.word	0x2000002d
 800346c:	20000480 	.word	0x20000480
 8003470:	20000000 	.word	0x20000000
 8003474:	40000c00 	.word	0x40000c00
 8003478:	20000338 	.word	0x20000338
 800347c:	20000358 	.word	0x20000358
 8003480:	200003c0 	.word	0x200003c0
 8003484:	200003c8 	.word	0x200003c8
 8003488:	200003d8 	.word	0x200003d8
 800348c:	200003e0 	.word	0x200003e0
 8003490:	20000428 	.word	0x20000428
 8003494:	20000440 	.word	0x20000440
 8003498:	20000488 	.word	0x20000488
 800349c:	20000468 	.word	0x20000468
 80034a0:	20000460 	.word	0x20000460
 80034a4:	200002d8 	.word	0x200002d8
 80034a8:	40584000 	.word	0x40584000
 80034ac:	200002e0 	.word	0x200002e0
 80034b0:	200002e8 	.word	0x200002e8
 80034b4:	40890000 	.word	0x40890000
 80034b8:	200002f0 	.word	0x200002f0
 80034bc:	40568000 	.word	0x40568000
 80034c0:	200002f8 	.word	0x200002f8
 80034c4:	20000300 	.word	0x20000300
 80034c8:	200003b8 	.word	0x200003b8
 80034cc:	20000400 	.word	0x20000400
 80034d0:	20000410 	.word	0x20000410
 80034d4:	200003e8 	.word	0x200003e8

	case Nav_WallAlign_ArrivedAtWall_en :
	{
		//reset the current sample
		Nav_CurrentSample_u32 = 0;
 80034d8:	4b3b      	ldr	r3, [pc, #236]	; (80035c8 <Nav_vWallAlign+0x368>)
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]

		//reset measuring variables
		ENCODER_RIGHT->CNT = ENCODER_RIGHT->ARR / 2 ;
 80034de:	4b3b      	ldr	r3, [pc, #236]	; (80035cc <Nav_vWallAlign+0x36c>)
 80034e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e2:	4a3a      	ldr	r2, [pc, #232]	; (80035cc <Nav_vWallAlign+0x36c>)
 80034e4:	085b      	lsrs	r3, r3, #1
 80034e6:	6253      	str	r3, [r2, #36]	; 0x24
		ENCODER_LEFT->CNT = ENCODER_LEFT->ARR / 2 ;
 80034e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034f2:	085b      	lsrs	r3, r3, #1
 80034f4:	6253      	str	r3, [r2, #36]	; 0x24
		Nav_PrevMeasuredDistance_mm_d = 0.0 ;
 80034f6:	4936      	ldr	r1, [pc, #216]	; (80035d0 <Nav_vWallAlign+0x370>)
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_PrevMeasuredAngle_rad_d   = 0.0 ;
 8003504:	4933      	ldr	r1, [pc, #204]	; (80035d4 <Nav_vWallAlign+0x374>)
 8003506:	f04f 0200 	mov.w	r2, #0
 800350a:	f04f 0300 	mov.w	r3, #0
 800350e:	e9c1 2300 	strd	r2, r3, [r1]
		//Nav_PrevMeasuredAngle_deg_d   = 0.0 ;
		Nav_vFeedbackRoutine();
 8003512:	f7fd fc65 	bl	8000de0 <Nav_vFeedbackRoutine>

		//reset the Target Distance variables
		Nav_CurrentTargetDistance_mm_d = 0.0 ;
 8003516:	4930      	ldr	r1, [pc, #192]	; (80035d8 <Nav_vWallAlign+0x378>)
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	f04f 0300 	mov.w	r3, #0
 8003520:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_PrevTargetDistance_mm_d = 0.0 ;
 8003524:	492d      	ldr	r1, [pc, #180]	; (80035dc <Nav_vWallAlign+0x37c>)
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	e9c1 2300 	strd	r2, r3, [r1]

		Nav_PrevTargetAngle_deg_d = Nav_CurrentTargetAngle_deg_d;
 8003532:	4b2b      	ldr	r3, [pc, #172]	; (80035e0 <Nav_vWallAlign+0x380>)
 8003534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003538:	492a      	ldr	r1, [pc, #168]	; (80035e4 <Nav_vWallAlign+0x384>)
 800353a:	e9c1 2300 	strd	r2, r3, [r1]

		//reset the pid variables
		Nav_SumDistanceError_d = 0.0 ;
 800353e:	492a      	ldr	r1, [pc, #168]	; (80035e8 <Nav_vWallAlign+0x388>)
 8003540:	f04f 0200 	mov.w	r2, #0
 8003544:	f04f 0300 	mov.w	r3, #0
 8003548:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_SumAngleError_d = 0.0 ;
 800354c:	4927      	ldr	r1, [pc, #156]	; (80035ec <Nav_vWallAlign+0x38c>)
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	e9c1 2300 	strd	r2, r3, [r1]

		Nav_CurrentX_mm_d = 0.0 ;
 800355a:	4925      	ldr	r1, [pc, #148]	; (80035f0 <Nav_vWallAlign+0x390>)
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	f04f 0300 	mov.w	r3, #0
 8003564:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_CurrentY_mm_d = 0.0 ;
 8003568:	4922      	ldr	r1, [pc, #136]	; (80035f4 <Nav_vWallAlign+0x394>)
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	f04f 0300 	mov.w	r3, #0
 8003572:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_CurrentAngle_rad_d	= 0 ;
 8003576:	4920      	ldr	r1, [pc, #128]	; (80035f8 <Nav_vWallAlign+0x398>)
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_CurrentAngle_deg_d = 0 ;
 8003584:	491d      	ldr	r1, [pc, #116]	; (80035fc <Nav_vWallAlign+0x39c>)
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_CurrentTargetAngle_deg_d = 0 ;
 8003592:	4913      	ldr	r1, [pc, #76]	; (80035e0 <Nav_vWallAlign+0x380>)
 8003594:	f04f 0200 	mov.w	r2, #0
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_PrevTargetAngle_deg_d = 0 ;
 80035a0:	4910      	ldr	r1, [pc, #64]	; (80035e4 <Nav_vWallAlign+0x384>)
 80035a2:	f04f 0200 	mov.w	r2, #0
 80035a6:	f04f 0300 	mov.w	r3, #0
 80035aa:	e9c1 2300 	strd	r2, r3, [r1]


		Nav_WallAlignState_en = Nav_WallAlign_Finish_en;
 80035ae:	4b14      	ldr	r3, [pc, #80]	; (8003600 <Nav_vWallAlign+0x3a0>)
 80035b0:	2205      	movs	r2, #5
 80035b2:	701a      	strb	r2, [r3, #0]
	}break;
 80035b4:	e006      	b.n	80035c4 <Nav_vWallAlign+0x364>


	case Nav_WallAlign_Finish_en :
	{
		//Nav_Test_enter = 1;
		Nav_WallAlignState_en = Nav_WallAlign_Idle_en;
 80035b6:	4b12      	ldr	r3, [pc, #72]	; (8003600 <Nav_vWallAlign+0x3a0>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	701a      	strb	r2, [r3, #0]
	}break;
 80035bc:	e002      	b.n	80035c4 <Nav_vWallAlign+0x364>
	}break;
 80035be:	bf00      	nop
 80035c0:	e000      	b.n	80035c4 <Nav_vWallAlign+0x364>
	}break;
 80035c2:	bf00      	nop
}

}
 80035c4:	bf00      	nop
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	20000480 	.word	0x20000480
 80035cc:	40000c00 	.word	0x40000c00
 80035d0:	20000338 	.word	0x20000338
 80035d4:	20000358 	.word	0x20000358
 80035d8:	200003c0 	.word	0x200003c0
 80035dc:	200003c8 	.word	0x200003c8
 80035e0:	200003d8 	.word	0x200003d8
 80035e4:	200003e0 	.word	0x200003e0
 80035e8:	20000428 	.word	0x20000428
 80035ec:	20000440 	.word	0x20000440
 80035f0:	200003a0 	.word	0x200003a0
 80035f4:	200003a8 	.word	0x200003a8
 80035f8:	20000370 	.word	0x20000370
 80035fc:	20000388 	.word	0x20000388
 8003600:	2000002d 	.word	0x2000002d

08003604 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)

{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
    if ( htim == &htim6 )
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a04      	ldr	r2, [pc, #16]	; (8003620 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d101      	bne.n	8003618 <HAL_TIM_PeriodElapsedCallback+0x14>
	{
        Nav_vTestPathStateMachine();
 8003614:	f7fe fc58 	bl	8001ec8 <Nav_vTestPathStateMachine>
//		Nav_vExecutePath();

	}
}
 8003618:	bf00      	nop
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	20000564 	.word	0x20000564

08003624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */




	HAL_Init();
 8003628:	f000 fc5e 	bl	8003ee8 <HAL_Init>

  /* USER CODE BEGIN Init */
  Nav_vNavigatorInit();
 800362c:	f7fe fd48 	bl	80020c0 <Nav_vNavigatorInit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003630:	f000 f848 	bl	80036c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003634:	f000 fa52 	bl	8003adc <MX_GPIO_Init>
  MX_TIM2_Init();
 8003638:	f000 f972 	bl	8003920 <MX_TIM2_Init>
  MX_TIM6_Init();
 800363c:	f000 fa18 	bl	8003a70 <MX_TIM6_Init>
  MX_TIM1_Init();
 8003640:	f000 f8aa 	bl	8003798 <MX_TIM1_Init>
  MX_TIM5_Init();
 8003644:	f000 f9c0 	bl	80039c8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_1);
 8003648:	2100      	movs	r1, #0
 800364a:	4819      	ldr	r0, [pc, #100]	; (80036b0 <main+0x8c>)
 800364c:	f001 fe7c 	bl	8005348 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_2);
 8003650:	2104      	movs	r1, #4
 8003652:	4817      	ldr	r0, [pc, #92]	; (80036b0 <main+0x8c>)
 8003654:	f001 fe78 	bl	8005348 <HAL_TIM_Encoder_Start>

    HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_1);
 8003658:	2100      	movs	r1, #0
 800365a:	4816      	ldr	r0, [pc, #88]	; (80036b4 <main+0x90>)
 800365c:	f001 fe74 	bl	8005348 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_2);
 8003660:	2104      	movs	r1, #4
 8003662:	4814      	ldr	r0, [pc, #80]	; (80036b4 <main+0x90>)
 8003664:	f001 fe70 	bl	8005348 <HAL_TIM_Encoder_Start>

      HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8003668:	2100      	movs	r1, #0
 800366a:	4813      	ldr	r0, [pc, #76]	; (80036b8 <main+0x94>)
 800366c:	f001 fcfe 	bl	800506c <HAL_TIM_PWM_Start>
    	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8003670:	2104      	movs	r1, #4
 8003672:	4811      	ldr	r0, [pc, #68]	; (80036b8 <main+0x94>)
 8003674:	f001 fcfa 	bl	800506c <HAL_TIM_PWM_Start>
    	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8003678:	2108      	movs	r1, #8
 800367a:	480f      	ldr	r0, [pc, #60]	; (80036b8 <main+0x94>)
 800367c:	f001 fcf6 	bl	800506c <HAL_TIM_PWM_Start>
    	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8003680:	210c      	movs	r1, #12
 8003682:	480d      	ldr	r0, [pc, #52]	; (80036b8 <main+0x94>)
 8003684:	f001 fcf2 	bl	800506c <HAL_TIM_PWM_Start>
    	TIM2->CNT=TIM2->ARR / 2 ;
 8003688:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800368c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003692:	085b      	lsrs	r3, r3, #1
 8003694:	6253      	str	r3, [r2, #36]	; 0x24
    	TIM5->CNT=TIM5->ARR / 2 ;
 8003696:	4b09      	ldr	r3, [pc, #36]	; (80036bc <main+0x98>)
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	4a08      	ldr	r2, [pc, #32]	; (80036bc <main+0x98>)
 800369c:	085b      	lsrs	r3, r3, #1
 800369e:	6253      	str	r3, [r2, #36]	; 0x24
   		HAL_Delay(2000);
 80036a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80036a4:	f000 fc92 	bl	8003fcc <HAL_Delay>
   		    HAL_TIM_Base_Start_IT(&htim6);
 80036a8:	4805      	ldr	r0, [pc, #20]	; (80036c0 <main+0x9c>)
 80036aa:	f001 fc15 	bl	8004ed8 <HAL_TIM_Base_Start_IT>
// MINIMUM_LEFT_MOTOR_REVERSE_COMMAND
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   		    while (1)
 80036ae:	e7fe      	b.n	80036ae <main+0x8a>
 80036b0:	200004d4 	.word	0x200004d4
 80036b4:	2000051c 	.word	0x2000051c
 80036b8:	2000048c 	.word	0x2000048c
 80036bc:	40000c00 	.word	0x40000c00
 80036c0:	20000564 	.word	0x20000564

080036c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b094      	sub	sp, #80	; 0x50
 80036c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036ca:	f107 0320 	add.w	r3, r7, #32
 80036ce:	2230      	movs	r2, #48	; 0x30
 80036d0:	2100      	movs	r1, #0
 80036d2:	4618      	mov	r0, r3
 80036d4:	f002 fd72 	bl	80061bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036d8:	f107 030c 	add.w	r3, r7, #12
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	605a      	str	r2, [r3, #4]
 80036e2:	609a      	str	r2, [r3, #8]
 80036e4:	60da      	str	r2, [r3, #12]
 80036e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80036e8:	2300      	movs	r3, #0
 80036ea:	60bb      	str	r3, [r7, #8]
 80036ec:	4b28      	ldr	r3, [pc, #160]	; (8003790 <SystemClock_Config+0xcc>)
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	4a27      	ldr	r2, [pc, #156]	; (8003790 <SystemClock_Config+0xcc>)
 80036f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f6:	6413      	str	r3, [r2, #64]	; 0x40
 80036f8:	4b25      	ldr	r3, [pc, #148]	; (8003790 <SystemClock_Config+0xcc>)
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003700:	60bb      	str	r3, [r7, #8]
 8003702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003704:	2300      	movs	r3, #0
 8003706:	607b      	str	r3, [r7, #4]
 8003708:	4b22      	ldr	r3, [pc, #136]	; (8003794 <SystemClock_Config+0xd0>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a21      	ldr	r2, [pc, #132]	; (8003794 <SystemClock_Config+0xd0>)
 800370e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003712:	6013      	str	r3, [r2, #0]
 8003714:	4b1f      	ldr	r3, [pc, #124]	; (8003794 <SystemClock_Config+0xd0>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800371c:	607b      	str	r3, [r7, #4]
 800371e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003720:	2302      	movs	r3, #2
 8003722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003724:	2301      	movs	r3, #1
 8003726:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003728:	2310      	movs	r3, #16
 800372a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800372c:	2302      	movs	r3, #2
 800372e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003730:	2300      	movs	r3, #0
 8003732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003734:	2308      	movs	r3, #8
 8003736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003738:	23a8      	movs	r3, #168	; 0xa8
 800373a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800373c:	2302      	movs	r3, #2
 800373e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003740:	2307      	movs	r3, #7
 8003742:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003744:	f107 0320 	add.w	r3, r7, #32
 8003748:	4618      	mov	r0, r3
 800374a:	f000 ff11 	bl	8004570 <HAL_RCC_OscConfig>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003754:	f000 fa06 	bl	8003b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003758:	230f      	movs	r3, #15
 800375a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800375c:	2302      	movs	r3, #2
 800375e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003760:	2300      	movs	r3, #0
 8003762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003764:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800376a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800376e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003770:	f107 030c 	add.w	r3, r7, #12
 8003774:	2105      	movs	r1, #5
 8003776:	4618      	mov	r0, r3
 8003778:	f001 f972 	bl	8004a60 <HAL_RCC_ClockConfig>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003782:	f000 f9ef 	bl	8003b64 <Error_Handler>
  }
}
 8003786:	bf00      	nop
 8003788:	3750      	adds	r7, #80	; 0x50
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40023800 	.word	0x40023800
 8003794:	40007000 	.word	0x40007000

08003798 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b096      	sub	sp, #88	; 0x58
 800379c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800379e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	605a      	str	r2, [r3, #4]
 80037a8:	609a      	str	r2, [r3, #8]
 80037aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	605a      	str	r2, [r3, #4]
 80037c0:	609a      	str	r2, [r3, #8]
 80037c2:	60da      	str	r2, [r3, #12]
 80037c4:	611a      	str	r2, [r3, #16]
 80037c6:	615a      	str	r2, [r3, #20]
 80037c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80037ca:	1d3b      	adds	r3, r7, #4
 80037cc:	2220      	movs	r2, #32
 80037ce:	2100      	movs	r1, #0
 80037d0:	4618      	mov	r0, r3
 80037d2:	f002 fcf3 	bl	80061bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80037d6:	4b50      	ldr	r3, [pc, #320]	; (8003918 <MX_TIM1_Init+0x180>)
 80037d8:	4a50      	ldr	r2, [pc, #320]	; (800391c <MX_TIM1_Init+0x184>)
 80037da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2;
 80037dc:	4b4e      	ldr	r3, [pc, #312]	; (8003918 <MX_TIM1_Init+0x180>)
 80037de:	2202      	movs	r2, #2
 80037e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037e2:	4b4d      	ldr	r3, [pc, #308]	; (8003918 <MX_TIM1_Init+0x180>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3199;
 80037e8:	4b4b      	ldr	r3, [pc, #300]	; (8003918 <MX_TIM1_Init+0x180>)
 80037ea:	f640 427f 	movw	r2, #3199	; 0xc7f
 80037ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037f0:	4b49      	ldr	r3, [pc, #292]	; (8003918 <MX_TIM1_Init+0x180>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80037f6:	4b48      	ldr	r3, [pc, #288]	; (8003918 <MX_TIM1_Init+0x180>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037fc:	4b46      	ldr	r3, [pc, #280]	; (8003918 <MX_TIM1_Init+0x180>)
 80037fe:	2200      	movs	r2, #0
 8003800:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003802:	4845      	ldr	r0, [pc, #276]	; (8003918 <MX_TIM1_Init+0x180>)
 8003804:	f001 fb18 	bl	8004e38 <HAL_TIM_Base_Init>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800380e:	f000 f9a9 	bl	8003b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003816:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003818:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800381c:	4619      	mov	r1, r3
 800381e:	483e      	ldr	r0, [pc, #248]	; (8003918 <MX_TIM1_Init+0x180>)
 8003820:	f001 ffea 	bl	80057f8 <HAL_TIM_ConfigClockSource>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800382a:	f000 f99b 	bl	8003b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800382e:	483a      	ldr	r0, [pc, #232]	; (8003918 <MX_TIM1_Init+0x180>)
 8003830:	f001 fbc2 	bl	8004fb8 <HAL_TIM_PWM_Init>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800383a:	f000 f993 	bl	8003b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800383e:	2300      	movs	r3, #0
 8003840:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003842:	2300      	movs	r3, #0
 8003844:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003846:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800384a:	4619      	mov	r1, r3
 800384c:	4832      	ldr	r0, [pc, #200]	; (8003918 <MX_TIM1_Init+0x180>)
 800384e:	f002 fbd3 	bl	8005ff8 <HAL_TIMEx_MasterConfigSynchronization>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003858:	f000 f984 	bl	8003b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800385c:	2360      	movs	r3, #96	; 0x60
 800385e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003860:	2300      	movs	r3, #0
 8003862:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003864:	2300      	movs	r3, #0
 8003866:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003868:	2300      	movs	r3, #0
 800386a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800386c:	2300      	movs	r3, #0
 800386e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003870:	2300      	movs	r3, #0
 8003872:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003874:	2300      	movs	r3, #0
 8003876:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800387c:	2200      	movs	r2, #0
 800387e:	4619      	mov	r1, r3
 8003880:	4825      	ldr	r0, [pc, #148]	; (8003918 <MX_TIM1_Init+0x180>)
 8003882:	f001 fef7 	bl	8005674 <HAL_TIM_PWM_ConfigChannel>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800388c:	f000 f96a 	bl	8003b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003894:	2204      	movs	r2, #4
 8003896:	4619      	mov	r1, r3
 8003898:	481f      	ldr	r0, [pc, #124]	; (8003918 <MX_TIM1_Init+0x180>)
 800389a:	f001 feeb 	bl	8005674 <HAL_TIM_PWM_ConfigChannel>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80038a4:	f000 f95e 	bl	8003b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80038a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038ac:	2208      	movs	r2, #8
 80038ae:	4619      	mov	r1, r3
 80038b0:	4819      	ldr	r0, [pc, #100]	; (8003918 <MX_TIM1_Init+0x180>)
 80038b2:	f001 fedf 	bl	8005674 <HAL_TIM_PWM_ConfigChannel>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80038bc:	f000 f952 	bl	8003b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80038c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038c4:	220c      	movs	r2, #12
 80038c6:	4619      	mov	r1, r3
 80038c8:	4813      	ldr	r0, [pc, #76]	; (8003918 <MX_TIM1_Init+0x180>)
 80038ca:	f001 fed3 	bl	8005674 <HAL_TIM_PWM_ConfigChannel>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80038d4:	f000 f946 	bl	8003b64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80038d8:	2300      	movs	r3, #0
 80038da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80038dc:	2300      	movs	r3, #0
 80038de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80038e0:	2300      	movs	r3, #0
 80038e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80038e4:	2300      	movs	r3, #0
 80038e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80038ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80038f2:	2300      	movs	r3, #0
 80038f4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80038f6:	1d3b      	adds	r3, r7, #4
 80038f8:	4619      	mov	r1, r3
 80038fa:	4807      	ldr	r0, [pc, #28]	; (8003918 <MX_TIM1_Init+0x180>)
 80038fc:	f002 fbf8 	bl	80060f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8003906:	f000 f92d 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800390a:	4803      	ldr	r0, [pc, #12]	; (8003918 <MX_TIM1_Init+0x180>)
 800390c:	f000 fa38 	bl	8003d80 <HAL_TIM_MspPostInit>

}
 8003910:	bf00      	nop
 8003912:	3758      	adds	r7, #88	; 0x58
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	2000048c 	.word	0x2000048c
 800391c:	40010000 	.word	0x40010000

08003920 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08c      	sub	sp, #48	; 0x30
 8003924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003926:	f107 030c 	add.w	r3, r7, #12
 800392a:	2224      	movs	r2, #36	; 0x24
 800392c:	2100      	movs	r1, #0
 800392e:	4618      	mov	r0, r3
 8003930:	f002 fc44 	bl	80061bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003934:	1d3b      	adds	r3, r7, #4
 8003936:	2200      	movs	r2, #0
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800393c:	4b21      	ldr	r3, [pc, #132]	; (80039c4 <MX_TIM2_Init+0xa4>)
 800393e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003942:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003944:	4b1f      	ldr	r3, [pc, #124]	; (80039c4 <MX_TIM2_Init+0xa4>)
 8003946:	2200      	movs	r2, #0
 8003948:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800394a:	4b1e      	ldr	r3, [pc, #120]	; (80039c4 <MX_TIM2_Init+0xa4>)
 800394c:	2200      	movs	r2, #0
 800394e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003950:	4b1c      	ldr	r3, [pc, #112]	; (80039c4 <MX_TIM2_Init+0xa4>)
 8003952:	f04f 32ff 	mov.w	r2, #4294967295
 8003956:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003958:	4b1a      	ldr	r3, [pc, #104]	; (80039c4 <MX_TIM2_Init+0xa4>)
 800395a:	2200      	movs	r2, #0
 800395c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800395e:	4b19      	ldr	r3, [pc, #100]	; (80039c4 <MX_TIM2_Init+0xa4>)
 8003960:	2200      	movs	r2, #0
 8003962:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003964:	2301      	movs	r3, #1
 8003966:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003968:	2300      	movs	r3, #0
 800396a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800396c:	2301      	movs	r3, #1
 800396e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003970:	2300      	movs	r3, #0
 8003972:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003974:	2300      	movs	r3, #0
 8003976:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003978:	2300      	movs	r3, #0
 800397a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800397c:	2301      	movs	r3, #1
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003980:	2300      	movs	r3, #0
 8003982:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003984:	2300      	movs	r3, #0
 8003986:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003988:	f107 030c 	add.w	r3, r7, #12
 800398c:	4619      	mov	r1, r3
 800398e:	480d      	ldr	r0, [pc, #52]	; (80039c4 <MX_TIM2_Init+0xa4>)
 8003990:	f001 fc34 	bl	80051fc <HAL_TIM_Encoder_Init>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800399a:	f000 f8e3 	bl	8003b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800399e:	2300      	movs	r3, #0
 80039a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039a2:	2300      	movs	r3, #0
 80039a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80039a6:	1d3b      	adds	r3, r7, #4
 80039a8:	4619      	mov	r1, r3
 80039aa:	4806      	ldr	r0, [pc, #24]	; (80039c4 <MX_TIM2_Init+0xa4>)
 80039ac:	f002 fb24 	bl	8005ff8 <HAL_TIMEx_MasterConfigSynchronization>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80039b6:	f000 f8d5 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80039ba:	bf00      	nop
 80039bc:	3730      	adds	r7, #48	; 0x30
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	200004d4 	.word	0x200004d4

080039c8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08c      	sub	sp, #48	; 0x30
 80039cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80039ce:	f107 030c 	add.w	r3, r7, #12
 80039d2:	2224      	movs	r2, #36	; 0x24
 80039d4:	2100      	movs	r1, #0
 80039d6:	4618      	mov	r0, r3
 80039d8:	f002 fbf0 	bl	80061bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039dc:	1d3b      	adds	r3, r7, #4
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80039e4:	4b20      	ldr	r3, [pc, #128]	; (8003a68 <MX_TIM5_Init+0xa0>)
 80039e6:	4a21      	ldr	r2, [pc, #132]	; (8003a6c <MX_TIM5_Init+0xa4>)
 80039e8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80039ea:	4b1f      	ldr	r3, [pc, #124]	; (8003a68 <MX_TIM5_Init+0xa0>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039f0:	4b1d      	ldr	r3, [pc, #116]	; (8003a68 <MX_TIM5_Init+0xa0>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80039f6:	4b1c      	ldr	r3, [pc, #112]	; (8003a68 <MX_TIM5_Init+0xa0>)
 80039f8:	f04f 32ff 	mov.w	r2, #4294967295
 80039fc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039fe:	4b1a      	ldr	r3, [pc, #104]	; (8003a68 <MX_TIM5_Init+0xa0>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a04:	4b18      	ldr	r3, [pc, #96]	; (8003a68 <MX_TIM5_Init+0xa0>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003a12:	2301      	movs	r3, #1
 8003a14:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003a16:	2300      	movs	r3, #0
 8003a18:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003a22:	2301      	movs	r3, #1
 8003a24:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003a26:	2300      	movs	r3, #0
 8003a28:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003a2e:	f107 030c 	add.w	r3, r7, #12
 8003a32:	4619      	mov	r1, r3
 8003a34:	480c      	ldr	r0, [pc, #48]	; (8003a68 <MX_TIM5_Init+0xa0>)
 8003a36:	f001 fbe1 	bl	80051fc <HAL_TIM_Encoder_Init>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8003a40:	f000 f890 	bl	8003b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a44:	2300      	movs	r3, #0
 8003a46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003a4c:	1d3b      	adds	r3, r7, #4
 8003a4e:	4619      	mov	r1, r3
 8003a50:	4805      	ldr	r0, [pc, #20]	; (8003a68 <MX_TIM5_Init+0xa0>)
 8003a52:	f002 fad1 	bl	8005ff8 <HAL_TIMEx_MasterConfigSynchronization>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8003a5c:	f000 f882 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003a60:	bf00      	nop
 8003a62:	3730      	adds	r7, #48	; 0x30
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	2000051c 	.word	0x2000051c
 8003a6c:	40000c00 	.word	0x40000c00

08003a70 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a76:	463b      	mov	r3, r7
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003a7e:	4b15      	ldr	r3, [pc, #84]	; (8003ad4 <MX_TIM6_Init+0x64>)
 8003a80:	4a15      	ldr	r2, [pc, #84]	; (8003ad8 <MX_TIM6_Init+0x68>)
 8003a82:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 8003a84:	4b13      	ldr	r3, [pc, #76]	; (8003ad4 <MX_TIM6_Init+0x64>)
 8003a86:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a8a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a8c:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <MX_TIM6_Init+0x64>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 419;
 8003a92:	4b10      	ldr	r3, [pc, #64]	; (8003ad4 <MX_TIM6_Init+0x64>)
 8003a94:	f240 12a3 	movw	r2, #419	; 0x1a3
 8003a98:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a9a:	4b0e      	ldr	r3, [pc, #56]	; (8003ad4 <MX_TIM6_Init+0x64>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003aa0:	480c      	ldr	r0, [pc, #48]	; (8003ad4 <MX_TIM6_Init+0x64>)
 8003aa2:	f001 f9c9 	bl	8004e38 <HAL_TIM_Base_Init>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003aac:	f000 f85a 	bl	8003b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003ab8:	463b      	mov	r3, r7
 8003aba:	4619      	mov	r1, r3
 8003abc:	4805      	ldr	r0, [pc, #20]	; (8003ad4 <MX_TIM6_Init+0x64>)
 8003abe:	f002 fa9b 	bl	8005ff8 <HAL_TIMEx_MasterConfigSynchronization>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003ac8:	f000 f84c 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003acc:	bf00      	nop
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	20000564 	.word	0x20000564
 8003ad8:	40001000 	.word	0x40001000

08003adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	4b1e      	ldr	r3, [pc, #120]	; (8003b60 <MX_GPIO_Init+0x84>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	4a1d      	ldr	r2, [pc, #116]	; (8003b60 <MX_GPIO_Init+0x84>)
 8003aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003af0:	6313      	str	r3, [r2, #48]	; 0x30
 8003af2:	4b1b      	ldr	r3, [pc, #108]	; (8003b60 <MX_GPIO_Init+0x84>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003afe:	2300      	movs	r3, #0
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	4b17      	ldr	r3, [pc, #92]	; (8003b60 <MX_GPIO_Init+0x84>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	4a16      	ldr	r2, [pc, #88]	; (8003b60 <MX_GPIO_Init+0x84>)
 8003b08:	f043 0301 	orr.w	r3, r3, #1
 8003b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b0e:	4b14      	ldr	r3, [pc, #80]	; (8003b60 <MX_GPIO_Init+0x84>)
 8003b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	60bb      	str	r3, [r7, #8]
 8003b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	607b      	str	r3, [r7, #4]
 8003b1e:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <MX_GPIO_Init+0x84>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	4a0f      	ldr	r2, [pc, #60]	; (8003b60 <MX_GPIO_Init+0x84>)
 8003b24:	f043 0310 	orr.w	r3, r3, #16
 8003b28:	6313      	str	r3, [r2, #48]	; 0x30
 8003b2a:	4b0d      	ldr	r3, [pc, #52]	; (8003b60 <MX_GPIO_Init+0x84>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	f003 0310 	and.w	r3, r3, #16
 8003b32:	607b      	str	r3, [r7, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b36:	2300      	movs	r3, #0
 8003b38:	603b      	str	r3, [r7, #0]
 8003b3a:	4b09      	ldr	r3, [pc, #36]	; (8003b60 <MX_GPIO_Init+0x84>)
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	4a08      	ldr	r2, [pc, #32]	; (8003b60 <MX_GPIO_Init+0x84>)
 8003b40:	f043 0302 	orr.w	r3, r3, #2
 8003b44:	6313      	str	r3, [r2, #48]	; 0x30
 8003b46:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <MX_GPIO_Init+0x84>)
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	603b      	str	r3, [r7, #0]
 8003b50:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003b52:	bf00      	nop
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	40023800 	.word	0x40023800

08003b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b68:	b672      	cpsid	i
}
 8003b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b6c:	e7fe      	b.n	8003b6c <Error_Handler+0x8>
	...

08003b70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b76:	2300      	movs	r3, #0
 8003b78:	607b      	str	r3, [r7, #4]
 8003b7a:	4b10      	ldr	r3, [pc, #64]	; (8003bbc <HAL_MspInit+0x4c>)
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7e:	4a0f      	ldr	r2, [pc, #60]	; (8003bbc <HAL_MspInit+0x4c>)
 8003b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b84:	6453      	str	r3, [r2, #68]	; 0x44
 8003b86:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <HAL_MspInit+0x4c>)
 8003b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b8e:	607b      	str	r3, [r7, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b92:	2300      	movs	r3, #0
 8003b94:	603b      	str	r3, [r7, #0]
 8003b96:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <HAL_MspInit+0x4c>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	4a08      	ldr	r2, [pc, #32]	; (8003bbc <HAL_MspInit+0x4c>)
 8003b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ba2:	4b06      	ldr	r3, [pc, #24]	; (8003bbc <HAL_MspInit+0x4c>)
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003baa:	603b      	str	r3, [r7, #0]
 8003bac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003bae:	2007      	movs	r0, #7
 8003bb0:	f000 fb00 	bl	80041b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bb4:	bf00      	nop
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	40023800 	.word	0x40023800

08003bc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a18      	ldr	r2, [pc, #96]	; (8003c30 <HAL_TIM_Base_MspInit+0x70>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d10e      	bne.n	8003bf0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	4b17      	ldr	r3, [pc, #92]	; (8003c34 <HAL_TIM_Base_MspInit+0x74>)
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bda:	4a16      	ldr	r2, [pc, #88]	; (8003c34 <HAL_TIM_Base_MspInit+0x74>)
 8003bdc:	f043 0301 	orr.w	r3, r3, #1
 8003be0:	6453      	str	r3, [r2, #68]	; 0x44
 8003be2:	4b14      	ldr	r3, [pc, #80]	; (8003c34 <HAL_TIM_Base_MspInit+0x74>)
 8003be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003bee:	e01a      	b.n	8003c26 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM6)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a10      	ldr	r2, [pc, #64]	; (8003c38 <HAL_TIM_Base_MspInit+0x78>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d115      	bne.n	8003c26 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60bb      	str	r3, [r7, #8]
 8003bfe:	4b0d      	ldr	r3, [pc, #52]	; (8003c34 <HAL_TIM_Base_MspInit+0x74>)
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	4a0c      	ldr	r2, [pc, #48]	; (8003c34 <HAL_TIM_Base_MspInit+0x74>)
 8003c04:	f043 0310 	orr.w	r3, r3, #16
 8003c08:	6413      	str	r3, [r2, #64]	; 0x40
 8003c0a:	4b0a      	ldr	r3, [pc, #40]	; (8003c34 <HAL_TIM_Base_MspInit+0x74>)
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	f003 0310 	and.w	r3, r3, #16
 8003c12:	60bb      	str	r3, [r7, #8]
 8003c14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003c16:	2200      	movs	r2, #0
 8003c18:	2100      	movs	r1, #0
 8003c1a:	2036      	movs	r0, #54	; 0x36
 8003c1c:	f000 fad5 	bl	80041ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003c20:	2036      	movs	r0, #54	; 0x36
 8003c22:	f000 faee 	bl	8004202 <HAL_NVIC_EnableIRQ>
}
 8003c26:	bf00      	nop
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	40010000 	.word	0x40010000
 8003c34:	40023800 	.word	0x40023800
 8003c38:	40001000 	.word	0x40001000

08003c3c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08c      	sub	sp, #48	; 0x30
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c44:	f107 031c 	add.w	r3, r7, #28
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	605a      	str	r2, [r3, #4]
 8003c4e:	609a      	str	r2, [r3, #8]
 8003c50:	60da      	str	r2, [r3, #12]
 8003c52:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c5c:	d152      	bne.n	8003d04 <HAL_TIM_Encoder_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61bb      	str	r3, [r7, #24]
 8003c62:	4b43      	ldr	r3, [pc, #268]	; (8003d70 <HAL_TIM_Encoder_MspInit+0x134>)
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	4a42      	ldr	r2, [pc, #264]	; (8003d70 <HAL_TIM_Encoder_MspInit+0x134>)
 8003c68:	f043 0301 	orr.w	r3, r3, #1
 8003c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c6e:	4b40      	ldr	r3, [pc, #256]	; (8003d70 <HAL_TIM_Encoder_MspInit+0x134>)
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	61bb      	str	r3, [r7, #24]
 8003c78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]
 8003c7e:	4b3c      	ldr	r3, [pc, #240]	; (8003d70 <HAL_TIM_Encoder_MspInit+0x134>)
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	4a3b      	ldr	r2, [pc, #236]	; (8003d70 <HAL_TIM_Encoder_MspInit+0x134>)
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	6313      	str	r3, [r2, #48]	; 0x30
 8003c8a:	4b39      	ldr	r3, [pc, #228]	; (8003d70 <HAL_TIM_Encoder_MspInit+0x134>)
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c96:	2300      	movs	r3, #0
 8003c98:	613b      	str	r3, [r7, #16]
 8003c9a:	4b35      	ldr	r3, [pc, #212]	; (8003d70 <HAL_TIM_Encoder_MspInit+0x134>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9e:	4a34      	ldr	r2, [pc, #208]	; (8003d70 <HAL_TIM_Encoder_MspInit+0x134>)
 8003ca0:	f043 0302 	orr.w	r3, r3, #2
 8003ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ca6:	4b32      	ldr	r3, [pc, #200]	; (8003d70 <HAL_TIM_Encoder_MspInit+0x134>)
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	613b      	str	r3, [r7, #16]
 8003cb0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003cb2:	2320      	movs	r3, #32
 8003cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cc6:	f107 031c 	add.w	r3, r7, #28
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4829      	ldr	r0, [pc, #164]	; (8003d74 <HAL_TIM_Encoder_MspInit+0x138>)
 8003cce:	f000 fab3 	bl	8004238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003cd2:	2308      	movs	r3, #8
 8003cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ce6:	f107 031c 	add.w	r3, r7, #28
 8003cea:	4619      	mov	r1, r3
 8003cec:	4822      	ldr	r0, [pc, #136]	; (8003d78 <HAL_TIM_Encoder_MspInit+0x13c>)
 8003cee:	f000 faa3 	bl	8004238 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	201c      	movs	r0, #28
 8003cf8:	f000 fa67 	bl	80041ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003cfc:	201c      	movs	r0, #28
 8003cfe:	f000 fa80 	bl	8004202 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003d02:	e030      	b.n	8003d66 <HAL_TIM_Encoder_MspInit+0x12a>
  else if(htim_encoder->Instance==TIM5)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a1c      	ldr	r2, [pc, #112]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x140>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d12b      	bne.n	8003d66 <HAL_TIM_Encoder_MspInit+0x12a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	4b17      	ldr	r3, [pc, #92]	; (8003d70 <HAL_TIM_Encoder_MspInit+0x134>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	4a16      	ldr	r2, [pc, #88]	; (8003d70 <HAL_TIM_Encoder_MspInit+0x134>)
 8003d18:	f043 0308 	orr.w	r3, r3, #8
 8003d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d1e:	4b14      	ldr	r3, [pc, #80]	; (8003d70 <HAL_TIM_Encoder_MspInit+0x134>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60bb      	str	r3, [r7, #8]
 8003d2e:	4b10      	ldr	r3, [pc, #64]	; (8003d70 <HAL_TIM_Encoder_MspInit+0x134>)
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	4a0f      	ldr	r2, [pc, #60]	; (8003d70 <HAL_TIM_Encoder_MspInit+0x134>)
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	6313      	str	r3, [r2, #48]	; 0x30
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <HAL_TIM_Encoder_MspInit+0x134>)
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	60bb      	str	r3, [r7, #8]
 8003d44:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003d46:	2303      	movs	r3, #3
 8003d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d52:	2300      	movs	r3, #0
 8003d54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003d56:	2302      	movs	r3, #2
 8003d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d5a:	f107 031c 	add.w	r3, r7, #28
 8003d5e:	4619      	mov	r1, r3
 8003d60:	4804      	ldr	r0, [pc, #16]	; (8003d74 <HAL_TIM_Encoder_MspInit+0x138>)
 8003d62:	f000 fa69 	bl	8004238 <HAL_GPIO_Init>
}
 8003d66:	bf00      	nop
 8003d68:	3730      	adds	r7, #48	; 0x30
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	40023800 	.word	0x40023800
 8003d74:	40020000 	.word	0x40020000
 8003d78:	40020400 	.word	0x40020400
 8003d7c:	40000c00 	.word	0x40000c00

08003d80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b088      	sub	sp, #32
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d88:	f107 030c 	add.w	r3, r7, #12
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	605a      	str	r2, [r3, #4]
 8003d92:	609a      	str	r2, [r3, #8]
 8003d94:	60da      	str	r2, [r3, #12]
 8003d96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a12      	ldr	r2, [pc, #72]	; (8003de8 <HAL_TIM_MspPostInit+0x68>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d11e      	bne.n	8003de0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003da2:	2300      	movs	r3, #0
 8003da4:	60bb      	str	r3, [r7, #8]
 8003da6:	4b11      	ldr	r3, [pc, #68]	; (8003dec <HAL_TIM_MspPostInit+0x6c>)
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	4a10      	ldr	r2, [pc, #64]	; (8003dec <HAL_TIM_MspPostInit+0x6c>)
 8003dac:	f043 0310 	orr.w	r3, r3, #16
 8003db0:	6313      	str	r3, [r2, #48]	; 0x30
 8003db2:	4b0e      	ldr	r3, [pc, #56]	; (8003dec <HAL_TIM_MspPostInit+0x6c>)
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	f003 0310 	and.w	r3, r3, #16
 8003dba:	60bb      	str	r3, [r7, #8]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8003dbe:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8003dc2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003dd4:	f107 030c 	add.w	r3, r7, #12
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4805      	ldr	r0, [pc, #20]	; (8003df0 <HAL_TIM_MspPostInit+0x70>)
 8003ddc:	f000 fa2c 	bl	8004238 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003de0:	bf00      	nop
 8003de2:	3720      	adds	r7, #32
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40010000 	.word	0x40010000
 8003dec:	40023800 	.word	0x40023800
 8003df0:	40021000 	.word	0x40021000

08003df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003df8:	e7fe      	b.n	8003df8 <NMI_Handler+0x4>

08003dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dfe:	e7fe      	b.n	8003dfe <HardFault_Handler+0x4>

08003e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e04:	e7fe      	b.n	8003e04 <MemManage_Handler+0x4>

08003e06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e06:	b480      	push	{r7}
 8003e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e0a:	e7fe      	b.n	8003e0a <BusFault_Handler+0x4>

08003e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e10:	e7fe      	b.n	8003e10 <UsageFault_Handler+0x4>

08003e12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e12:	b480      	push	{r7}
 8003e14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e16:	bf00      	nop
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e24:	bf00      	nop
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e32:	bf00      	nop
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e40:	f000 f8a4 	bl	8003f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e44:	bf00      	nop
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003e4c:	4802      	ldr	r0, [pc, #8]	; (8003e58 <TIM2_IRQHandler+0x10>)
 8003e4e:	f001 fb09 	bl	8005464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003e52:	bf00      	nop
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	200004d4 	.word	0x200004d4

08003e5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003e60:	4802      	ldr	r0, [pc, #8]	; (8003e6c <TIM6_DAC_IRQHandler+0x10>)
 8003e62:	f001 faff 	bl	8005464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003e66:	bf00      	nop
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	20000564 	.word	0x20000564

08003e70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e74:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <SystemInit+0x20>)
 8003e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7a:	4a05      	ldr	r2, [pc, #20]	; (8003e90 <SystemInit+0x20>)
 8003e7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e84:	bf00      	nop
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	e000ed00 	.word	0xe000ed00

08003e94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003e94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ecc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e98:	480d      	ldr	r0, [pc, #52]	; (8003ed0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003e9a:	490e      	ldr	r1, [pc, #56]	; (8003ed4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003e9c:	4a0e      	ldr	r2, [pc, #56]	; (8003ed8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ea0:	e002      	b.n	8003ea8 <LoopCopyDataInit>

08003ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ea6:	3304      	adds	r3, #4

08003ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003eac:	d3f9      	bcc.n	8003ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003eae:	4a0b      	ldr	r2, [pc, #44]	; (8003edc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003eb0:	4c0b      	ldr	r4, [pc, #44]	; (8003ee0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003eb4:	e001      	b.n	8003eba <LoopFillZerobss>

08003eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003eb8:	3204      	adds	r2, #4

08003eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ebc:	d3fb      	bcc.n	8003eb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003ebe:	f7ff ffd7 	bl	8003e70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ec2:	f002 f983 	bl	80061cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ec6:	f7ff fbad 	bl	8003624 <main>
  bx  lr    
 8003eca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003ecc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ed0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ed4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8003ed8:	08007550 	.word	0x08007550
  ldr r2, =_sbss
 8003edc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8003ee0:	200005b0 	.word	0x200005b0

08003ee4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ee4:	e7fe      	b.n	8003ee4 <ADC_IRQHandler>
	...

08003ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003eec:	4b0e      	ldr	r3, [pc, #56]	; (8003f28 <HAL_Init+0x40>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a0d      	ldr	r2, [pc, #52]	; (8003f28 <HAL_Init+0x40>)
 8003ef2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ef6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ef8:	4b0b      	ldr	r3, [pc, #44]	; (8003f28 <HAL_Init+0x40>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a0a      	ldr	r2, [pc, #40]	; (8003f28 <HAL_Init+0x40>)
 8003efe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f04:	4b08      	ldr	r3, [pc, #32]	; (8003f28 <HAL_Init+0x40>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a07      	ldr	r2, [pc, #28]	; (8003f28 <HAL_Init+0x40>)
 8003f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f10:	2003      	movs	r0, #3
 8003f12:	f000 f94f 	bl	80041b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f16:	2000      	movs	r0, #0
 8003f18:	f000 f808 	bl	8003f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f1c:	f7ff fe28 	bl	8003b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	40023c00 	.word	0x40023c00

08003f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f34:	4b12      	ldr	r3, [pc, #72]	; (8003f80 <HAL_InitTick+0x54>)
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	4b12      	ldr	r3, [pc, #72]	; (8003f84 <HAL_InitTick+0x58>)
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 f967 	bl	800421e <HAL_SYSTICK_Config>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e00e      	b.n	8003f78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b0f      	cmp	r3, #15
 8003f5e:	d80a      	bhi.n	8003f76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f60:	2200      	movs	r2, #0
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	f04f 30ff 	mov.w	r0, #4294967295
 8003f68:	f000 f92f 	bl	80041ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f6c:	4a06      	ldr	r2, [pc, #24]	; (8003f88 <HAL_InitTick+0x5c>)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	e000      	b.n	8003f78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	20000004 	.word	0x20000004
 8003f84:	2000000c 	.word	0x2000000c
 8003f88:	20000008 	.word	0x20000008

08003f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f90:	4b06      	ldr	r3, [pc, #24]	; (8003fac <HAL_IncTick+0x20>)
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	461a      	mov	r2, r3
 8003f96:	4b06      	ldr	r3, [pc, #24]	; (8003fb0 <HAL_IncTick+0x24>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	4a04      	ldr	r2, [pc, #16]	; (8003fb0 <HAL_IncTick+0x24>)
 8003f9e:	6013      	str	r3, [r2, #0]
}
 8003fa0:	bf00      	nop
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	2000000c 	.word	0x2000000c
 8003fb0:	200005ac 	.word	0x200005ac

08003fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8003fb8:	4b03      	ldr	r3, [pc, #12]	; (8003fc8 <HAL_GetTick+0x14>)
 8003fba:	681b      	ldr	r3, [r3, #0]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	200005ac 	.word	0x200005ac

08003fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fd4:	f7ff ffee 	bl	8003fb4 <HAL_GetTick>
 8003fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe4:	d005      	beq.n	8003ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fe6:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <HAL_Delay+0x44>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4413      	add	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ff2:	bf00      	nop
 8003ff4:	f7ff ffde 	bl	8003fb4 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	429a      	cmp	r2, r3
 8004002:	d8f7      	bhi.n	8003ff4 <HAL_Delay+0x28>
  {
  }
}
 8004004:	bf00      	nop
 8004006:	bf00      	nop
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	2000000c 	.word	0x2000000c

08004014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004024:	4b0c      	ldr	r3, [pc, #48]	; (8004058 <__NVIC_SetPriorityGrouping+0x44>)
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004030:	4013      	ands	r3, r2
 8004032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800403c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004046:	4a04      	ldr	r2, [pc, #16]	; (8004058 <__NVIC_SetPriorityGrouping+0x44>)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	60d3      	str	r3, [r2, #12]
}
 800404c:	bf00      	nop
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	e000ed00 	.word	0xe000ed00

0800405c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004060:	4b04      	ldr	r3, [pc, #16]	; (8004074 <__NVIC_GetPriorityGrouping+0x18>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	0a1b      	lsrs	r3, r3, #8
 8004066:	f003 0307 	and.w	r3, r3, #7
}
 800406a:	4618      	mov	r0, r3
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	e000ed00 	.word	0xe000ed00

08004078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	4603      	mov	r3, r0
 8004080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004086:	2b00      	cmp	r3, #0
 8004088:	db0b      	blt.n	80040a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800408a:	79fb      	ldrb	r3, [r7, #7]
 800408c:	f003 021f 	and.w	r2, r3, #31
 8004090:	4907      	ldr	r1, [pc, #28]	; (80040b0 <__NVIC_EnableIRQ+0x38>)
 8004092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004096:	095b      	lsrs	r3, r3, #5
 8004098:	2001      	movs	r0, #1
 800409a:	fa00 f202 	lsl.w	r2, r0, r2
 800409e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	e000e100 	.word	0xe000e100

080040b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	4603      	mov	r3, r0
 80040bc:	6039      	str	r1, [r7, #0]
 80040be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	db0a      	blt.n	80040de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	490c      	ldr	r1, [pc, #48]	; (8004100 <__NVIC_SetPriority+0x4c>)
 80040ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d2:	0112      	lsls	r2, r2, #4
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	440b      	add	r3, r1
 80040d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040dc:	e00a      	b.n	80040f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	4908      	ldr	r1, [pc, #32]	; (8004104 <__NVIC_SetPriority+0x50>)
 80040e4:	79fb      	ldrb	r3, [r7, #7]
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	3b04      	subs	r3, #4
 80040ec:	0112      	lsls	r2, r2, #4
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	440b      	add	r3, r1
 80040f2:	761a      	strb	r2, [r3, #24]
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	e000e100 	.word	0xe000e100
 8004104:	e000ed00 	.word	0xe000ed00

08004108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004108:	b480      	push	{r7}
 800410a:	b089      	sub	sp, #36	; 0x24
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	f1c3 0307 	rsb	r3, r3, #7
 8004122:	2b04      	cmp	r3, #4
 8004124:	bf28      	it	cs
 8004126:	2304      	movcs	r3, #4
 8004128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	3304      	adds	r3, #4
 800412e:	2b06      	cmp	r3, #6
 8004130:	d902      	bls.n	8004138 <NVIC_EncodePriority+0x30>
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	3b03      	subs	r3, #3
 8004136:	e000      	b.n	800413a <NVIC_EncodePriority+0x32>
 8004138:	2300      	movs	r3, #0
 800413a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800413c:	f04f 32ff 	mov.w	r2, #4294967295
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	43da      	mvns	r2, r3
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	401a      	ands	r2, r3
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004150:	f04f 31ff 	mov.w	r1, #4294967295
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	fa01 f303 	lsl.w	r3, r1, r3
 800415a:	43d9      	mvns	r1, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004160:	4313      	orrs	r3, r2
         );
}
 8004162:	4618      	mov	r0, r3
 8004164:	3724      	adds	r7, #36	; 0x24
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
	...

08004170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3b01      	subs	r3, #1
 800417c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004180:	d301      	bcc.n	8004186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004182:	2301      	movs	r3, #1
 8004184:	e00f      	b.n	80041a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004186:	4a0a      	ldr	r2, [pc, #40]	; (80041b0 <SysTick_Config+0x40>)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3b01      	subs	r3, #1
 800418c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800418e:	210f      	movs	r1, #15
 8004190:	f04f 30ff 	mov.w	r0, #4294967295
 8004194:	f7ff ff8e 	bl	80040b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004198:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <SysTick_Config+0x40>)
 800419a:	2200      	movs	r2, #0
 800419c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800419e:	4b04      	ldr	r3, [pc, #16]	; (80041b0 <SysTick_Config+0x40>)
 80041a0:	2207      	movs	r2, #7
 80041a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	e000e010 	.word	0xe000e010

080041b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7ff ff29 	bl	8004014 <__NVIC_SetPriorityGrouping>
}
 80041c2:	bf00      	nop
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b086      	sub	sp, #24
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	4603      	mov	r3, r0
 80041d2:	60b9      	str	r1, [r7, #8]
 80041d4:	607a      	str	r2, [r7, #4]
 80041d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041d8:	2300      	movs	r3, #0
 80041da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041dc:	f7ff ff3e 	bl	800405c <__NVIC_GetPriorityGrouping>
 80041e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	68b9      	ldr	r1, [r7, #8]
 80041e6:	6978      	ldr	r0, [r7, #20]
 80041e8:	f7ff ff8e 	bl	8004108 <NVIC_EncodePriority>
 80041ec:	4602      	mov	r2, r0
 80041ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041f2:	4611      	mov	r1, r2
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff ff5d 	bl	80040b4 <__NVIC_SetPriority>
}
 80041fa:	bf00      	nop
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b082      	sub	sp, #8
 8004206:	af00      	add	r7, sp, #0
 8004208:	4603      	mov	r3, r0
 800420a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800420c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff ff31 	bl	8004078 <__NVIC_EnableIRQ>
}
 8004216:	bf00      	nop
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b082      	sub	sp, #8
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7ff ffa2 	bl	8004170 <SysTick_Config>
 800422c:	4603      	mov	r3, r0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
	...

08004238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004238:	b480      	push	{r7}
 800423a:	b089      	sub	sp, #36	; 0x24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004242:	2300      	movs	r3, #0
 8004244:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004246:	2300      	movs	r3, #0
 8004248:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800424a:	2300      	movs	r3, #0
 800424c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800424e:	2300      	movs	r3, #0
 8004250:	61fb      	str	r3, [r7, #28]
 8004252:	e16b      	b.n	800452c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004254:	2201      	movs	r2, #1
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	fa02 f303 	lsl.w	r3, r2, r3
 800425c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	4013      	ands	r3, r2
 8004266:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	429a      	cmp	r2, r3
 800426e:	f040 815a 	bne.w	8004526 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	2b01      	cmp	r3, #1
 800427c:	d005      	beq.n	800428a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004286:	2b02      	cmp	r3, #2
 8004288:	d130      	bne.n	80042ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	2203      	movs	r2, #3
 8004296:	fa02 f303 	lsl.w	r3, r2, r3
 800429a:	43db      	mvns	r3, r3
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	4013      	ands	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042c0:	2201      	movs	r2, #1
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	43db      	mvns	r3, r3
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	4013      	ands	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	091b      	lsrs	r3, r3, #4
 80042d6:	f003 0201 	and.w	r2, r3, #1
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f003 0303 	and.w	r3, r3, #3
 80042f4:	2b03      	cmp	r3, #3
 80042f6:	d017      	beq.n	8004328 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	005b      	lsls	r3, r3, #1
 8004302:	2203      	movs	r2, #3
 8004304:	fa02 f303 	lsl.w	r3, r2, r3
 8004308:	43db      	mvns	r3, r3
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	4013      	ands	r3, r2
 800430e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4313      	orrs	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 0303 	and.w	r3, r3, #3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d123      	bne.n	800437c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	08da      	lsrs	r2, r3, #3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3208      	adds	r2, #8
 800433c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004340:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	220f      	movs	r2, #15
 800434c:	fa02 f303 	lsl.w	r3, r2, r3
 8004350:	43db      	mvns	r3, r3
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	4013      	ands	r3, r2
 8004356:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	691a      	ldr	r2, [r3, #16]
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	f003 0307 	and.w	r3, r3, #7
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	4313      	orrs	r3, r2
 800436c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	08da      	lsrs	r2, r3, #3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	3208      	adds	r2, #8
 8004376:	69b9      	ldr	r1, [r7, #24]
 8004378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	2203      	movs	r2, #3
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	43db      	mvns	r3, r3
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	4013      	ands	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f003 0203 	and.w	r2, r3, #3
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 80b4 	beq.w	8004526 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	4b60      	ldr	r3, [pc, #384]	; (8004544 <HAL_GPIO_Init+0x30c>)
 80043c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c6:	4a5f      	ldr	r2, [pc, #380]	; (8004544 <HAL_GPIO_Init+0x30c>)
 80043c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043cc:	6453      	str	r3, [r2, #68]	; 0x44
 80043ce:	4b5d      	ldr	r3, [pc, #372]	; (8004544 <HAL_GPIO_Init+0x30c>)
 80043d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043da:	4a5b      	ldr	r2, [pc, #364]	; (8004548 <HAL_GPIO_Init+0x310>)
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	089b      	lsrs	r3, r3, #2
 80043e0:	3302      	adds	r3, #2
 80043e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	220f      	movs	r2, #15
 80043f2:	fa02 f303 	lsl.w	r3, r2, r3
 80043f6:	43db      	mvns	r3, r3
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	4013      	ands	r3, r2
 80043fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a52      	ldr	r2, [pc, #328]	; (800454c <HAL_GPIO_Init+0x314>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d02b      	beq.n	800445e <HAL_GPIO_Init+0x226>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a51      	ldr	r2, [pc, #324]	; (8004550 <HAL_GPIO_Init+0x318>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d025      	beq.n	800445a <HAL_GPIO_Init+0x222>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a50      	ldr	r2, [pc, #320]	; (8004554 <HAL_GPIO_Init+0x31c>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d01f      	beq.n	8004456 <HAL_GPIO_Init+0x21e>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a4f      	ldr	r2, [pc, #316]	; (8004558 <HAL_GPIO_Init+0x320>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d019      	beq.n	8004452 <HAL_GPIO_Init+0x21a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a4e      	ldr	r2, [pc, #312]	; (800455c <HAL_GPIO_Init+0x324>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d013      	beq.n	800444e <HAL_GPIO_Init+0x216>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a4d      	ldr	r2, [pc, #308]	; (8004560 <HAL_GPIO_Init+0x328>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d00d      	beq.n	800444a <HAL_GPIO_Init+0x212>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a4c      	ldr	r2, [pc, #304]	; (8004564 <HAL_GPIO_Init+0x32c>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d007      	beq.n	8004446 <HAL_GPIO_Init+0x20e>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a4b      	ldr	r2, [pc, #300]	; (8004568 <HAL_GPIO_Init+0x330>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d101      	bne.n	8004442 <HAL_GPIO_Init+0x20a>
 800443e:	2307      	movs	r3, #7
 8004440:	e00e      	b.n	8004460 <HAL_GPIO_Init+0x228>
 8004442:	2308      	movs	r3, #8
 8004444:	e00c      	b.n	8004460 <HAL_GPIO_Init+0x228>
 8004446:	2306      	movs	r3, #6
 8004448:	e00a      	b.n	8004460 <HAL_GPIO_Init+0x228>
 800444a:	2305      	movs	r3, #5
 800444c:	e008      	b.n	8004460 <HAL_GPIO_Init+0x228>
 800444e:	2304      	movs	r3, #4
 8004450:	e006      	b.n	8004460 <HAL_GPIO_Init+0x228>
 8004452:	2303      	movs	r3, #3
 8004454:	e004      	b.n	8004460 <HAL_GPIO_Init+0x228>
 8004456:	2302      	movs	r3, #2
 8004458:	e002      	b.n	8004460 <HAL_GPIO_Init+0x228>
 800445a:	2301      	movs	r3, #1
 800445c:	e000      	b.n	8004460 <HAL_GPIO_Init+0x228>
 800445e:	2300      	movs	r3, #0
 8004460:	69fa      	ldr	r2, [r7, #28]
 8004462:	f002 0203 	and.w	r2, r2, #3
 8004466:	0092      	lsls	r2, r2, #2
 8004468:	4093      	lsls	r3, r2
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	4313      	orrs	r3, r2
 800446e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004470:	4935      	ldr	r1, [pc, #212]	; (8004548 <HAL_GPIO_Init+0x310>)
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	089b      	lsrs	r3, r3, #2
 8004476:	3302      	adds	r3, #2
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800447e:	4b3b      	ldr	r3, [pc, #236]	; (800456c <HAL_GPIO_Init+0x334>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	43db      	mvns	r3, r3
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	4013      	ands	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	4313      	orrs	r3, r2
 80044a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044a2:	4a32      	ldr	r2, [pc, #200]	; (800456c <HAL_GPIO_Init+0x334>)
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044a8:	4b30      	ldr	r3, [pc, #192]	; (800456c <HAL_GPIO_Init+0x334>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	43db      	mvns	r3, r3
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	4013      	ands	r3, r2
 80044b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044cc:	4a27      	ldr	r2, [pc, #156]	; (800456c <HAL_GPIO_Init+0x334>)
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044d2:	4b26      	ldr	r3, [pc, #152]	; (800456c <HAL_GPIO_Init+0x334>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	43db      	mvns	r3, r3
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	4013      	ands	r3, r2
 80044e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044f6:	4a1d      	ldr	r2, [pc, #116]	; (800456c <HAL_GPIO_Init+0x334>)
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044fc:	4b1b      	ldr	r3, [pc, #108]	; (800456c <HAL_GPIO_Init+0x334>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	43db      	mvns	r3, r3
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	4013      	ands	r3, r2
 800450a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	4313      	orrs	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004520:	4a12      	ldr	r2, [pc, #72]	; (800456c <HAL_GPIO_Init+0x334>)
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	3301      	adds	r3, #1
 800452a:	61fb      	str	r3, [r7, #28]
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	2b0f      	cmp	r3, #15
 8004530:	f67f ae90 	bls.w	8004254 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004534:	bf00      	nop
 8004536:	bf00      	nop
 8004538:	3724      	adds	r7, #36	; 0x24
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	40023800 	.word	0x40023800
 8004548:	40013800 	.word	0x40013800
 800454c:	40020000 	.word	0x40020000
 8004550:	40020400 	.word	0x40020400
 8004554:	40020800 	.word	0x40020800
 8004558:	40020c00 	.word	0x40020c00
 800455c:	40021000 	.word	0x40021000
 8004560:	40021400 	.word	0x40021400
 8004564:	40021800 	.word	0x40021800
 8004568:	40021c00 	.word	0x40021c00
 800456c:	40013c00 	.word	0x40013c00

08004570 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e267      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d075      	beq.n	800467a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800458e:	4b88      	ldr	r3, [pc, #544]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 030c 	and.w	r3, r3, #12
 8004596:	2b04      	cmp	r3, #4
 8004598:	d00c      	beq.n	80045b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800459a:	4b85      	ldr	r3, [pc, #532]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045a2:	2b08      	cmp	r3, #8
 80045a4:	d112      	bne.n	80045cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045a6:	4b82      	ldr	r3, [pc, #520]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045b2:	d10b      	bne.n	80045cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b4:	4b7e      	ldr	r3, [pc, #504]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d05b      	beq.n	8004678 <HAL_RCC_OscConfig+0x108>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d157      	bne.n	8004678 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e242      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d4:	d106      	bne.n	80045e4 <HAL_RCC_OscConfig+0x74>
 80045d6:	4b76      	ldr	r3, [pc, #472]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a75      	ldr	r2, [pc, #468]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80045dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e0:	6013      	str	r3, [r2, #0]
 80045e2:	e01d      	b.n	8004620 <HAL_RCC_OscConfig+0xb0>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045ec:	d10c      	bne.n	8004608 <HAL_RCC_OscConfig+0x98>
 80045ee:	4b70      	ldr	r3, [pc, #448]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a6f      	ldr	r2, [pc, #444]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80045f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	4b6d      	ldr	r3, [pc, #436]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a6c      	ldr	r2, [pc, #432]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 8004600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004604:	6013      	str	r3, [r2, #0]
 8004606:	e00b      	b.n	8004620 <HAL_RCC_OscConfig+0xb0>
 8004608:	4b69      	ldr	r3, [pc, #420]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a68      	ldr	r2, [pc, #416]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 800460e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004612:	6013      	str	r3, [r2, #0]
 8004614:	4b66      	ldr	r3, [pc, #408]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a65      	ldr	r2, [pc, #404]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 800461a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800461e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d013      	beq.n	8004650 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004628:	f7ff fcc4 	bl	8003fb4 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004630:	f7ff fcc0 	bl	8003fb4 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b64      	cmp	r3, #100	; 0x64
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e207      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004642:	4b5b      	ldr	r3, [pc, #364]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d0f0      	beq.n	8004630 <HAL_RCC_OscConfig+0xc0>
 800464e:	e014      	b.n	800467a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004650:	f7ff fcb0 	bl	8003fb4 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004658:	f7ff fcac 	bl	8003fb4 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b64      	cmp	r3, #100	; 0x64
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e1f3      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800466a:	4b51      	ldr	r3, [pc, #324]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1f0      	bne.n	8004658 <HAL_RCC_OscConfig+0xe8>
 8004676:	e000      	b.n	800467a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d063      	beq.n	800474e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004686:	4b4a      	ldr	r3, [pc, #296]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 030c 	and.w	r3, r3, #12
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00b      	beq.n	80046aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004692:	4b47      	ldr	r3, [pc, #284]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800469a:	2b08      	cmp	r3, #8
 800469c:	d11c      	bne.n	80046d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800469e:	4b44      	ldr	r3, [pc, #272]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d116      	bne.n	80046d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046aa:	4b41      	ldr	r3, [pc, #260]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d005      	beq.n	80046c2 <HAL_RCC_OscConfig+0x152>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d001      	beq.n	80046c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e1c7      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c2:	4b3b      	ldr	r3, [pc, #236]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	4937      	ldr	r1, [pc, #220]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046d6:	e03a      	b.n	800474e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d020      	beq.n	8004722 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046e0:	4b34      	ldr	r3, [pc, #208]	; (80047b4 <HAL_RCC_OscConfig+0x244>)
 80046e2:	2201      	movs	r2, #1
 80046e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e6:	f7ff fc65 	bl	8003fb4 <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046ee:	f7ff fc61 	bl	8003fb4 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e1a8      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004700:	4b2b      	ldr	r3, [pc, #172]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0f0      	beq.n	80046ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800470c:	4b28      	ldr	r3, [pc, #160]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	4925      	ldr	r1, [pc, #148]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 800471c:	4313      	orrs	r3, r2
 800471e:	600b      	str	r3, [r1, #0]
 8004720:	e015      	b.n	800474e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004722:	4b24      	ldr	r3, [pc, #144]	; (80047b4 <HAL_RCC_OscConfig+0x244>)
 8004724:	2200      	movs	r2, #0
 8004726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004728:	f7ff fc44 	bl	8003fb4 <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004730:	f7ff fc40 	bl	8003fb4 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e187      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004742:	4b1b      	ldr	r3, [pc, #108]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f0      	bne.n	8004730 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	2b00      	cmp	r3, #0
 8004758:	d036      	beq.n	80047c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d016      	beq.n	8004790 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004762:	4b15      	ldr	r3, [pc, #84]	; (80047b8 <HAL_RCC_OscConfig+0x248>)
 8004764:	2201      	movs	r2, #1
 8004766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004768:	f7ff fc24 	bl	8003fb4 <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004770:	f7ff fc20 	bl	8003fb4 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e167      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004782:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 8004784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d0f0      	beq.n	8004770 <HAL_RCC_OscConfig+0x200>
 800478e:	e01b      	b.n	80047c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004790:	4b09      	ldr	r3, [pc, #36]	; (80047b8 <HAL_RCC_OscConfig+0x248>)
 8004792:	2200      	movs	r2, #0
 8004794:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004796:	f7ff fc0d 	bl	8003fb4 <HAL_GetTick>
 800479a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800479c:	e00e      	b.n	80047bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800479e:	f7ff fc09 	bl	8003fb4 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d907      	bls.n	80047bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e150      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
 80047b0:	40023800 	.word	0x40023800
 80047b4:	42470000 	.word	0x42470000
 80047b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047bc:	4b88      	ldr	r3, [pc, #544]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 80047be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1ea      	bne.n	800479e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0304 	and.w	r3, r3, #4
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 8097 	beq.w	8004904 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047d6:	2300      	movs	r3, #0
 80047d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047da:	4b81      	ldr	r3, [pc, #516]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10f      	bne.n	8004806 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047e6:	2300      	movs	r3, #0
 80047e8:	60bb      	str	r3, [r7, #8]
 80047ea:	4b7d      	ldr	r3, [pc, #500]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	4a7c      	ldr	r2, [pc, #496]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 80047f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f4:	6413      	str	r3, [r2, #64]	; 0x40
 80047f6:	4b7a      	ldr	r3, [pc, #488]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047fe:	60bb      	str	r3, [r7, #8]
 8004800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004802:	2301      	movs	r3, #1
 8004804:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004806:	4b77      	ldr	r3, [pc, #476]	; (80049e4 <HAL_RCC_OscConfig+0x474>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480e:	2b00      	cmp	r3, #0
 8004810:	d118      	bne.n	8004844 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004812:	4b74      	ldr	r3, [pc, #464]	; (80049e4 <HAL_RCC_OscConfig+0x474>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a73      	ldr	r2, [pc, #460]	; (80049e4 <HAL_RCC_OscConfig+0x474>)
 8004818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800481c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800481e:	f7ff fbc9 	bl	8003fb4 <HAL_GetTick>
 8004822:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004824:	e008      	b.n	8004838 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004826:	f7ff fbc5 	bl	8003fb4 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e10c      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004838:	4b6a      	ldr	r3, [pc, #424]	; (80049e4 <HAL_RCC_OscConfig+0x474>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0f0      	beq.n	8004826 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d106      	bne.n	800485a <HAL_RCC_OscConfig+0x2ea>
 800484c:	4b64      	ldr	r3, [pc, #400]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 800484e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004850:	4a63      	ldr	r2, [pc, #396]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 8004852:	f043 0301 	orr.w	r3, r3, #1
 8004856:	6713      	str	r3, [r2, #112]	; 0x70
 8004858:	e01c      	b.n	8004894 <HAL_RCC_OscConfig+0x324>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	2b05      	cmp	r3, #5
 8004860:	d10c      	bne.n	800487c <HAL_RCC_OscConfig+0x30c>
 8004862:	4b5f      	ldr	r3, [pc, #380]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 8004864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004866:	4a5e      	ldr	r2, [pc, #376]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 8004868:	f043 0304 	orr.w	r3, r3, #4
 800486c:	6713      	str	r3, [r2, #112]	; 0x70
 800486e:	4b5c      	ldr	r3, [pc, #368]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 8004870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004872:	4a5b      	ldr	r2, [pc, #364]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 8004874:	f043 0301 	orr.w	r3, r3, #1
 8004878:	6713      	str	r3, [r2, #112]	; 0x70
 800487a:	e00b      	b.n	8004894 <HAL_RCC_OscConfig+0x324>
 800487c:	4b58      	ldr	r3, [pc, #352]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 800487e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004880:	4a57      	ldr	r2, [pc, #348]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 8004882:	f023 0301 	bic.w	r3, r3, #1
 8004886:	6713      	str	r3, [r2, #112]	; 0x70
 8004888:	4b55      	ldr	r3, [pc, #340]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 800488a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488c:	4a54      	ldr	r2, [pc, #336]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 800488e:	f023 0304 	bic.w	r3, r3, #4
 8004892:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d015      	beq.n	80048c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489c:	f7ff fb8a 	bl	8003fb4 <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048a2:	e00a      	b.n	80048ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048a4:	f7ff fb86 	bl	8003fb4 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e0cb      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ba:	4b49      	ldr	r3, [pc, #292]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 80048bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d0ee      	beq.n	80048a4 <HAL_RCC_OscConfig+0x334>
 80048c6:	e014      	b.n	80048f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c8:	f7ff fb74 	bl	8003fb4 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ce:	e00a      	b.n	80048e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048d0:	f7ff fb70 	bl	8003fb4 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	f241 3288 	movw	r2, #5000	; 0x1388
 80048de:	4293      	cmp	r3, r2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e0b5      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048e6:	4b3e      	ldr	r3, [pc, #248]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 80048e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1ee      	bne.n	80048d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048f2:	7dfb      	ldrb	r3, [r7, #23]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d105      	bne.n	8004904 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048f8:	4b39      	ldr	r3, [pc, #228]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 80048fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fc:	4a38      	ldr	r2, [pc, #224]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 80048fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004902:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 80a1 	beq.w	8004a50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800490e:	4b34      	ldr	r3, [pc, #208]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 030c 	and.w	r3, r3, #12
 8004916:	2b08      	cmp	r3, #8
 8004918:	d05c      	beq.n	80049d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	2b02      	cmp	r3, #2
 8004920:	d141      	bne.n	80049a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004922:	4b31      	ldr	r3, [pc, #196]	; (80049e8 <HAL_RCC_OscConfig+0x478>)
 8004924:	2200      	movs	r2, #0
 8004926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004928:	f7ff fb44 	bl	8003fb4 <HAL_GetTick>
 800492c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004930:	f7ff fb40 	bl	8003fb4 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e087      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004942:	4b27      	ldr	r3, [pc, #156]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1f0      	bne.n	8004930 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	69da      	ldr	r2, [r3, #28]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	431a      	orrs	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	019b      	lsls	r3, r3, #6
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004964:	085b      	lsrs	r3, r3, #1
 8004966:	3b01      	subs	r3, #1
 8004968:	041b      	lsls	r3, r3, #16
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004970:	061b      	lsls	r3, r3, #24
 8004972:	491b      	ldr	r1, [pc, #108]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 8004974:	4313      	orrs	r3, r2
 8004976:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004978:	4b1b      	ldr	r3, [pc, #108]	; (80049e8 <HAL_RCC_OscConfig+0x478>)
 800497a:	2201      	movs	r2, #1
 800497c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800497e:	f7ff fb19 	bl	8003fb4 <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004984:	e008      	b.n	8004998 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004986:	f7ff fb15 	bl	8003fb4 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e05c      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004998:	4b11      	ldr	r3, [pc, #68]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0f0      	beq.n	8004986 <HAL_RCC_OscConfig+0x416>
 80049a4:	e054      	b.n	8004a50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a6:	4b10      	ldr	r3, [pc, #64]	; (80049e8 <HAL_RCC_OscConfig+0x478>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ac:	f7ff fb02 	bl	8003fb4 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049b4:	f7ff fafe 	bl	8003fb4 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e045      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c6:	4b06      	ldr	r3, [pc, #24]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f0      	bne.n	80049b4 <HAL_RCC_OscConfig+0x444>
 80049d2:	e03d      	b.n	8004a50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d107      	bne.n	80049ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e038      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
 80049e0:	40023800 	.word	0x40023800
 80049e4:	40007000 	.word	0x40007000
 80049e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049ec:	4b1b      	ldr	r3, [pc, #108]	; (8004a5c <HAL_RCC_OscConfig+0x4ec>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d028      	beq.n	8004a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d121      	bne.n	8004a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d11a      	bne.n	8004a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d111      	bne.n	8004a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a32:	085b      	lsrs	r3, r3, #1
 8004a34:	3b01      	subs	r3, #1
 8004a36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d107      	bne.n	8004a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d001      	beq.n	8004a50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e000      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3718      	adds	r7, #24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	40023800 	.word	0x40023800

08004a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e0cc      	b.n	8004c0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a74:	4b68      	ldr	r3, [pc, #416]	; (8004c18 <HAL_RCC_ClockConfig+0x1b8>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0307 	and.w	r3, r3, #7
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d90c      	bls.n	8004a9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a82:	4b65      	ldr	r3, [pc, #404]	; (8004c18 <HAL_RCC_ClockConfig+0x1b8>)
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	b2d2      	uxtb	r2, r2
 8004a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8a:	4b63      	ldr	r3, [pc, #396]	; (8004c18 <HAL_RCC_ClockConfig+0x1b8>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d001      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e0b8      	b.n	8004c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d020      	beq.n	8004aea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d005      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ab4:	4b59      	ldr	r3, [pc, #356]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	4a58      	ldr	r2, [pc, #352]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004aba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004abe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d005      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004acc:	4b53      	ldr	r3, [pc, #332]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	4a52      	ldr	r2, [pc, #328]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004ad2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ad6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ad8:	4b50      	ldr	r3, [pc, #320]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	494d      	ldr	r1, [pc, #308]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d044      	beq.n	8004b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d107      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004afe:	4b47      	ldr	r3, [pc, #284]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d119      	bne.n	8004b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e07f      	b.n	8004c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d003      	beq.n	8004b1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b1a:	2b03      	cmp	r3, #3
 8004b1c:	d107      	bne.n	8004b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b1e:	4b3f      	ldr	r3, [pc, #252]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d109      	bne.n	8004b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e06f      	b.n	8004c0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b2e:	4b3b      	ldr	r3, [pc, #236]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e067      	b.n	8004c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b3e:	4b37      	ldr	r3, [pc, #220]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f023 0203 	bic.w	r2, r3, #3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	4934      	ldr	r1, [pc, #208]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b50:	f7ff fa30 	bl	8003fb4 <HAL_GetTick>
 8004b54:	60f8      	str	r0, [r7, #12]

  while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b56:	e00a      	b.n	8004b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b58:	f7ff fa2c 	bl	8003fb4 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e04f      	b.n	8004c0e <HAL_RCC_ClockConfig+0x1ae>
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b6e:	4b2b      	ldr	r3, [pc, #172]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 020c 	and.w	r2, r3, #12
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d1eb      	bne.n	8004b58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b80:	4b25      	ldr	r3, [pc, #148]	; (8004c18 <HAL_RCC_ClockConfig+0x1b8>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0307 	and.w	r3, r3, #7
 8004b88:	683a      	ldr	r2, [r7, #0]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d20c      	bcs.n	8004ba8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b8e:	4b22      	ldr	r3, [pc, #136]	; (8004c18 <HAL_RCC_ClockConfig+0x1b8>)
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b96:	4b20      	ldr	r3, [pc, #128]	; (8004c18 <HAL_RCC_ClockConfig+0x1b8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d001      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e032      	b.n	8004c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d008      	beq.n	8004bc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bb4:	4b19      	ldr	r3, [pc, #100]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	4916      	ldr	r1, [pc, #88]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d009      	beq.n	8004be6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bd2:	4b12      	ldr	r3, [pc, #72]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	490e      	ldr	r1, [pc, #56]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004be6:	f000 f821 	bl	8004c2c <HAL_RCC_GetSysClockFreq>
 8004bea:	4602      	mov	r2, r0
 8004bec:	4b0b      	ldr	r3, [pc, #44]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	091b      	lsrs	r3, r3, #4
 8004bf2:	f003 030f 	and.w	r3, r3, #15
 8004bf6:	490a      	ldr	r1, [pc, #40]	; (8004c20 <HAL_RCC_ClockConfig+0x1c0>)
 8004bf8:	5ccb      	ldrb	r3, [r1, r3]
 8004bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8004bfe:	4a09      	ldr	r2, [pc, #36]	; (8004c24 <HAL_RCC_ClockConfig+0x1c4>)
 8004c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c02:	4b09      	ldr	r3, [pc, #36]	; (8004c28 <HAL_RCC_ClockConfig+0x1c8>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7ff f990 	bl	8003f2c <HAL_InitTick>

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	40023c00 	.word	0x40023c00
 8004c1c:	40023800 	.word	0x40023800
 8004c20:	08007358 	.word	0x08007358
 8004c24:	20000004 	.word	0x20000004
 8004c28:	20000008 	.word	0x20000008

08004c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c30:	b094      	sub	sp, #80	; 0x50
 8004c32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	647b      	str	r3, [r7, #68]	; 0x44
 8004c38:	2300      	movs	r3, #0
 8004c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c44:	4b79      	ldr	r3, [pc, #484]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f003 030c 	and.w	r3, r3, #12
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d00d      	beq.n	8004c6c <HAL_RCC_GetSysClockFreq+0x40>
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	f200 80e1 	bhi.w	8004e18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <HAL_RCC_GetSysClockFreq+0x34>
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d003      	beq.n	8004c66 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c5e:	e0db      	b.n	8004e18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c60:	4b73      	ldr	r3, [pc, #460]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c62:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c64:	e0db      	b.n	8004e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c66:	4b73      	ldr	r3, [pc, #460]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c6a:	e0d8      	b.n	8004e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c6c:	4b6f      	ldr	r3, [pc, #444]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c74:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c76:	4b6d      	ldr	r3, [pc, #436]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d063      	beq.n	8004d4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c82:	4b6a      	ldr	r3, [pc, #424]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	099b      	lsrs	r3, r3, #6
 8004c88:	2200      	movs	r2, #0
 8004c8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c94:	633b      	str	r3, [r7, #48]	; 0x30
 8004c96:	2300      	movs	r3, #0
 8004c98:	637b      	str	r3, [r7, #52]	; 0x34
 8004c9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c9e:	4622      	mov	r2, r4
 8004ca0:	462b      	mov	r3, r5
 8004ca2:	f04f 0000 	mov.w	r0, #0
 8004ca6:	f04f 0100 	mov.w	r1, #0
 8004caa:	0159      	lsls	r1, r3, #5
 8004cac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cb0:	0150      	lsls	r0, r2, #5
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	4621      	mov	r1, r4
 8004cb8:	1a51      	subs	r1, r2, r1
 8004cba:	6139      	str	r1, [r7, #16]
 8004cbc:	4629      	mov	r1, r5
 8004cbe:	eb63 0301 	sbc.w	r3, r3, r1
 8004cc2:	617b      	str	r3, [r7, #20]
 8004cc4:	f04f 0200 	mov.w	r2, #0
 8004cc8:	f04f 0300 	mov.w	r3, #0
 8004ccc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cd0:	4659      	mov	r1, fp
 8004cd2:	018b      	lsls	r3, r1, #6
 8004cd4:	4651      	mov	r1, sl
 8004cd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cda:	4651      	mov	r1, sl
 8004cdc:	018a      	lsls	r2, r1, #6
 8004cde:	4651      	mov	r1, sl
 8004ce0:	ebb2 0801 	subs.w	r8, r2, r1
 8004ce4:	4659      	mov	r1, fp
 8004ce6:	eb63 0901 	sbc.w	r9, r3, r1
 8004cea:	f04f 0200 	mov.w	r2, #0
 8004cee:	f04f 0300 	mov.w	r3, #0
 8004cf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cfe:	4690      	mov	r8, r2
 8004d00:	4699      	mov	r9, r3
 8004d02:	4623      	mov	r3, r4
 8004d04:	eb18 0303 	adds.w	r3, r8, r3
 8004d08:	60bb      	str	r3, [r7, #8]
 8004d0a:	462b      	mov	r3, r5
 8004d0c:	eb49 0303 	adc.w	r3, r9, r3
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	f04f 0200 	mov.w	r2, #0
 8004d16:	f04f 0300 	mov.w	r3, #0
 8004d1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d1e:	4629      	mov	r1, r5
 8004d20:	024b      	lsls	r3, r1, #9
 8004d22:	4621      	mov	r1, r4
 8004d24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d28:	4621      	mov	r1, r4
 8004d2a:	024a      	lsls	r2, r1, #9
 8004d2c:	4610      	mov	r0, r2
 8004d2e:	4619      	mov	r1, r3
 8004d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d32:	2200      	movs	r2, #0
 8004d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d3c:	f7fb fec2 	bl	8000ac4 <__aeabi_uldivmod>
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	4613      	mov	r3, r2
 8004d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d48:	e058      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d4a:	4b38      	ldr	r3, [pc, #224]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	099b      	lsrs	r3, r3, #6
 8004d50:	2200      	movs	r2, #0
 8004d52:	4618      	mov	r0, r3
 8004d54:	4611      	mov	r1, r2
 8004d56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d5a:	623b      	str	r3, [r7, #32]
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d64:	4642      	mov	r2, r8
 8004d66:	464b      	mov	r3, r9
 8004d68:	f04f 0000 	mov.w	r0, #0
 8004d6c:	f04f 0100 	mov.w	r1, #0
 8004d70:	0159      	lsls	r1, r3, #5
 8004d72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d76:	0150      	lsls	r0, r2, #5
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4641      	mov	r1, r8
 8004d7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d82:	4649      	mov	r1, r9
 8004d84:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d9c:	ebb2 040a 	subs.w	r4, r2, sl
 8004da0:	eb63 050b 	sbc.w	r5, r3, fp
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	00eb      	lsls	r3, r5, #3
 8004dae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004db2:	00e2      	lsls	r2, r4, #3
 8004db4:	4614      	mov	r4, r2
 8004db6:	461d      	mov	r5, r3
 8004db8:	4643      	mov	r3, r8
 8004dba:	18e3      	adds	r3, r4, r3
 8004dbc:	603b      	str	r3, [r7, #0]
 8004dbe:	464b      	mov	r3, r9
 8004dc0:	eb45 0303 	adc.w	r3, r5, r3
 8004dc4:	607b      	str	r3, [r7, #4]
 8004dc6:	f04f 0200 	mov.w	r2, #0
 8004dca:	f04f 0300 	mov.w	r3, #0
 8004dce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dd2:	4629      	mov	r1, r5
 8004dd4:	028b      	lsls	r3, r1, #10
 8004dd6:	4621      	mov	r1, r4
 8004dd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ddc:	4621      	mov	r1, r4
 8004dde:	028a      	lsls	r2, r1, #10
 8004de0:	4610      	mov	r0, r2
 8004de2:	4619      	mov	r1, r3
 8004de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004de6:	2200      	movs	r2, #0
 8004de8:	61bb      	str	r3, [r7, #24]
 8004dea:	61fa      	str	r2, [r7, #28]
 8004dec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004df0:	f7fb fe68 	bl	8000ac4 <__aeabi_uldivmod>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	4613      	mov	r3, r2
 8004dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004dfc:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	0c1b      	lsrs	r3, r3, #16
 8004e02:	f003 0303 	and.w	r3, r3, #3
 8004e06:	3301      	adds	r3, #1
 8004e08:	005b      	lsls	r3, r3, #1
 8004e0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004e0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e16:	e002      	b.n	8004e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e18:	4b05      	ldr	r3, [pc, #20]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3750      	adds	r7, #80	; 0x50
 8004e24:	46bd      	mov	sp, r7
 8004e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e2a:	bf00      	nop
 8004e2c:	40023800 	.word	0x40023800
 8004e30:	00f42400 	.word	0x00f42400
 8004e34:	007a1200 	.word	0x007a1200

08004e38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e041      	b.n	8004ece <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d106      	bne.n	8004e64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7fe feae 	bl	8003bc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3304      	adds	r3, #4
 8004e74:	4619      	mov	r1, r3
 8004e76:	4610      	mov	r0, r2
 8004e78:	f000 fdae 	bl	80059d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
	...

08004ed8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d001      	beq.n	8004ef0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e04e      	b.n	8004f8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68da      	ldr	r2, [r3, #12]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f042 0201 	orr.w	r2, r2, #1
 8004f06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a23      	ldr	r2, [pc, #140]	; (8004f9c <HAL_TIM_Base_Start_IT+0xc4>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d022      	beq.n	8004f58 <HAL_TIM_Base_Start_IT+0x80>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f1a:	d01d      	beq.n	8004f58 <HAL_TIM_Base_Start_IT+0x80>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a1f      	ldr	r2, [pc, #124]	; (8004fa0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d018      	beq.n	8004f58 <HAL_TIM_Base_Start_IT+0x80>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a1e      	ldr	r2, [pc, #120]	; (8004fa4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d013      	beq.n	8004f58 <HAL_TIM_Base_Start_IT+0x80>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a1c      	ldr	r2, [pc, #112]	; (8004fa8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d00e      	beq.n	8004f58 <HAL_TIM_Base_Start_IT+0x80>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a1b      	ldr	r2, [pc, #108]	; (8004fac <HAL_TIM_Base_Start_IT+0xd4>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d009      	beq.n	8004f58 <HAL_TIM_Base_Start_IT+0x80>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a19      	ldr	r2, [pc, #100]	; (8004fb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d004      	beq.n	8004f58 <HAL_TIM_Base_Start_IT+0x80>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a18      	ldr	r2, [pc, #96]	; (8004fb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d111      	bne.n	8004f7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2b06      	cmp	r3, #6
 8004f68:	d010      	beq.n	8004f8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f042 0201 	orr.w	r2, r2, #1
 8004f78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f7a:	e007      	b.n	8004f8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0201 	orr.w	r2, r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	40010000 	.word	0x40010000
 8004fa0:	40000400 	.word	0x40000400
 8004fa4:	40000800 	.word	0x40000800
 8004fa8:	40000c00 	.word	0x40000c00
 8004fac:	40010400 	.word	0x40010400
 8004fb0:	40014000 	.word	0x40014000
 8004fb4:	40001800 	.word	0x40001800

08004fb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e041      	b.n	800504e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d106      	bne.n	8004fe4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f839 	bl	8005056 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	f000 fcee 	bl	80059d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
	...

0800506c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d109      	bne.n	8005090 <HAL_TIM_PWM_Start+0x24>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b01      	cmp	r3, #1
 8005086:	bf14      	ite	ne
 8005088:	2301      	movne	r3, #1
 800508a:	2300      	moveq	r3, #0
 800508c:	b2db      	uxtb	r3, r3
 800508e:	e022      	b.n	80050d6 <HAL_TIM_PWM_Start+0x6a>
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	2b04      	cmp	r3, #4
 8005094:	d109      	bne.n	80050aa <HAL_TIM_PWM_Start+0x3e>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b01      	cmp	r3, #1
 80050a0:	bf14      	ite	ne
 80050a2:	2301      	movne	r3, #1
 80050a4:	2300      	moveq	r3, #0
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	e015      	b.n	80050d6 <HAL_TIM_PWM_Start+0x6a>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b08      	cmp	r3, #8
 80050ae:	d109      	bne.n	80050c4 <HAL_TIM_PWM_Start+0x58>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	bf14      	ite	ne
 80050bc:	2301      	movne	r3, #1
 80050be:	2300      	moveq	r3, #0
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	e008      	b.n	80050d6 <HAL_TIM_PWM_Start+0x6a>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	bf14      	ite	ne
 80050d0:	2301      	movne	r3, #1
 80050d2:	2300      	moveq	r3, #0
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e07c      	b.n	80051d8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d104      	bne.n	80050ee <HAL_TIM_PWM_Start+0x82>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050ec:	e013      	b.n	8005116 <HAL_TIM_PWM_Start+0xaa>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b04      	cmp	r3, #4
 80050f2:	d104      	bne.n	80050fe <HAL_TIM_PWM_Start+0x92>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050fc:	e00b      	b.n	8005116 <HAL_TIM_PWM_Start+0xaa>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b08      	cmp	r3, #8
 8005102:	d104      	bne.n	800510e <HAL_TIM_PWM_Start+0xa2>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800510c:	e003      	b.n	8005116 <HAL_TIM_PWM_Start+0xaa>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2202      	movs	r2, #2
 8005112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2201      	movs	r2, #1
 800511c:	6839      	ldr	r1, [r7, #0]
 800511e:	4618      	mov	r0, r3
 8005120:	f000 ff44 	bl	8005fac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a2d      	ldr	r2, [pc, #180]	; (80051e0 <HAL_TIM_PWM_Start+0x174>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d004      	beq.n	8005138 <HAL_TIM_PWM_Start+0xcc>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a2c      	ldr	r2, [pc, #176]	; (80051e4 <HAL_TIM_PWM_Start+0x178>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d101      	bne.n	800513c <HAL_TIM_PWM_Start+0xd0>
 8005138:	2301      	movs	r3, #1
 800513a:	e000      	b.n	800513e <HAL_TIM_PWM_Start+0xd2>
 800513c:	2300      	movs	r3, #0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d007      	beq.n	8005152 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005150:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a22      	ldr	r2, [pc, #136]	; (80051e0 <HAL_TIM_PWM_Start+0x174>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d022      	beq.n	80051a2 <HAL_TIM_PWM_Start+0x136>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005164:	d01d      	beq.n	80051a2 <HAL_TIM_PWM_Start+0x136>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a1f      	ldr	r2, [pc, #124]	; (80051e8 <HAL_TIM_PWM_Start+0x17c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d018      	beq.n	80051a2 <HAL_TIM_PWM_Start+0x136>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a1d      	ldr	r2, [pc, #116]	; (80051ec <HAL_TIM_PWM_Start+0x180>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d013      	beq.n	80051a2 <HAL_TIM_PWM_Start+0x136>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a1c      	ldr	r2, [pc, #112]	; (80051f0 <HAL_TIM_PWM_Start+0x184>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d00e      	beq.n	80051a2 <HAL_TIM_PWM_Start+0x136>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a16      	ldr	r2, [pc, #88]	; (80051e4 <HAL_TIM_PWM_Start+0x178>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d009      	beq.n	80051a2 <HAL_TIM_PWM_Start+0x136>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a18      	ldr	r2, [pc, #96]	; (80051f4 <HAL_TIM_PWM_Start+0x188>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d004      	beq.n	80051a2 <HAL_TIM_PWM_Start+0x136>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a16      	ldr	r2, [pc, #88]	; (80051f8 <HAL_TIM_PWM_Start+0x18c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d111      	bne.n	80051c6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2b06      	cmp	r3, #6
 80051b2:	d010      	beq.n	80051d6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0201 	orr.w	r2, r2, #1
 80051c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c4:	e007      	b.n	80051d6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f042 0201 	orr.w	r2, r2, #1
 80051d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	40010000 	.word	0x40010000
 80051e4:	40010400 	.word	0x40010400
 80051e8:	40000400 	.word	0x40000400
 80051ec:	40000800 	.word	0x40000800
 80051f0:	40000c00 	.word	0x40000c00
 80051f4:	40014000 	.word	0x40014000
 80051f8:	40001800 	.word	0x40001800

080051fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e097      	b.n	8005340 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d106      	bne.n	800522a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7fe fd09 	bl	8003c3c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2202      	movs	r2, #2
 800522e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	6812      	ldr	r2, [r2, #0]
 800523c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005240:	f023 0307 	bic.w	r3, r3, #7
 8005244:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	3304      	adds	r3, #4
 800524e:	4619      	mov	r1, r3
 8005250:	4610      	mov	r0, r2
 8005252:	f000 fbc1 	bl	80059d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	4313      	orrs	r3, r2
 8005276:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800527e:	f023 0303 	bic.w	r3, r3, #3
 8005282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	021b      	lsls	r3, r3, #8
 800528e:	4313      	orrs	r3, r2
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4313      	orrs	r3, r2
 8005294:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800529c:	f023 030c 	bic.w	r3, r3, #12
 80052a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	021b      	lsls	r3, r3, #8
 80052b8:	4313      	orrs	r3, r2
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	4313      	orrs	r3, r2
 80052be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	011a      	lsls	r2, r3, #4
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	031b      	lsls	r3, r3, #12
 80052cc:	4313      	orrs	r3, r2
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80052da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80052e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	011b      	lsls	r3, r3, #4
 80052ee:	4313      	orrs	r3, r2
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3718      	adds	r7, #24
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005358:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005360:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005368:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005370:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d110      	bne.n	800539a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005378:	7bfb      	ldrb	r3, [r7, #15]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d102      	bne.n	8005384 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800537e:	7b7b      	ldrb	r3, [r7, #13]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d001      	beq.n	8005388 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e069      	b.n	800545c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005398:	e031      	b.n	80053fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b04      	cmp	r3, #4
 800539e:	d110      	bne.n	80053c2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80053a0:	7bbb      	ldrb	r3, [r7, #14]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d102      	bne.n	80053ac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80053a6:	7b3b      	ldrb	r3, [r7, #12]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d001      	beq.n	80053b0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e055      	b.n	800545c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2202      	movs	r2, #2
 80053b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053c0:	e01d      	b.n	80053fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d108      	bne.n	80053da <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80053c8:	7bbb      	ldrb	r3, [r7, #14]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d105      	bne.n	80053da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80053ce:	7b7b      	ldrb	r3, [r7, #13]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d102      	bne.n	80053da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80053d4:	7b3b      	ldrb	r3, [r7, #12]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d001      	beq.n	80053de <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e03e      	b.n	800545c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2202      	movs	r2, #2
 80053e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2202      	movs	r2, #2
 80053ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2202      	movs	r2, #2
 80053f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2202      	movs	r2, #2
 80053fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d003      	beq.n	800540c <HAL_TIM_Encoder_Start+0xc4>
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2b04      	cmp	r3, #4
 8005408:	d008      	beq.n	800541c <HAL_TIM_Encoder_Start+0xd4>
 800540a:	e00f      	b.n	800542c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2201      	movs	r2, #1
 8005412:	2100      	movs	r1, #0
 8005414:	4618      	mov	r0, r3
 8005416:	f000 fdc9 	bl	8005fac <TIM_CCxChannelCmd>
      break;
 800541a:	e016      	b.n	800544a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2201      	movs	r2, #1
 8005422:	2104      	movs	r1, #4
 8005424:	4618      	mov	r0, r3
 8005426:	f000 fdc1 	bl	8005fac <TIM_CCxChannelCmd>
      break;
 800542a:	e00e      	b.n	800544a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2201      	movs	r2, #1
 8005432:	2100      	movs	r1, #0
 8005434:	4618      	mov	r0, r3
 8005436:	f000 fdb9 	bl	8005fac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2201      	movs	r2, #1
 8005440:	2104      	movs	r1, #4
 8005442:	4618      	mov	r0, r3
 8005444:	f000 fdb2 	bl	8005fac <TIM_CCxChannelCmd>
      break;
 8005448:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f042 0201 	orr.w	r2, r2, #1
 8005458:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b02      	cmp	r3, #2
 8005478:	d122      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b02      	cmp	r3, #2
 8005486:	d11b      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f06f 0202 	mvn.w	r2, #2
 8005490:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fa77 	bl	800599a <HAL_TIM_IC_CaptureCallback>
 80054ac:	e005      	b.n	80054ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 fa69 	bl	8005986 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 fa7a 	bl	80059ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	f003 0304 	and.w	r3, r3, #4
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d122      	bne.n	8005514 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	2b04      	cmp	r3, #4
 80054da:	d11b      	bne.n	8005514 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f06f 0204 	mvn.w	r2, #4
 80054e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2202      	movs	r2, #2
 80054ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fa4d 	bl	800599a <HAL_TIM_IC_CaptureCallback>
 8005500:	e005      	b.n	800550e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fa3f 	bl	8005986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 fa50 	bl	80059ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	f003 0308 	and.w	r3, r3, #8
 800551e:	2b08      	cmp	r3, #8
 8005520:	d122      	bne.n	8005568 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	f003 0308 	and.w	r3, r3, #8
 800552c:	2b08      	cmp	r3, #8
 800552e:	d11b      	bne.n	8005568 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f06f 0208 	mvn.w	r2, #8
 8005538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2204      	movs	r2, #4
 800553e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	f003 0303 	and.w	r3, r3, #3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 fa23 	bl	800599a <HAL_TIM_IC_CaptureCallback>
 8005554:	e005      	b.n	8005562 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 fa15 	bl	8005986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 fa26 	bl	80059ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	f003 0310 	and.w	r3, r3, #16
 8005572:	2b10      	cmp	r3, #16
 8005574:	d122      	bne.n	80055bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f003 0310 	and.w	r3, r3, #16
 8005580:	2b10      	cmp	r3, #16
 8005582:	d11b      	bne.n	80055bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f06f 0210 	mvn.w	r2, #16
 800558c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2208      	movs	r2, #8
 8005592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d003      	beq.n	80055aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f9f9 	bl	800599a <HAL_TIM_IC_CaptureCallback>
 80055a8:	e005      	b.n	80055b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f9eb 	bl	8005986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f9fc 	bl	80059ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d10e      	bne.n	80055e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d107      	bne.n	80055e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f06f 0201 	mvn.w	r2, #1
 80055e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7fe f80e 	bl	8003604 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f2:	2b80      	cmp	r3, #128	; 0x80
 80055f4:	d10e      	bne.n	8005614 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005600:	2b80      	cmp	r3, #128	; 0x80
 8005602:	d107      	bne.n	8005614 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800560c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fdca 	bl	80061a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561e:	2b40      	cmp	r3, #64	; 0x40
 8005620:	d10e      	bne.n	8005640 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800562c:	2b40      	cmp	r3, #64	; 0x40
 800562e:	d107      	bne.n	8005640 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f9c1 	bl	80059c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	f003 0320 	and.w	r3, r3, #32
 800564a:	2b20      	cmp	r3, #32
 800564c:	d10e      	bne.n	800566c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f003 0320 	and.w	r3, r3, #32
 8005658:	2b20      	cmp	r3, #32
 800565a:	d107      	bne.n	800566c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f06f 0220 	mvn.w	r2, #32
 8005664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 fd94 	bl	8006194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800566c:	bf00      	nop
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005680:	2300      	movs	r3, #0
 8005682:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800568a:	2b01      	cmp	r3, #1
 800568c:	d101      	bne.n	8005692 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800568e:	2302      	movs	r3, #2
 8005690:	e0ae      	b.n	80057f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b0c      	cmp	r3, #12
 800569e:	f200 809f 	bhi.w	80057e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80056a2:	a201      	add	r2, pc, #4	; (adr r2, 80056a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a8:	080056dd 	.word	0x080056dd
 80056ac:	080057e1 	.word	0x080057e1
 80056b0:	080057e1 	.word	0x080057e1
 80056b4:	080057e1 	.word	0x080057e1
 80056b8:	0800571d 	.word	0x0800571d
 80056bc:	080057e1 	.word	0x080057e1
 80056c0:	080057e1 	.word	0x080057e1
 80056c4:	080057e1 	.word	0x080057e1
 80056c8:	0800575f 	.word	0x0800575f
 80056cc:	080057e1 	.word	0x080057e1
 80056d0:	080057e1 	.word	0x080057e1
 80056d4:	080057e1 	.word	0x080057e1
 80056d8:	0800579f 	.word	0x0800579f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68b9      	ldr	r1, [r7, #8]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 fa18 	bl	8005b18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	699a      	ldr	r2, [r3, #24]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f042 0208 	orr.w	r2, r2, #8
 80056f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699a      	ldr	r2, [r3, #24]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 0204 	bic.w	r2, r2, #4
 8005706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6999      	ldr	r1, [r3, #24]
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	691a      	ldr	r2, [r3, #16]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	619a      	str	r2, [r3, #24]
      break;
 800571a:	e064      	b.n	80057e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68b9      	ldr	r1, [r7, #8]
 8005722:	4618      	mov	r0, r3
 8005724:	f000 fa68 	bl	8005bf8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699a      	ldr	r2, [r3, #24]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	699a      	ldr	r2, [r3, #24]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6999      	ldr	r1, [r3, #24]
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	021a      	lsls	r2, r3, #8
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	430a      	orrs	r2, r1
 800575a:	619a      	str	r2, [r3, #24]
      break;
 800575c:	e043      	b.n	80057e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68b9      	ldr	r1, [r7, #8]
 8005764:	4618      	mov	r0, r3
 8005766:	f000 fabd 	bl	8005ce4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	69da      	ldr	r2, [r3, #28]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f042 0208 	orr.w	r2, r2, #8
 8005778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	69da      	ldr	r2, [r3, #28]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0204 	bic.w	r2, r2, #4
 8005788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	69d9      	ldr	r1, [r3, #28]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	691a      	ldr	r2, [r3, #16]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	61da      	str	r2, [r3, #28]
      break;
 800579c:	e023      	b.n	80057e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68b9      	ldr	r1, [r7, #8]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f000 fb11 	bl	8005dcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	69da      	ldr	r2, [r3, #28]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	69da      	ldr	r2, [r3, #28]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	69d9      	ldr	r1, [r3, #28]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	021a      	lsls	r2, r3, #8
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	61da      	str	r2, [r3, #28]
      break;
 80057de:	e002      	b.n	80057e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	75fb      	strb	r3, [r7, #23]
      break;
 80057e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3718      	adds	r7, #24
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005802:	2300      	movs	r3, #0
 8005804:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <HAL_TIM_ConfigClockSource+0x1c>
 8005810:	2302      	movs	r3, #2
 8005812:	e0b4      	b.n	800597e <HAL_TIM_ConfigClockSource+0x186>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005832:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800583a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800584c:	d03e      	beq.n	80058cc <HAL_TIM_ConfigClockSource+0xd4>
 800584e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005852:	f200 8087 	bhi.w	8005964 <HAL_TIM_ConfigClockSource+0x16c>
 8005856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800585a:	f000 8086 	beq.w	800596a <HAL_TIM_ConfigClockSource+0x172>
 800585e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005862:	d87f      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x16c>
 8005864:	2b70      	cmp	r3, #112	; 0x70
 8005866:	d01a      	beq.n	800589e <HAL_TIM_ConfigClockSource+0xa6>
 8005868:	2b70      	cmp	r3, #112	; 0x70
 800586a:	d87b      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x16c>
 800586c:	2b60      	cmp	r3, #96	; 0x60
 800586e:	d050      	beq.n	8005912 <HAL_TIM_ConfigClockSource+0x11a>
 8005870:	2b60      	cmp	r3, #96	; 0x60
 8005872:	d877      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x16c>
 8005874:	2b50      	cmp	r3, #80	; 0x50
 8005876:	d03c      	beq.n	80058f2 <HAL_TIM_ConfigClockSource+0xfa>
 8005878:	2b50      	cmp	r3, #80	; 0x50
 800587a:	d873      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x16c>
 800587c:	2b40      	cmp	r3, #64	; 0x40
 800587e:	d058      	beq.n	8005932 <HAL_TIM_ConfigClockSource+0x13a>
 8005880:	2b40      	cmp	r3, #64	; 0x40
 8005882:	d86f      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x16c>
 8005884:	2b30      	cmp	r3, #48	; 0x30
 8005886:	d064      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x15a>
 8005888:	2b30      	cmp	r3, #48	; 0x30
 800588a:	d86b      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x16c>
 800588c:	2b20      	cmp	r3, #32
 800588e:	d060      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x15a>
 8005890:	2b20      	cmp	r3, #32
 8005892:	d867      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x16c>
 8005894:	2b00      	cmp	r3, #0
 8005896:	d05c      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x15a>
 8005898:	2b10      	cmp	r3, #16
 800589a:	d05a      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x15a>
 800589c:	e062      	b.n	8005964 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6818      	ldr	r0, [r3, #0]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	6899      	ldr	r1, [r3, #8]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f000 fb5d 	bl	8005f6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	609a      	str	r2, [r3, #8]
      break;
 80058ca:	e04f      	b.n	800596c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6818      	ldr	r0, [r3, #0]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	6899      	ldr	r1, [r3, #8]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f000 fb46 	bl	8005f6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058ee:	609a      	str	r2, [r3, #8]
      break;
 80058f0:	e03c      	b.n	800596c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6818      	ldr	r0, [r3, #0]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	6859      	ldr	r1, [r3, #4]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	461a      	mov	r2, r3
 8005900:	f000 faba 	bl	8005e78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2150      	movs	r1, #80	; 0x50
 800590a:	4618      	mov	r0, r3
 800590c:	f000 fb13 	bl	8005f36 <TIM_ITRx_SetConfig>
      break;
 8005910:	e02c      	b.n	800596c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6818      	ldr	r0, [r3, #0]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	6859      	ldr	r1, [r3, #4]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	461a      	mov	r2, r3
 8005920:	f000 fad9 	bl	8005ed6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2160      	movs	r1, #96	; 0x60
 800592a:	4618      	mov	r0, r3
 800592c:	f000 fb03 	bl	8005f36 <TIM_ITRx_SetConfig>
      break;
 8005930:	e01c      	b.n	800596c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6818      	ldr	r0, [r3, #0]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	6859      	ldr	r1, [r3, #4]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	461a      	mov	r2, r3
 8005940:	f000 fa9a 	bl	8005e78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2140      	movs	r1, #64	; 0x40
 800594a:	4618      	mov	r0, r3
 800594c:	f000 faf3 	bl	8005f36 <TIM_ITRx_SetConfig>
      break;
 8005950:	e00c      	b.n	800596c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4619      	mov	r1, r3
 800595c:	4610      	mov	r0, r2
 800595e:	f000 faea 	bl	8005f36 <TIM_ITRx_SetConfig>
      break;
 8005962:	e003      	b.n	800596c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	73fb      	strb	r3, [r7, #15]
      break;
 8005968:	e000      	b.n	800596c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800596a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800597c:	7bfb      	ldrb	r3, [r7, #15]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059b6:	bf00      	nop
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b083      	sub	sp, #12
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059ca:	bf00      	nop
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
	...

080059d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a40      	ldr	r2, [pc, #256]	; (8005aec <TIM_Base_SetConfig+0x114>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d013      	beq.n	8005a18 <TIM_Base_SetConfig+0x40>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f6:	d00f      	beq.n	8005a18 <TIM_Base_SetConfig+0x40>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a3d      	ldr	r2, [pc, #244]	; (8005af0 <TIM_Base_SetConfig+0x118>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d00b      	beq.n	8005a18 <TIM_Base_SetConfig+0x40>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a3c      	ldr	r2, [pc, #240]	; (8005af4 <TIM_Base_SetConfig+0x11c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d007      	beq.n	8005a18 <TIM_Base_SetConfig+0x40>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a3b      	ldr	r2, [pc, #236]	; (8005af8 <TIM_Base_SetConfig+0x120>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d003      	beq.n	8005a18 <TIM_Base_SetConfig+0x40>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a3a      	ldr	r2, [pc, #232]	; (8005afc <TIM_Base_SetConfig+0x124>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d108      	bne.n	8005a2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a2f      	ldr	r2, [pc, #188]	; (8005aec <TIM_Base_SetConfig+0x114>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d02b      	beq.n	8005a8a <TIM_Base_SetConfig+0xb2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a38:	d027      	beq.n	8005a8a <TIM_Base_SetConfig+0xb2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a2c      	ldr	r2, [pc, #176]	; (8005af0 <TIM_Base_SetConfig+0x118>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d023      	beq.n	8005a8a <TIM_Base_SetConfig+0xb2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a2b      	ldr	r2, [pc, #172]	; (8005af4 <TIM_Base_SetConfig+0x11c>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d01f      	beq.n	8005a8a <TIM_Base_SetConfig+0xb2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a2a      	ldr	r2, [pc, #168]	; (8005af8 <TIM_Base_SetConfig+0x120>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d01b      	beq.n	8005a8a <TIM_Base_SetConfig+0xb2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a29      	ldr	r2, [pc, #164]	; (8005afc <TIM_Base_SetConfig+0x124>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d017      	beq.n	8005a8a <TIM_Base_SetConfig+0xb2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a28      	ldr	r2, [pc, #160]	; (8005b00 <TIM_Base_SetConfig+0x128>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d013      	beq.n	8005a8a <TIM_Base_SetConfig+0xb2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a27      	ldr	r2, [pc, #156]	; (8005b04 <TIM_Base_SetConfig+0x12c>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d00f      	beq.n	8005a8a <TIM_Base_SetConfig+0xb2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a26      	ldr	r2, [pc, #152]	; (8005b08 <TIM_Base_SetConfig+0x130>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d00b      	beq.n	8005a8a <TIM_Base_SetConfig+0xb2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a25      	ldr	r2, [pc, #148]	; (8005b0c <TIM_Base_SetConfig+0x134>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d007      	beq.n	8005a8a <TIM_Base_SetConfig+0xb2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a24      	ldr	r2, [pc, #144]	; (8005b10 <TIM_Base_SetConfig+0x138>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d003      	beq.n	8005a8a <TIM_Base_SetConfig+0xb2>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a23      	ldr	r2, [pc, #140]	; (8005b14 <TIM_Base_SetConfig+0x13c>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d108      	bne.n	8005a9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	689a      	ldr	r2, [r3, #8]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a0a      	ldr	r2, [pc, #40]	; (8005aec <TIM_Base_SetConfig+0x114>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d003      	beq.n	8005ad0 <TIM_Base_SetConfig+0xf8>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a0c      	ldr	r2, [pc, #48]	; (8005afc <TIM_Base_SetConfig+0x124>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d103      	bne.n	8005ad8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	691a      	ldr	r2, [r3, #16]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	615a      	str	r2, [r3, #20]
}
 8005ade:	bf00      	nop
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	40010000 	.word	0x40010000
 8005af0:	40000400 	.word	0x40000400
 8005af4:	40000800 	.word	0x40000800
 8005af8:	40000c00 	.word	0x40000c00
 8005afc:	40010400 	.word	0x40010400
 8005b00:	40014000 	.word	0x40014000
 8005b04:	40014400 	.word	0x40014400
 8005b08:	40014800 	.word	0x40014800
 8005b0c:	40001800 	.word	0x40001800
 8005b10:	40001c00 	.word	0x40001c00
 8005b14:	40002000 	.word	0x40002000

08005b18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	f023 0201 	bic.w	r2, r3, #1
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f023 0303 	bic.w	r3, r3, #3
 8005b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f023 0302 	bic.w	r3, r3, #2
 8005b60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a20      	ldr	r2, [pc, #128]	; (8005bf0 <TIM_OC1_SetConfig+0xd8>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d003      	beq.n	8005b7c <TIM_OC1_SetConfig+0x64>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a1f      	ldr	r2, [pc, #124]	; (8005bf4 <TIM_OC1_SetConfig+0xdc>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d10c      	bne.n	8005b96 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f023 0308 	bic.w	r3, r3, #8
 8005b82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f023 0304 	bic.w	r3, r3, #4
 8005b94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a15      	ldr	r2, [pc, #84]	; (8005bf0 <TIM_OC1_SetConfig+0xd8>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d003      	beq.n	8005ba6 <TIM_OC1_SetConfig+0x8e>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a14      	ldr	r2, [pc, #80]	; (8005bf4 <TIM_OC1_SetConfig+0xdc>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d111      	bne.n	8005bca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	621a      	str	r2, [r3, #32]
}
 8005be4:	bf00      	nop
 8005be6:	371c      	adds	r7, #28
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	40010000 	.word	0x40010000
 8005bf4:	40010400 	.word	0x40010400

08005bf8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b087      	sub	sp, #28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	f023 0210 	bic.w	r2, r3, #16
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	021b      	lsls	r3, r3, #8
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	f023 0320 	bic.w	r3, r3, #32
 8005c42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	011b      	lsls	r3, r3, #4
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a22      	ldr	r2, [pc, #136]	; (8005cdc <TIM_OC2_SetConfig+0xe4>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d003      	beq.n	8005c60 <TIM_OC2_SetConfig+0x68>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a21      	ldr	r2, [pc, #132]	; (8005ce0 <TIM_OC2_SetConfig+0xe8>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d10d      	bne.n	8005c7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	011b      	lsls	r3, r3, #4
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a17      	ldr	r2, [pc, #92]	; (8005cdc <TIM_OC2_SetConfig+0xe4>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d003      	beq.n	8005c8c <TIM_OC2_SetConfig+0x94>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a16      	ldr	r2, [pc, #88]	; (8005ce0 <TIM_OC2_SetConfig+0xe8>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d113      	bne.n	8005cb4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	621a      	str	r2, [r3, #32]
}
 8005cce:	bf00      	nop
 8005cd0:	371c      	adds	r7, #28
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	40010000 	.word	0x40010000
 8005ce0:	40010400 	.word	0x40010400

08005ce4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f023 0303 	bic.w	r3, r3, #3
 8005d1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	021b      	lsls	r3, r3, #8
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a21      	ldr	r2, [pc, #132]	; (8005dc4 <TIM_OC3_SetConfig+0xe0>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d003      	beq.n	8005d4a <TIM_OC3_SetConfig+0x66>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a20      	ldr	r2, [pc, #128]	; (8005dc8 <TIM_OC3_SetConfig+0xe4>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d10d      	bne.n	8005d66 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	021b      	lsls	r3, r3, #8
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a16      	ldr	r2, [pc, #88]	; (8005dc4 <TIM_OC3_SetConfig+0xe0>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d003      	beq.n	8005d76 <TIM_OC3_SetConfig+0x92>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a15      	ldr	r2, [pc, #84]	; (8005dc8 <TIM_OC3_SetConfig+0xe4>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d113      	bne.n	8005d9e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	011b      	lsls	r3, r3, #4
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	011b      	lsls	r3, r3, #4
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	621a      	str	r2, [r3, #32]
}
 8005db8:	bf00      	nop
 8005dba:	371c      	adds	r7, #28
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	40010000 	.word	0x40010000
 8005dc8:	40010400 	.word	0x40010400

08005dcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	021b      	lsls	r3, r3, #8
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	031b      	lsls	r3, r3, #12
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a12      	ldr	r2, [pc, #72]	; (8005e70 <TIM_OC4_SetConfig+0xa4>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d003      	beq.n	8005e34 <TIM_OC4_SetConfig+0x68>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a11      	ldr	r2, [pc, #68]	; (8005e74 <TIM_OC4_SetConfig+0xa8>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d109      	bne.n	8005e48 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	019b      	lsls	r3, r3, #6
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	621a      	str	r2, [r3, #32]
}
 8005e62:	bf00      	nop
 8005e64:	371c      	adds	r7, #28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	40010000 	.word	0x40010000
 8005e74:	40010400 	.word	0x40010400

08005e78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b087      	sub	sp, #28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	f023 0201 	bic.w	r2, r3, #1
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ea2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	011b      	lsls	r3, r3, #4
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f023 030a 	bic.w	r3, r3, #10
 8005eb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	621a      	str	r2, [r3, #32]
}
 8005eca:	bf00      	nop
 8005ecc:	371c      	adds	r7, #28
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b087      	sub	sp, #28
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	60f8      	str	r0, [r7, #12]
 8005ede:	60b9      	str	r1, [r7, #8]
 8005ee0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	f023 0210 	bic.w	r2, r3, #16
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	031b      	lsls	r3, r3, #12
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	011b      	lsls	r3, r3, #4
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	621a      	str	r2, [r3, #32]
}
 8005f2a:	bf00      	nop
 8005f2c:	371c      	adds	r7, #28
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b085      	sub	sp, #20
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
 8005f3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	f043 0307 	orr.w	r3, r3, #7
 8005f58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	609a      	str	r2, [r3, #8]
}
 8005f60:	bf00      	nop
 8005f62:	3714      	adds	r7, #20
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b087      	sub	sp, #28
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
 8005f78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	021a      	lsls	r2, r3, #8
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	431a      	orrs	r2, r3
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	609a      	str	r2, [r3, #8]
}
 8005fa0:	bf00      	nop
 8005fa2:	371c      	adds	r7, #28
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f003 031f 	and.w	r3, r3, #31
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6a1a      	ldr	r2, [r3, #32]
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	43db      	mvns	r3, r3
 8005fce:	401a      	ands	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6a1a      	ldr	r2, [r3, #32]
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f003 031f 	and.w	r3, r3, #31
 8005fde:	6879      	ldr	r1, [r7, #4]
 8005fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8005fe4:	431a      	orrs	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	621a      	str	r2, [r3, #32]
}
 8005fea:	bf00      	nop
 8005fec:	371c      	adds	r7, #28
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
	...

08005ff8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006008:	2b01      	cmp	r3, #1
 800600a:	d101      	bne.n	8006010 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800600c:	2302      	movs	r3, #2
 800600e:	e05a      	b.n	80060c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006036:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	4313      	orrs	r3, r2
 8006040:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a21      	ldr	r2, [pc, #132]	; (80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d022      	beq.n	800609a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800605c:	d01d      	beq.n	800609a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a1d      	ldr	r2, [pc, #116]	; (80060d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d018      	beq.n	800609a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a1b      	ldr	r2, [pc, #108]	; (80060dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d013      	beq.n	800609a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a1a      	ldr	r2, [pc, #104]	; (80060e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d00e      	beq.n	800609a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a18      	ldr	r2, [pc, #96]	; (80060e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d009      	beq.n	800609a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a17      	ldr	r2, [pc, #92]	; (80060e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d004      	beq.n	800609a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a15      	ldr	r2, [pc, #84]	; (80060ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d10c      	bne.n	80060b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3714      	adds	r7, #20
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	40010000 	.word	0x40010000
 80060d8:	40000400 	.word	0x40000400
 80060dc:	40000800 	.word	0x40000800
 80060e0:	40000c00 	.word	0x40000c00
 80060e4:	40010400 	.word	0x40010400
 80060e8:	40014000 	.word	0x40014000
 80060ec:	40001800 	.word	0x40001800

080060f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80060fa:	2300      	movs	r3, #0
 80060fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006104:	2b01      	cmp	r3, #1
 8006106:	d101      	bne.n	800610c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006108:	2302      	movs	r3, #2
 800610a:	e03d      	b.n	8006188 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	4313      	orrs	r3, r2
 8006120:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	4313      	orrs	r3, r2
 800612e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4313      	orrs	r3, r2
 800614a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	4313      	orrs	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	4313      	orrs	r3, r2
 8006166:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	4313      	orrs	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <memset>:
 80061bc:	4402      	add	r2, r0
 80061be:	4603      	mov	r3, r0
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d100      	bne.n	80061c6 <memset+0xa>
 80061c4:	4770      	bx	lr
 80061c6:	f803 1b01 	strb.w	r1, [r3], #1
 80061ca:	e7f9      	b.n	80061c0 <memset+0x4>

080061cc <__libc_init_array>:
 80061cc:	b570      	push	{r4, r5, r6, lr}
 80061ce:	4d0d      	ldr	r5, [pc, #52]	; (8006204 <__libc_init_array+0x38>)
 80061d0:	4c0d      	ldr	r4, [pc, #52]	; (8006208 <__libc_init_array+0x3c>)
 80061d2:	1b64      	subs	r4, r4, r5
 80061d4:	10a4      	asrs	r4, r4, #2
 80061d6:	2600      	movs	r6, #0
 80061d8:	42a6      	cmp	r6, r4
 80061da:	d109      	bne.n	80061f0 <__libc_init_array+0x24>
 80061dc:	4d0b      	ldr	r5, [pc, #44]	; (800620c <__libc_init_array+0x40>)
 80061de:	4c0c      	ldr	r4, [pc, #48]	; (8006210 <__libc_init_array+0x44>)
 80061e0:	f001 f8ae 	bl	8007340 <_init>
 80061e4:	1b64      	subs	r4, r4, r5
 80061e6:	10a4      	asrs	r4, r4, #2
 80061e8:	2600      	movs	r6, #0
 80061ea:	42a6      	cmp	r6, r4
 80061ec:	d105      	bne.n	80061fa <__libc_init_array+0x2e>
 80061ee:	bd70      	pop	{r4, r5, r6, pc}
 80061f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80061f4:	4798      	blx	r3
 80061f6:	3601      	adds	r6, #1
 80061f8:	e7ee      	b.n	80061d8 <__libc_init_array+0xc>
 80061fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80061fe:	4798      	blx	r3
 8006200:	3601      	adds	r6, #1
 8006202:	e7f2      	b.n	80061ea <__libc_init_array+0x1e>
 8006204:	08007548 	.word	0x08007548
 8006208:	08007548 	.word	0x08007548
 800620c:	08007548 	.word	0x08007548
 8006210:	0800754c 	.word	0x0800754c
 8006214:	00000000 	.word	0x00000000

08006218 <cos>:
 8006218:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800621a:	ec53 2b10 	vmov	r2, r3, d0
 800621e:	4826      	ldr	r0, [pc, #152]	; (80062b8 <cos+0xa0>)
 8006220:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006224:	4281      	cmp	r1, r0
 8006226:	dc06      	bgt.n	8006236 <cos+0x1e>
 8006228:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80062b0 <cos+0x98>
 800622c:	b005      	add	sp, #20
 800622e:	f85d eb04 	ldr.w	lr, [sp], #4
 8006232:	f000 b89d 	b.w	8006370 <__kernel_cos>
 8006236:	4821      	ldr	r0, [pc, #132]	; (80062bc <cos+0xa4>)
 8006238:	4281      	cmp	r1, r0
 800623a:	dd09      	ble.n	8006250 <cos+0x38>
 800623c:	ee10 0a10 	vmov	r0, s0
 8006240:	4619      	mov	r1, r3
 8006242:	f7f9 ffc5 	bl	80001d0 <__aeabi_dsub>
 8006246:	ec41 0b10 	vmov	d0, r0, r1
 800624a:	b005      	add	sp, #20
 800624c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006250:	4668      	mov	r0, sp
 8006252:	f000 fa15 	bl	8006680 <__ieee754_rem_pio2>
 8006256:	f000 0003 	and.w	r0, r0, #3
 800625a:	2801      	cmp	r0, #1
 800625c:	d00b      	beq.n	8006276 <cos+0x5e>
 800625e:	2802      	cmp	r0, #2
 8006260:	d016      	beq.n	8006290 <cos+0x78>
 8006262:	b9e0      	cbnz	r0, 800629e <cos+0x86>
 8006264:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006268:	ed9d 0b00 	vldr	d0, [sp]
 800626c:	f000 f880 	bl	8006370 <__kernel_cos>
 8006270:	ec51 0b10 	vmov	r0, r1, d0
 8006274:	e7e7      	b.n	8006246 <cos+0x2e>
 8006276:	ed9d 1b02 	vldr	d1, [sp, #8]
 800627a:	ed9d 0b00 	vldr	d0, [sp]
 800627e:	f000 f93f 	bl	8006500 <__kernel_sin>
 8006282:	ec53 2b10 	vmov	r2, r3, d0
 8006286:	ee10 0a10 	vmov	r0, s0
 800628a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800628e:	e7da      	b.n	8006246 <cos+0x2e>
 8006290:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006294:	ed9d 0b00 	vldr	d0, [sp]
 8006298:	f000 f86a 	bl	8006370 <__kernel_cos>
 800629c:	e7f1      	b.n	8006282 <cos+0x6a>
 800629e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80062a2:	ed9d 0b00 	vldr	d0, [sp]
 80062a6:	2001      	movs	r0, #1
 80062a8:	f000 f92a 	bl	8006500 <__kernel_sin>
 80062ac:	e7e0      	b.n	8006270 <cos+0x58>
 80062ae:	bf00      	nop
	...
 80062b8:	3fe921fb 	.word	0x3fe921fb
 80062bc:	7fefffff 	.word	0x7fefffff

080062c0 <sin>:
 80062c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80062c2:	ec53 2b10 	vmov	r2, r3, d0
 80062c6:	4828      	ldr	r0, [pc, #160]	; (8006368 <sin+0xa8>)
 80062c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80062cc:	4281      	cmp	r1, r0
 80062ce:	dc07      	bgt.n	80062e0 <sin+0x20>
 80062d0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8006360 <sin+0xa0>
 80062d4:	2000      	movs	r0, #0
 80062d6:	b005      	add	sp, #20
 80062d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80062dc:	f000 b910 	b.w	8006500 <__kernel_sin>
 80062e0:	4822      	ldr	r0, [pc, #136]	; (800636c <sin+0xac>)
 80062e2:	4281      	cmp	r1, r0
 80062e4:	dd09      	ble.n	80062fa <sin+0x3a>
 80062e6:	ee10 0a10 	vmov	r0, s0
 80062ea:	4619      	mov	r1, r3
 80062ec:	f7f9 ff70 	bl	80001d0 <__aeabi_dsub>
 80062f0:	ec41 0b10 	vmov	d0, r0, r1
 80062f4:	b005      	add	sp, #20
 80062f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80062fa:	4668      	mov	r0, sp
 80062fc:	f000 f9c0 	bl	8006680 <__ieee754_rem_pio2>
 8006300:	f000 0003 	and.w	r0, r0, #3
 8006304:	2801      	cmp	r0, #1
 8006306:	d00c      	beq.n	8006322 <sin+0x62>
 8006308:	2802      	cmp	r0, #2
 800630a:	d011      	beq.n	8006330 <sin+0x70>
 800630c:	b9f0      	cbnz	r0, 800634c <sin+0x8c>
 800630e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006312:	ed9d 0b00 	vldr	d0, [sp]
 8006316:	2001      	movs	r0, #1
 8006318:	f000 f8f2 	bl	8006500 <__kernel_sin>
 800631c:	ec51 0b10 	vmov	r0, r1, d0
 8006320:	e7e6      	b.n	80062f0 <sin+0x30>
 8006322:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006326:	ed9d 0b00 	vldr	d0, [sp]
 800632a:	f000 f821 	bl	8006370 <__kernel_cos>
 800632e:	e7f5      	b.n	800631c <sin+0x5c>
 8006330:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006334:	ed9d 0b00 	vldr	d0, [sp]
 8006338:	2001      	movs	r0, #1
 800633a:	f000 f8e1 	bl	8006500 <__kernel_sin>
 800633e:	ec53 2b10 	vmov	r2, r3, d0
 8006342:	ee10 0a10 	vmov	r0, s0
 8006346:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800634a:	e7d1      	b.n	80062f0 <sin+0x30>
 800634c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006350:	ed9d 0b00 	vldr	d0, [sp]
 8006354:	f000 f80c 	bl	8006370 <__kernel_cos>
 8006358:	e7f1      	b.n	800633e <sin+0x7e>
 800635a:	bf00      	nop
 800635c:	f3af 8000 	nop.w
	...
 8006368:	3fe921fb 	.word	0x3fe921fb
 800636c:	7fefffff 	.word	0x7fefffff

08006370 <__kernel_cos>:
 8006370:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006374:	ec57 6b10 	vmov	r6, r7, d0
 8006378:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800637c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006380:	ed8d 1b00 	vstr	d1, [sp]
 8006384:	da07      	bge.n	8006396 <__kernel_cos+0x26>
 8006386:	ee10 0a10 	vmov	r0, s0
 800638a:	4639      	mov	r1, r7
 800638c:	f7fa fb72 	bl	8000a74 <__aeabi_d2iz>
 8006390:	2800      	cmp	r0, #0
 8006392:	f000 8088 	beq.w	80064a6 <__kernel_cos+0x136>
 8006396:	4632      	mov	r2, r6
 8006398:	463b      	mov	r3, r7
 800639a:	4630      	mov	r0, r6
 800639c:	4639      	mov	r1, r7
 800639e:	f7fa f8cf 	bl	8000540 <__aeabi_dmul>
 80063a2:	4b51      	ldr	r3, [pc, #324]	; (80064e8 <__kernel_cos+0x178>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	4604      	mov	r4, r0
 80063a8:	460d      	mov	r5, r1
 80063aa:	f7fa f8c9 	bl	8000540 <__aeabi_dmul>
 80063ae:	a340      	add	r3, pc, #256	; (adr r3, 80064b0 <__kernel_cos+0x140>)
 80063b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b4:	4682      	mov	sl, r0
 80063b6:	468b      	mov	fp, r1
 80063b8:	4620      	mov	r0, r4
 80063ba:	4629      	mov	r1, r5
 80063bc:	f7fa f8c0 	bl	8000540 <__aeabi_dmul>
 80063c0:	a33d      	add	r3, pc, #244	; (adr r3, 80064b8 <__kernel_cos+0x148>)
 80063c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c6:	f7f9 ff05 	bl	80001d4 <__adddf3>
 80063ca:	4622      	mov	r2, r4
 80063cc:	462b      	mov	r3, r5
 80063ce:	f7fa f8b7 	bl	8000540 <__aeabi_dmul>
 80063d2:	a33b      	add	r3, pc, #236	; (adr r3, 80064c0 <__kernel_cos+0x150>)
 80063d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d8:	f7f9 fefa 	bl	80001d0 <__aeabi_dsub>
 80063dc:	4622      	mov	r2, r4
 80063de:	462b      	mov	r3, r5
 80063e0:	f7fa f8ae 	bl	8000540 <__aeabi_dmul>
 80063e4:	a338      	add	r3, pc, #224	; (adr r3, 80064c8 <__kernel_cos+0x158>)
 80063e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ea:	f7f9 fef3 	bl	80001d4 <__adddf3>
 80063ee:	4622      	mov	r2, r4
 80063f0:	462b      	mov	r3, r5
 80063f2:	f7fa f8a5 	bl	8000540 <__aeabi_dmul>
 80063f6:	a336      	add	r3, pc, #216	; (adr r3, 80064d0 <__kernel_cos+0x160>)
 80063f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fc:	f7f9 fee8 	bl	80001d0 <__aeabi_dsub>
 8006400:	4622      	mov	r2, r4
 8006402:	462b      	mov	r3, r5
 8006404:	f7fa f89c 	bl	8000540 <__aeabi_dmul>
 8006408:	a333      	add	r3, pc, #204	; (adr r3, 80064d8 <__kernel_cos+0x168>)
 800640a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640e:	f7f9 fee1 	bl	80001d4 <__adddf3>
 8006412:	4622      	mov	r2, r4
 8006414:	462b      	mov	r3, r5
 8006416:	f7fa f893 	bl	8000540 <__aeabi_dmul>
 800641a:	4622      	mov	r2, r4
 800641c:	462b      	mov	r3, r5
 800641e:	f7fa f88f 	bl	8000540 <__aeabi_dmul>
 8006422:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006426:	4604      	mov	r4, r0
 8006428:	460d      	mov	r5, r1
 800642a:	4630      	mov	r0, r6
 800642c:	4639      	mov	r1, r7
 800642e:	f7fa f887 	bl	8000540 <__aeabi_dmul>
 8006432:	460b      	mov	r3, r1
 8006434:	4602      	mov	r2, r0
 8006436:	4629      	mov	r1, r5
 8006438:	4620      	mov	r0, r4
 800643a:	f7f9 fec9 	bl	80001d0 <__aeabi_dsub>
 800643e:	4b2b      	ldr	r3, [pc, #172]	; (80064ec <__kernel_cos+0x17c>)
 8006440:	4598      	cmp	r8, r3
 8006442:	4606      	mov	r6, r0
 8006444:	460f      	mov	r7, r1
 8006446:	dc10      	bgt.n	800646a <__kernel_cos+0xfa>
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	4650      	mov	r0, sl
 800644e:	4659      	mov	r1, fp
 8006450:	f7f9 febe 	bl	80001d0 <__aeabi_dsub>
 8006454:	460b      	mov	r3, r1
 8006456:	4926      	ldr	r1, [pc, #152]	; (80064f0 <__kernel_cos+0x180>)
 8006458:	4602      	mov	r2, r0
 800645a:	2000      	movs	r0, #0
 800645c:	f7f9 feb8 	bl	80001d0 <__aeabi_dsub>
 8006460:	ec41 0b10 	vmov	d0, r0, r1
 8006464:	b003      	add	sp, #12
 8006466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800646a:	4b22      	ldr	r3, [pc, #136]	; (80064f4 <__kernel_cos+0x184>)
 800646c:	4920      	ldr	r1, [pc, #128]	; (80064f0 <__kernel_cos+0x180>)
 800646e:	4598      	cmp	r8, r3
 8006470:	bfcc      	ite	gt
 8006472:	4d21      	ldrgt	r5, [pc, #132]	; (80064f8 <__kernel_cos+0x188>)
 8006474:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006478:	2400      	movs	r4, #0
 800647a:	4622      	mov	r2, r4
 800647c:	462b      	mov	r3, r5
 800647e:	2000      	movs	r0, #0
 8006480:	f7f9 fea6 	bl	80001d0 <__aeabi_dsub>
 8006484:	4622      	mov	r2, r4
 8006486:	4680      	mov	r8, r0
 8006488:	4689      	mov	r9, r1
 800648a:	462b      	mov	r3, r5
 800648c:	4650      	mov	r0, sl
 800648e:	4659      	mov	r1, fp
 8006490:	f7f9 fe9e 	bl	80001d0 <__aeabi_dsub>
 8006494:	4632      	mov	r2, r6
 8006496:	463b      	mov	r3, r7
 8006498:	f7f9 fe9a 	bl	80001d0 <__aeabi_dsub>
 800649c:	4602      	mov	r2, r0
 800649e:	460b      	mov	r3, r1
 80064a0:	4640      	mov	r0, r8
 80064a2:	4649      	mov	r1, r9
 80064a4:	e7da      	b.n	800645c <__kernel_cos+0xec>
 80064a6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80064e0 <__kernel_cos+0x170>
 80064aa:	e7db      	b.n	8006464 <__kernel_cos+0xf4>
 80064ac:	f3af 8000 	nop.w
 80064b0:	be8838d4 	.word	0xbe8838d4
 80064b4:	bda8fae9 	.word	0xbda8fae9
 80064b8:	bdb4b1c4 	.word	0xbdb4b1c4
 80064bc:	3e21ee9e 	.word	0x3e21ee9e
 80064c0:	809c52ad 	.word	0x809c52ad
 80064c4:	3e927e4f 	.word	0x3e927e4f
 80064c8:	19cb1590 	.word	0x19cb1590
 80064cc:	3efa01a0 	.word	0x3efa01a0
 80064d0:	16c15177 	.word	0x16c15177
 80064d4:	3f56c16c 	.word	0x3f56c16c
 80064d8:	5555554c 	.word	0x5555554c
 80064dc:	3fa55555 	.word	0x3fa55555
 80064e0:	00000000 	.word	0x00000000
 80064e4:	3ff00000 	.word	0x3ff00000
 80064e8:	3fe00000 	.word	0x3fe00000
 80064ec:	3fd33332 	.word	0x3fd33332
 80064f0:	3ff00000 	.word	0x3ff00000
 80064f4:	3fe90000 	.word	0x3fe90000
 80064f8:	3fd20000 	.word	0x3fd20000
 80064fc:	00000000 	.word	0x00000000

08006500 <__kernel_sin>:
 8006500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006504:	ed2d 8b04 	vpush	{d8-d9}
 8006508:	eeb0 8a41 	vmov.f32	s16, s2
 800650c:	eef0 8a61 	vmov.f32	s17, s3
 8006510:	ec55 4b10 	vmov	r4, r5, d0
 8006514:	b083      	sub	sp, #12
 8006516:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800651a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800651e:	9001      	str	r0, [sp, #4]
 8006520:	da06      	bge.n	8006530 <__kernel_sin+0x30>
 8006522:	ee10 0a10 	vmov	r0, s0
 8006526:	4629      	mov	r1, r5
 8006528:	f7fa faa4 	bl	8000a74 <__aeabi_d2iz>
 800652c:	2800      	cmp	r0, #0
 800652e:	d051      	beq.n	80065d4 <__kernel_sin+0xd4>
 8006530:	4622      	mov	r2, r4
 8006532:	462b      	mov	r3, r5
 8006534:	4620      	mov	r0, r4
 8006536:	4629      	mov	r1, r5
 8006538:	f7fa f802 	bl	8000540 <__aeabi_dmul>
 800653c:	4682      	mov	sl, r0
 800653e:	468b      	mov	fp, r1
 8006540:	4602      	mov	r2, r0
 8006542:	460b      	mov	r3, r1
 8006544:	4620      	mov	r0, r4
 8006546:	4629      	mov	r1, r5
 8006548:	f7f9 fffa 	bl	8000540 <__aeabi_dmul>
 800654c:	a341      	add	r3, pc, #260	; (adr r3, 8006654 <__kernel_sin+0x154>)
 800654e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006552:	4680      	mov	r8, r0
 8006554:	4689      	mov	r9, r1
 8006556:	4650      	mov	r0, sl
 8006558:	4659      	mov	r1, fp
 800655a:	f7f9 fff1 	bl	8000540 <__aeabi_dmul>
 800655e:	a33f      	add	r3, pc, #252	; (adr r3, 800665c <__kernel_sin+0x15c>)
 8006560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006564:	f7f9 fe34 	bl	80001d0 <__aeabi_dsub>
 8006568:	4652      	mov	r2, sl
 800656a:	465b      	mov	r3, fp
 800656c:	f7f9 ffe8 	bl	8000540 <__aeabi_dmul>
 8006570:	a33c      	add	r3, pc, #240	; (adr r3, 8006664 <__kernel_sin+0x164>)
 8006572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006576:	f7f9 fe2d 	bl	80001d4 <__adddf3>
 800657a:	4652      	mov	r2, sl
 800657c:	465b      	mov	r3, fp
 800657e:	f7f9 ffdf 	bl	8000540 <__aeabi_dmul>
 8006582:	a33a      	add	r3, pc, #232	; (adr r3, 800666c <__kernel_sin+0x16c>)
 8006584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006588:	f7f9 fe22 	bl	80001d0 <__aeabi_dsub>
 800658c:	4652      	mov	r2, sl
 800658e:	465b      	mov	r3, fp
 8006590:	f7f9 ffd6 	bl	8000540 <__aeabi_dmul>
 8006594:	a337      	add	r3, pc, #220	; (adr r3, 8006674 <__kernel_sin+0x174>)
 8006596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659a:	f7f9 fe1b 	bl	80001d4 <__adddf3>
 800659e:	9b01      	ldr	r3, [sp, #4]
 80065a0:	4606      	mov	r6, r0
 80065a2:	460f      	mov	r7, r1
 80065a4:	b9eb      	cbnz	r3, 80065e2 <__kernel_sin+0xe2>
 80065a6:	4602      	mov	r2, r0
 80065a8:	460b      	mov	r3, r1
 80065aa:	4650      	mov	r0, sl
 80065ac:	4659      	mov	r1, fp
 80065ae:	f7f9 ffc7 	bl	8000540 <__aeabi_dmul>
 80065b2:	a325      	add	r3, pc, #148	; (adr r3, 8006648 <__kernel_sin+0x148>)
 80065b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b8:	f7f9 fe0a 	bl	80001d0 <__aeabi_dsub>
 80065bc:	4642      	mov	r2, r8
 80065be:	464b      	mov	r3, r9
 80065c0:	f7f9 ffbe 	bl	8000540 <__aeabi_dmul>
 80065c4:	4602      	mov	r2, r0
 80065c6:	460b      	mov	r3, r1
 80065c8:	4620      	mov	r0, r4
 80065ca:	4629      	mov	r1, r5
 80065cc:	f7f9 fe02 	bl	80001d4 <__adddf3>
 80065d0:	4604      	mov	r4, r0
 80065d2:	460d      	mov	r5, r1
 80065d4:	ec45 4b10 	vmov	d0, r4, r5
 80065d8:	b003      	add	sp, #12
 80065da:	ecbd 8b04 	vpop	{d8-d9}
 80065de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e2:	4b1b      	ldr	r3, [pc, #108]	; (8006650 <__kernel_sin+0x150>)
 80065e4:	ec51 0b18 	vmov	r0, r1, d8
 80065e8:	2200      	movs	r2, #0
 80065ea:	f7f9 ffa9 	bl	8000540 <__aeabi_dmul>
 80065ee:	4632      	mov	r2, r6
 80065f0:	ec41 0b19 	vmov	d9, r0, r1
 80065f4:	463b      	mov	r3, r7
 80065f6:	4640      	mov	r0, r8
 80065f8:	4649      	mov	r1, r9
 80065fa:	f7f9 ffa1 	bl	8000540 <__aeabi_dmul>
 80065fe:	4602      	mov	r2, r0
 8006600:	460b      	mov	r3, r1
 8006602:	ec51 0b19 	vmov	r0, r1, d9
 8006606:	f7f9 fde3 	bl	80001d0 <__aeabi_dsub>
 800660a:	4652      	mov	r2, sl
 800660c:	465b      	mov	r3, fp
 800660e:	f7f9 ff97 	bl	8000540 <__aeabi_dmul>
 8006612:	ec53 2b18 	vmov	r2, r3, d8
 8006616:	f7f9 fddb 	bl	80001d0 <__aeabi_dsub>
 800661a:	a30b      	add	r3, pc, #44	; (adr r3, 8006648 <__kernel_sin+0x148>)
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	4606      	mov	r6, r0
 8006622:	460f      	mov	r7, r1
 8006624:	4640      	mov	r0, r8
 8006626:	4649      	mov	r1, r9
 8006628:	f7f9 ff8a 	bl	8000540 <__aeabi_dmul>
 800662c:	4602      	mov	r2, r0
 800662e:	460b      	mov	r3, r1
 8006630:	4630      	mov	r0, r6
 8006632:	4639      	mov	r1, r7
 8006634:	f7f9 fdce 	bl	80001d4 <__adddf3>
 8006638:	4602      	mov	r2, r0
 800663a:	460b      	mov	r3, r1
 800663c:	4620      	mov	r0, r4
 800663e:	4629      	mov	r1, r5
 8006640:	f7f9 fdc6 	bl	80001d0 <__aeabi_dsub>
 8006644:	e7c4      	b.n	80065d0 <__kernel_sin+0xd0>
 8006646:	bf00      	nop
 8006648:	55555549 	.word	0x55555549
 800664c:	3fc55555 	.word	0x3fc55555
 8006650:	3fe00000 	.word	0x3fe00000
 8006654:	5acfd57c 	.word	0x5acfd57c
 8006658:	3de5d93a 	.word	0x3de5d93a
 800665c:	8a2b9ceb 	.word	0x8a2b9ceb
 8006660:	3e5ae5e6 	.word	0x3e5ae5e6
 8006664:	57b1fe7d 	.word	0x57b1fe7d
 8006668:	3ec71de3 	.word	0x3ec71de3
 800666c:	19c161d5 	.word	0x19c161d5
 8006670:	3f2a01a0 	.word	0x3f2a01a0
 8006674:	1110f8a6 	.word	0x1110f8a6
 8006678:	3f811111 	.word	0x3f811111
 800667c:	00000000 	.word	0x00000000

08006680 <__ieee754_rem_pio2>:
 8006680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006684:	ed2d 8b02 	vpush	{d8}
 8006688:	ec55 4b10 	vmov	r4, r5, d0
 800668c:	4bca      	ldr	r3, [pc, #808]	; (80069b8 <__ieee754_rem_pio2+0x338>)
 800668e:	b08b      	sub	sp, #44	; 0x2c
 8006690:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006694:	4598      	cmp	r8, r3
 8006696:	4682      	mov	sl, r0
 8006698:	9502      	str	r5, [sp, #8]
 800669a:	dc08      	bgt.n	80066ae <__ieee754_rem_pio2+0x2e>
 800669c:	2200      	movs	r2, #0
 800669e:	2300      	movs	r3, #0
 80066a0:	ed80 0b00 	vstr	d0, [r0]
 80066a4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80066a8:	f04f 0b00 	mov.w	fp, #0
 80066ac:	e028      	b.n	8006700 <__ieee754_rem_pio2+0x80>
 80066ae:	4bc3      	ldr	r3, [pc, #780]	; (80069bc <__ieee754_rem_pio2+0x33c>)
 80066b0:	4598      	cmp	r8, r3
 80066b2:	dc78      	bgt.n	80067a6 <__ieee754_rem_pio2+0x126>
 80066b4:	9b02      	ldr	r3, [sp, #8]
 80066b6:	4ec2      	ldr	r6, [pc, #776]	; (80069c0 <__ieee754_rem_pio2+0x340>)
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	ee10 0a10 	vmov	r0, s0
 80066be:	a3b0      	add	r3, pc, #704	; (adr r3, 8006980 <__ieee754_rem_pio2+0x300>)
 80066c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c4:	4629      	mov	r1, r5
 80066c6:	dd39      	ble.n	800673c <__ieee754_rem_pio2+0xbc>
 80066c8:	f7f9 fd82 	bl	80001d0 <__aeabi_dsub>
 80066cc:	45b0      	cmp	r8, r6
 80066ce:	4604      	mov	r4, r0
 80066d0:	460d      	mov	r5, r1
 80066d2:	d01b      	beq.n	800670c <__ieee754_rem_pio2+0x8c>
 80066d4:	a3ac      	add	r3, pc, #688	; (adr r3, 8006988 <__ieee754_rem_pio2+0x308>)
 80066d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066da:	f7f9 fd79 	bl	80001d0 <__aeabi_dsub>
 80066de:	4602      	mov	r2, r0
 80066e0:	460b      	mov	r3, r1
 80066e2:	e9ca 2300 	strd	r2, r3, [sl]
 80066e6:	4620      	mov	r0, r4
 80066e8:	4629      	mov	r1, r5
 80066ea:	f7f9 fd71 	bl	80001d0 <__aeabi_dsub>
 80066ee:	a3a6      	add	r3, pc, #664	; (adr r3, 8006988 <__ieee754_rem_pio2+0x308>)
 80066f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f4:	f7f9 fd6c 	bl	80001d0 <__aeabi_dsub>
 80066f8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80066fc:	f04f 0b01 	mov.w	fp, #1
 8006700:	4658      	mov	r0, fp
 8006702:	b00b      	add	sp, #44	; 0x2c
 8006704:	ecbd 8b02 	vpop	{d8}
 8006708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800670c:	a3a0      	add	r3, pc, #640	; (adr r3, 8006990 <__ieee754_rem_pio2+0x310>)
 800670e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006712:	f7f9 fd5d 	bl	80001d0 <__aeabi_dsub>
 8006716:	a3a0      	add	r3, pc, #640	; (adr r3, 8006998 <__ieee754_rem_pio2+0x318>)
 8006718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671c:	4604      	mov	r4, r0
 800671e:	460d      	mov	r5, r1
 8006720:	f7f9 fd56 	bl	80001d0 <__aeabi_dsub>
 8006724:	4602      	mov	r2, r0
 8006726:	460b      	mov	r3, r1
 8006728:	e9ca 2300 	strd	r2, r3, [sl]
 800672c:	4620      	mov	r0, r4
 800672e:	4629      	mov	r1, r5
 8006730:	f7f9 fd4e 	bl	80001d0 <__aeabi_dsub>
 8006734:	a398      	add	r3, pc, #608	; (adr r3, 8006998 <__ieee754_rem_pio2+0x318>)
 8006736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673a:	e7db      	b.n	80066f4 <__ieee754_rem_pio2+0x74>
 800673c:	f7f9 fd4a 	bl	80001d4 <__adddf3>
 8006740:	45b0      	cmp	r8, r6
 8006742:	4604      	mov	r4, r0
 8006744:	460d      	mov	r5, r1
 8006746:	d016      	beq.n	8006776 <__ieee754_rem_pio2+0xf6>
 8006748:	a38f      	add	r3, pc, #572	; (adr r3, 8006988 <__ieee754_rem_pio2+0x308>)
 800674a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674e:	f7f9 fd41 	bl	80001d4 <__adddf3>
 8006752:	4602      	mov	r2, r0
 8006754:	460b      	mov	r3, r1
 8006756:	e9ca 2300 	strd	r2, r3, [sl]
 800675a:	4620      	mov	r0, r4
 800675c:	4629      	mov	r1, r5
 800675e:	f7f9 fd37 	bl	80001d0 <__aeabi_dsub>
 8006762:	a389      	add	r3, pc, #548	; (adr r3, 8006988 <__ieee754_rem_pio2+0x308>)
 8006764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006768:	f7f9 fd34 	bl	80001d4 <__adddf3>
 800676c:	f04f 3bff 	mov.w	fp, #4294967295
 8006770:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006774:	e7c4      	b.n	8006700 <__ieee754_rem_pio2+0x80>
 8006776:	a386      	add	r3, pc, #536	; (adr r3, 8006990 <__ieee754_rem_pio2+0x310>)
 8006778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677c:	f7f9 fd2a 	bl	80001d4 <__adddf3>
 8006780:	a385      	add	r3, pc, #532	; (adr r3, 8006998 <__ieee754_rem_pio2+0x318>)
 8006782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006786:	4604      	mov	r4, r0
 8006788:	460d      	mov	r5, r1
 800678a:	f7f9 fd23 	bl	80001d4 <__adddf3>
 800678e:	4602      	mov	r2, r0
 8006790:	460b      	mov	r3, r1
 8006792:	e9ca 2300 	strd	r2, r3, [sl]
 8006796:	4620      	mov	r0, r4
 8006798:	4629      	mov	r1, r5
 800679a:	f7f9 fd19 	bl	80001d0 <__aeabi_dsub>
 800679e:	a37e      	add	r3, pc, #504	; (adr r3, 8006998 <__ieee754_rem_pio2+0x318>)
 80067a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a4:	e7e0      	b.n	8006768 <__ieee754_rem_pio2+0xe8>
 80067a6:	4b87      	ldr	r3, [pc, #540]	; (80069c4 <__ieee754_rem_pio2+0x344>)
 80067a8:	4598      	cmp	r8, r3
 80067aa:	f300 80d8 	bgt.w	800695e <__ieee754_rem_pio2+0x2de>
 80067ae:	f000 f96d 	bl	8006a8c <fabs>
 80067b2:	ec55 4b10 	vmov	r4, r5, d0
 80067b6:	ee10 0a10 	vmov	r0, s0
 80067ba:	a379      	add	r3, pc, #484	; (adr r3, 80069a0 <__ieee754_rem_pio2+0x320>)
 80067bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c0:	4629      	mov	r1, r5
 80067c2:	f7f9 febd 	bl	8000540 <__aeabi_dmul>
 80067c6:	4b80      	ldr	r3, [pc, #512]	; (80069c8 <__ieee754_rem_pio2+0x348>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	f7f9 fd03 	bl	80001d4 <__adddf3>
 80067ce:	f7fa f951 	bl	8000a74 <__aeabi_d2iz>
 80067d2:	4683      	mov	fp, r0
 80067d4:	f7f9 fe4a 	bl	800046c <__aeabi_i2d>
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	ec43 2b18 	vmov	d8, r2, r3
 80067e0:	a367      	add	r3, pc, #412	; (adr r3, 8006980 <__ieee754_rem_pio2+0x300>)
 80067e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e6:	f7f9 feab 	bl	8000540 <__aeabi_dmul>
 80067ea:	4602      	mov	r2, r0
 80067ec:	460b      	mov	r3, r1
 80067ee:	4620      	mov	r0, r4
 80067f0:	4629      	mov	r1, r5
 80067f2:	f7f9 fced 	bl	80001d0 <__aeabi_dsub>
 80067f6:	a364      	add	r3, pc, #400	; (adr r3, 8006988 <__ieee754_rem_pio2+0x308>)
 80067f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fc:	4606      	mov	r6, r0
 80067fe:	460f      	mov	r7, r1
 8006800:	ec51 0b18 	vmov	r0, r1, d8
 8006804:	f7f9 fe9c 	bl	8000540 <__aeabi_dmul>
 8006808:	f1bb 0f1f 	cmp.w	fp, #31
 800680c:	4604      	mov	r4, r0
 800680e:	460d      	mov	r5, r1
 8006810:	dc0d      	bgt.n	800682e <__ieee754_rem_pio2+0x1ae>
 8006812:	4b6e      	ldr	r3, [pc, #440]	; (80069cc <__ieee754_rem_pio2+0x34c>)
 8006814:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800681c:	4543      	cmp	r3, r8
 800681e:	d006      	beq.n	800682e <__ieee754_rem_pio2+0x1ae>
 8006820:	4622      	mov	r2, r4
 8006822:	462b      	mov	r3, r5
 8006824:	4630      	mov	r0, r6
 8006826:	4639      	mov	r1, r7
 8006828:	f7f9 fcd2 	bl	80001d0 <__aeabi_dsub>
 800682c:	e00e      	b.n	800684c <__ieee754_rem_pio2+0x1cc>
 800682e:	462b      	mov	r3, r5
 8006830:	4622      	mov	r2, r4
 8006832:	4630      	mov	r0, r6
 8006834:	4639      	mov	r1, r7
 8006836:	f7f9 fccb 	bl	80001d0 <__aeabi_dsub>
 800683a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800683e:	9303      	str	r3, [sp, #12]
 8006840:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006844:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006848:	2b10      	cmp	r3, #16
 800684a:	dc02      	bgt.n	8006852 <__ieee754_rem_pio2+0x1d2>
 800684c:	e9ca 0100 	strd	r0, r1, [sl]
 8006850:	e039      	b.n	80068c6 <__ieee754_rem_pio2+0x246>
 8006852:	a34f      	add	r3, pc, #316	; (adr r3, 8006990 <__ieee754_rem_pio2+0x310>)
 8006854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006858:	ec51 0b18 	vmov	r0, r1, d8
 800685c:	f7f9 fe70 	bl	8000540 <__aeabi_dmul>
 8006860:	4604      	mov	r4, r0
 8006862:	460d      	mov	r5, r1
 8006864:	4602      	mov	r2, r0
 8006866:	460b      	mov	r3, r1
 8006868:	4630      	mov	r0, r6
 800686a:	4639      	mov	r1, r7
 800686c:	f7f9 fcb0 	bl	80001d0 <__aeabi_dsub>
 8006870:	4602      	mov	r2, r0
 8006872:	460b      	mov	r3, r1
 8006874:	4680      	mov	r8, r0
 8006876:	4689      	mov	r9, r1
 8006878:	4630      	mov	r0, r6
 800687a:	4639      	mov	r1, r7
 800687c:	f7f9 fca8 	bl	80001d0 <__aeabi_dsub>
 8006880:	4622      	mov	r2, r4
 8006882:	462b      	mov	r3, r5
 8006884:	f7f9 fca4 	bl	80001d0 <__aeabi_dsub>
 8006888:	a343      	add	r3, pc, #268	; (adr r3, 8006998 <__ieee754_rem_pio2+0x318>)
 800688a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688e:	4604      	mov	r4, r0
 8006890:	460d      	mov	r5, r1
 8006892:	ec51 0b18 	vmov	r0, r1, d8
 8006896:	f7f9 fe53 	bl	8000540 <__aeabi_dmul>
 800689a:	4622      	mov	r2, r4
 800689c:	462b      	mov	r3, r5
 800689e:	f7f9 fc97 	bl	80001d0 <__aeabi_dsub>
 80068a2:	4602      	mov	r2, r0
 80068a4:	460b      	mov	r3, r1
 80068a6:	4604      	mov	r4, r0
 80068a8:	460d      	mov	r5, r1
 80068aa:	4640      	mov	r0, r8
 80068ac:	4649      	mov	r1, r9
 80068ae:	f7f9 fc8f 	bl	80001d0 <__aeabi_dsub>
 80068b2:	9a03      	ldr	r2, [sp, #12]
 80068b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	2b31      	cmp	r3, #49	; 0x31
 80068bc:	dc24      	bgt.n	8006908 <__ieee754_rem_pio2+0x288>
 80068be:	e9ca 0100 	strd	r0, r1, [sl]
 80068c2:	4646      	mov	r6, r8
 80068c4:	464f      	mov	r7, r9
 80068c6:	e9da 8900 	ldrd	r8, r9, [sl]
 80068ca:	4630      	mov	r0, r6
 80068cc:	4642      	mov	r2, r8
 80068ce:	464b      	mov	r3, r9
 80068d0:	4639      	mov	r1, r7
 80068d2:	f7f9 fc7d 	bl	80001d0 <__aeabi_dsub>
 80068d6:	462b      	mov	r3, r5
 80068d8:	4622      	mov	r2, r4
 80068da:	f7f9 fc79 	bl	80001d0 <__aeabi_dsub>
 80068de:	9b02      	ldr	r3, [sp, #8]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80068e6:	f6bf af0b 	bge.w	8006700 <__ieee754_rem_pio2+0x80>
 80068ea:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80068ee:	f8ca 3004 	str.w	r3, [sl, #4]
 80068f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80068f6:	f8ca 8000 	str.w	r8, [sl]
 80068fa:	f8ca 0008 	str.w	r0, [sl, #8]
 80068fe:	f8ca 300c 	str.w	r3, [sl, #12]
 8006902:	f1cb 0b00 	rsb	fp, fp, #0
 8006906:	e6fb      	b.n	8006700 <__ieee754_rem_pio2+0x80>
 8006908:	a327      	add	r3, pc, #156	; (adr r3, 80069a8 <__ieee754_rem_pio2+0x328>)
 800690a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690e:	ec51 0b18 	vmov	r0, r1, d8
 8006912:	f7f9 fe15 	bl	8000540 <__aeabi_dmul>
 8006916:	4604      	mov	r4, r0
 8006918:	460d      	mov	r5, r1
 800691a:	4602      	mov	r2, r0
 800691c:	460b      	mov	r3, r1
 800691e:	4640      	mov	r0, r8
 8006920:	4649      	mov	r1, r9
 8006922:	f7f9 fc55 	bl	80001d0 <__aeabi_dsub>
 8006926:	4602      	mov	r2, r0
 8006928:	460b      	mov	r3, r1
 800692a:	4606      	mov	r6, r0
 800692c:	460f      	mov	r7, r1
 800692e:	4640      	mov	r0, r8
 8006930:	4649      	mov	r1, r9
 8006932:	f7f9 fc4d 	bl	80001d0 <__aeabi_dsub>
 8006936:	4622      	mov	r2, r4
 8006938:	462b      	mov	r3, r5
 800693a:	f7f9 fc49 	bl	80001d0 <__aeabi_dsub>
 800693e:	a31c      	add	r3, pc, #112	; (adr r3, 80069b0 <__ieee754_rem_pio2+0x330>)
 8006940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006944:	4604      	mov	r4, r0
 8006946:	460d      	mov	r5, r1
 8006948:	ec51 0b18 	vmov	r0, r1, d8
 800694c:	f7f9 fdf8 	bl	8000540 <__aeabi_dmul>
 8006950:	4622      	mov	r2, r4
 8006952:	462b      	mov	r3, r5
 8006954:	f7f9 fc3c 	bl	80001d0 <__aeabi_dsub>
 8006958:	4604      	mov	r4, r0
 800695a:	460d      	mov	r5, r1
 800695c:	e760      	b.n	8006820 <__ieee754_rem_pio2+0x1a0>
 800695e:	4b1c      	ldr	r3, [pc, #112]	; (80069d0 <__ieee754_rem_pio2+0x350>)
 8006960:	4598      	cmp	r8, r3
 8006962:	dd37      	ble.n	80069d4 <__ieee754_rem_pio2+0x354>
 8006964:	ee10 2a10 	vmov	r2, s0
 8006968:	462b      	mov	r3, r5
 800696a:	4620      	mov	r0, r4
 800696c:	4629      	mov	r1, r5
 800696e:	f7f9 fc2f 	bl	80001d0 <__aeabi_dsub>
 8006972:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006976:	e9ca 0100 	strd	r0, r1, [sl]
 800697a:	e695      	b.n	80066a8 <__ieee754_rem_pio2+0x28>
 800697c:	f3af 8000 	nop.w
 8006980:	54400000 	.word	0x54400000
 8006984:	3ff921fb 	.word	0x3ff921fb
 8006988:	1a626331 	.word	0x1a626331
 800698c:	3dd0b461 	.word	0x3dd0b461
 8006990:	1a600000 	.word	0x1a600000
 8006994:	3dd0b461 	.word	0x3dd0b461
 8006998:	2e037073 	.word	0x2e037073
 800699c:	3ba3198a 	.word	0x3ba3198a
 80069a0:	6dc9c883 	.word	0x6dc9c883
 80069a4:	3fe45f30 	.word	0x3fe45f30
 80069a8:	2e000000 	.word	0x2e000000
 80069ac:	3ba3198a 	.word	0x3ba3198a
 80069b0:	252049c1 	.word	0x252049c1
 80069b4:	397b839a 	.word	0x397b839a
 80069b8:	3fe921fb 	.word	0x3fe921fb
 80069bc:	4002d97b 	.word	0x4002d97b
 80069c0:	3ff921fb 	.word	0x3ff921fb
 80069c4:	413921fb 	.word	0x413921fb
 80069c8:	3fe00000 	.word	0x3fe00000
 80069cc:	08007368 	.word	0x08007368
 80069d0:	7fefffff 	.word	0x7fefffff
 80069d4:	ea4f 5628 	mov.w	r6, r8, asr #20
 80069d8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80069dc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80069e0:	4620      	mov	r0, r4
 80069e2:	460d      	mov	r5, r1
 80069e4:	f7fa f846 	bl	8000a74 <__aeabi_d2iz>
 80069e8:	f7f9 fd40 	bl	800046c <__aeabi_i2d>
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	4620      	mov	r0, r4
 80069f2:	4629      	mov	r1, r5
 80069f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80069f8:	f7f9 fbea 	bl	80001d0 <__aeabi_dsub>
 80069fc:	4b21      	ldr	r3, [pc, #132]	; (8006a84 <__ieee754_rem_pio2+0x404>)
 80069fe:	2200      	movs	r2, #0
 8006a00:	f7f9 fd9e 	bl	8000540 <__aeabi_dmul>
 8006a04:	460d      	mov	r5, r1
 8006a06:	4604      	mov	r4, r0
 8006a08:	f7fa f834 	bl	8000a74 <__aeabi_d2iz>
 8006a0c:	f7f9 fd2e 	bl	800046c <__aeabi_i2d>
 8006a10:	4602      	mov	r2, r0
 8006a12:	460b      	mov	r3, r1
 8006a14:	4620      	mov	r0, r4
 8006a16:	4629      	mov	r1, r5
 8006a18:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a1c:	f7f9 fbd8 	bl	80001d0 <__aeabi_dsub>
 8006a20:	4b18      	ldr	r3, [pc, #96]	; (8006a84 <__ieee754_rem_pio2+0x404>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	f7f9 fd8c 	bl	8000540 <__aeabi_dmul>
 8006a28:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006a2c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8006a30:	2703      	movs	r7, #3
 8006a32:	2400      	movs	r4, #0
 8006a34:	2500      	movs	r5, #0
 8006a36:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8006a3a:	4622      	mov	r2, r4
 8006a3c:	462b      	mov	r3, r5
 8006a3e:	46b9      	mov	r9, r7
 8006a40:	3f01      	subs	r7, #1
 8006a42:	f7f9 ffe5 	bl	8000a10 <__aeabi_dcmpeq>
 8006a46:	2800      	cmp	r0, #0
 8006a48:	d1f5      	bne.n	8006a36 <__ieee754_rem_pio2+0x3b6>
 8006a4a:	4b0f      	ldr	r3, [pc, #60]	; (8006a88 <__ieee754_rem_pio2+0x408>)
 8006a4c:	9301      	str	r3, [sp, #4]
 8006a4e:	2302      	movs	r3, #2
 8006a50:	9300      	str	r3, [sp, #0]
 8006a52:	4632      	mov	r2, r6
 8006a54:	464b      	mov	r3, r9
 8006a56:	4651      	mov	r1, sl
 8006a58:	a804      	add	r0, sp, #16
 8006a5a:	f000 f8a1 	bl	8006ba0 <__kernel_rem_pio2>
 8006a5e:	9b02      	ldr	r3, [sp, #8]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	4683      	mov	fp, r0
 8006a64:	f6bf ae4c 	bge.w	8006700 <__ieee754_rem_pio2+0x80>
 8006a68:	e9da 2100 	ldrd	r2, r1, [sl]
 8006a6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a70:	e9ca 2300 	strd	r2, r3, [sl]
 8006a74:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006a78:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a7c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8006a80:	e73f      	b.n	8006902 <__ieee754_rem_pio2+0x282>
 8006a82:	bf00      	nop
 8006a84:	41700000 	.word	0x41700000
 8006a88:	080073e8 	.word	0x080073e8

08006a8c <fabs>:
 8006a8c:	ec51 0b10 	vmov	r0, r1, d0
 8006a90:	ee10 2a10 	vmov	r2, s0
 8006a94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006a98:	ec43 2b10 	vmov	d0, r2, r3
 8006a9c:	4770      	bx	lr
	...

08006aa0 <scalbn>:
 8006aa0:	b570      	push	{r4, r5, r6, lr}
 8006aa2:	ec55 4b10 	vmov	r4, r5, d0
 8006aa6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006aaa:	4606      	mov	r6, r0
 8006aac:	462b      	mov	r3, r5
 8006aae:	b999      	cbnz	r1, 8006ad8 <scalbn+0x38>
 8006ab0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006ab4:	4323      	orrs	r3, r4
 8006ab6:	d03f      	beq.n	8006b38 <scalbn+0x98>
 8006ab8:	4b35      	ldr	r3, [pc, #212]	; (8006b90 <scalbn+0xf0>)
 8006aba:	4629      	mov	r1, r5
 8006abc:	ee10 0a10 	vmov	r0, s0
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f7f9 fd3d 	bl	8000540 <__aeabi_dmul>
 8006ac6:	4b33      	ldr	r3, [pc, #204]	; (8006b94 <scalbn+0xf4>)
 8006ac8:	429e      	cmp	r6, r3
 8006aca:	4604      	mov	r4, r0
 8006acc:	460d      	mov	r5, r1
 8006ace:	da10      	bge.n	8006af2 <scalbn+0x52>
 8006ad0:	a327      	add	r3, pc, #156	; (adr r3, 8006b70 <scalbn+0xd0>)
 8006ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad6:	e01f      	b.n	8006b18 <scalbn+0x78>
 8006ad8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006adc:	4291      	cmp	r1, r2
 8006ade:	d10c      	bne.n	8006afa <scalbn+0x5a>
 8006ae0:	ee10 2a10 	vmov	r2, s0
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	4629      	mov	r1, r5
 8006ae8:	f7f9 fb74 	bl	80001d4 <__adddf3>
 8006aec:	4604      	mov	r4, r0
 8006aee:	460d      	mov	r5, r1
 8006af0:	e022      	b.n	8006b38 <scalbn+0x98>
 8006af2:	460b      	mov	r3, r1
 8006af4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006af8:	3936      	subs	r1, #54	; 0x36
 8006afa:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006afe:	4296      	cmp	r6, r2
 8006b00:	dd0d      	ble.n	8006b1e <scalbn+0x7e>
 8006b02:	2d00      	cmp	r5, #0
 8006b04:	a11c      	add	r1, pc, #112	; (adr r1, 8006b78 <scalbn+0xd8>)
 8006b06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b0a:	da02      	bge.n	8006b12 <scalbn+0x72>
 8006b0c:	a11c      	add	r1, pc, #112	; (adr r1, 8006b80 <scalbn+0xe0>)
 8006b0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b12:	a319      	add	r3, pc, #100	; (adr r3, 8006b78 <scalbn+0xd8>)
 8006b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b18:	f7f9 fd12 	bl	8000540 <__aeabi_dmul>
 8006b1c:	e7e6      	b.n	8006aec <scalbn+0x4c>
 8006b1e:	1872      	adds	r2, r6, r1
 8006b20:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006b24:	428a      	cmp	r2, r1
 8006b26:	dcec      	bgt.n	8006b02 <scalbn+0x62>
 8006b28:	2a00      	cmp	r2, #0
 8006b2a:	dd08      	ble.n	8006b3e <scalbn+0x9e>
 8006b2c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006b30:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006b34:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006b38:	ec45 4b10 	vmov	d0, r4, r5
 8006b3c:	bd70      	pop	{r4, r5, r6, pc}
 8006b3e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006b42:	da08      	bge.n	8006b56 <scalbn+0xb6>
 8006b44:	2d00      	cmp	r5, #0
 8006b46:	a10a      	add	r1, pc, #40	; (adr r1, 8006b70 <scalbn+0xd0>)
 8006b48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b4c:	dac0      	bge.n	8006ad0 <scalbn+0x30>
 8006b4e:	a10e      	add	r1, pc, #56	; (adr r1, 8006b88 <scalbn+0xe8>)
 8006b50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b54:	e7bc      	b.n	8006ad0 <scalbn+0x30>
 8006b56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006b5a:	3236      	adds	r2, #54	; 0x36
 8006b5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006b60:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006b64:	4620      	mov	r0, r4
 8006b66:	4b0c      	ldr	r3, [pc, #48]	; (8006b98 <scalbn+0xf8>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	e7d5      	b.n	8006b18 <scalbn+0x78>
 8006b6c:	f3af 8000 	nop.w
 8006b70:	c2f8f359 	.word	0xc2f8f359
 8006b74:	01a56e1f 	.word	0x01a56e1f
 8006b78:	8800759c 	.word	0x8800759c
 8006b7c:	7e37e43c 	.word	0x7e37e43c
 8006b80:	8800759c 	.word	0x8800759c
 8006b84:	fe37e43c 	.word	0xfe37e43c
 8006b88:	c2f8f359 	.word	0xc2f8f359
 8006b8c:	81a56e1f 	.word	0x81a56e1f
 8006b90:	43500000 	.word	0x43500000
 8006b94:	ffff3cb0 	.word	0xffff3cb0
 8006b98:	3c900000 	.word	0x3c900000
 8006b9c:	00000000 	.word	0x00000000

08006ba0 <__kernel_rem_pio2>:
 8006ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba4:	ed2d 8b02 	vpush	{d8}
 8006ba8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8006bac:	f112 0f14 	cmn.w	r2, #20
 8006bb0:	9306      	str	r3, [sp, #24]
 8006bb2:	9104      	str	r1, [sp, #16]
 8006bb4:	4bc2      	ldr	r3, [pc, #776]	; (8006ec0 <__kernel_rem_pio2+0x320>)
 8006bb6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8006bb8:	9009      	str	r0, [sp, #36]	; 0x24
 8006bba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	9b06      	ldr	r3, [sp, #24]
 8006bc2:	f103 33ff 	add.w	r3, r3, #4294967295
 8006bc6:	bfa8      	it	ge
 8006bc8:	1ed4      	subge	r4, r2, #3
 8006bca:	9305      	str	r3, [sp, #20]
 8006bcc:	bfb2      	itee	lt
 8006bce:	2400      	movlt	r4, #0
 8006bd0:	2318      	movge	r3, #24
 8006bd2:	fb94 f4f3 	sdivge	r4, r4, r3
 8006bd6:	f06f 0317 	mvn.w	r3, #23
 8006bda:	fb04 3303 	mla	r3, r4, r3, r3
 8006bde:	eb03 0a02 	add.w	sl, r3, r2
 8006be2:	9b00      	ldr	r3, [sp, #0]
 8006be4:	9a05      	ldr	r2, [sp, #20]
 8006be6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8006eb0 <__kernel_rem_pio2+0x310>
 8006bea:	eb03 0802 	add.w	r8, r3, r2
 8006bee:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006bf0:	1aa7      	subs	r7, r4, r2
 8006bf2:	ae20      	add	r6, sp, #128	; 0x80
 8006bf4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006bf8:	2500      	movs	r5, #0
 8006bfa:	4545      	cmp	r5, r8
 8006bfc:	dd13      	ble.n	8006c26 <__kernel_rem_pio2+0x86>
 8006bfe:	9b06      	ldr	r3, [sp, #24]
 8006c00:	aa20      	add	r2, sp, #128	; 0x80
 8006c02:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006c06:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8006c0a:	f04f 0800 	mov.w	r8, #0
 8006c0e:	9b00      	ldr	r3, [sp, #0]
 8006c10:	4598      	cmp	r8, r3
 8006c12:	dc31      	bgt.n	8006c78 <__kernel_rem_pio2+0xd8>
 8006c14:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8006eb0 <__kernel_rem_pio2+0x310>
 8006c18:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006c1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006c20:	462f      	mov	r7, r5
 8006c22:	2600      	movs	r6, #0
 8006c24:	e01b      	b.n	8006c5e <__kernel_rem_pio2+0xbe>
 8006c26:	42ef      	cmn	r7, r5
 8006c28:	d407      	bmi.n	8006c3a <__kernel_rem_pio2+0x9a>
 8006c2a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006c2e:	f7f9 fc1d 	bl	800046c <__aeabi_i2d>
 8006c32:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006c36:	3501      	adds	r5, #1
 8006c38:	e7df      	b.n	8006bfa <__kernel_rem_pio2+0x5a>
 8006c3a:	ec51 0b18 	vmov	r0, r1, d8
 8006c3e:	e7f8      	b.n	8006c32 <__kernel_rem_pio2+0x92>
 8006c40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c44:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006c48:	f7f9 fc7a 	bl	8000540 <__aeabi_dmul>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	460b      	mov	r3, r1
 8006c50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c54:	f7f9 fabe 	bl	80001d4 <__adddf3>
 8006c58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c5c:	3601      	adds	r6, #1
 8006c5e:	9b05      	ldr	r3, [sp, #20]
 8006c60:	429e      	cmp	r6, r3
 8006c62:	f1a7 0708 	sub.w	r7, r7, #8
 8006c66:	ddeb      	ble.n	8006c40 <__kernel_rem_pio2+0xa0>
 8006c68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c6c:	f108 0801 	add.w	r8, r8, #1
 8006c70:	ecab 7b02 	vstmia	fp!, {d7}
 8006c74:	3508      	adds	r5, #8
 8006c76:	e7ca      	b.n	8006c0e <__kernel_rem_pio2+0x6e>
 8006c78:	9b00      	ldr	r3, [sp, #0]
 8006c7a:	aa0c      	add	r2, sp, #48	; 0x30
 8006c7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006c80:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c82:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006c84:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006c88:	9c00      	ldr	r4, [sp, #0]
 8006c8a:	930a      	str	r3, [sp, #40]	; 0x28
 8006c8c:	00e3      	lsls	r3, r4, #3
 8006c8e:	9308      	str	r3, [sp, #32]
 8006c90:	ab98      	add	r3, sp, #608	; 0x260
 8006c92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c96:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006c9a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8006c9e:	ab70      	add	r3, sp, #448	; 0x1c0
 8006ca0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8006ca4:	46c3      	mov	fp, r8
 8006ca6:	46a1      	mov	r9, r4
 8006ca8:	f1b9 0f00 	cmp.w	r9, #0
 8006cac:	f1a5 0508 	sub.w	r5, r5, #8
 8006cb0:	dc77      	bgt.n	8006da2 <__kernel_rem_pio2+0x202>
 8006cb2:	ec47 6b10 	vmov	d0, r6, r7
 8006cb6:	4650      	mov	r0, sl
 8006cb8:	f7ff fef2 	bl	8006aa0 <scalbn>
 8006cbc:	ec57 6b10 	vmov	r6, r7, d0
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006cc6:	ee10 0a10 	vmov	r0, s0
 8006cca:	4639      	mov	r1, r7
 8006ccc:	f7f9 fc38 	bl	8000540 <__aeabi_dmul>
 8006cd0:	ec41 0b10 	vmov	d0, r0, r1
 8006cd4:	f000 fab4 	bl	8007240 <floor>
 8006cd8:	4b7a      	ldr	r3, [pc, #488]	; (8006ec4 <__kernel_rem_pio2+0x324>)
 8006cda:	ec51 0b10 	vmov	r0, r1, d0
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f7f9 fc2e 	bl	8000540 <__aeabi_dmul>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	4630      	mov	r0, r6
 8006cea:	4639      	mov	r1, r7
 8006cec:	f7f9 fa70 	bl	80001d0 <__aeabi_dsub>
 8006cf0:	460f      	mov	r7, r1
 8006cf2:	4606      	mov	r6, r0
 8006cf4:	f7f9 febe 	bl	8000a74 <__aeabi_d2iz>
 8006cf8:	9002      	str	r0, [sp, #8]
 8006cfa:	f7f9 fbb7 	bl	800046c <__aeabi_i2d>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	460b      	mov	r3, r1
 8006d02:	4630      	mov	r0, r6
 8006d04:	4639      	mov	r1, r7
 8006d06:	f7f9 fa63 	bl	80001d0 <__aeabi_dsub>
 8006d0a:	f1ba 0f00 	cmp.w	sl, #0
 8006d0e:	4606      	mov	r6, r0
 8006d10:	460f      	mov	r7, r1
 8006d12:	dd6d      	ble.n	8006df0 <__kernel_rem_pio2+0x250>
 8006d14:	1e61      	subs	r1, r4, #1
 8006d16:	ab0c      	add	r3, sp, #48	; 0x30
 8006d18:	9d02      	ldr	r5, [sp, #8]
 8006d1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d1e:	f1ca 0018 	rsb	r0, sl, #24
 8006d22:	fa43 f200 	asr.w	r2, r3, r0
 8006d26:	4415      	add	r5, r2
 8006d28:	4082      	lsls	r2, r0
 8006d2a:	1a9b      	subs	r3, r3, r2
 8006d2c:	aa0c      	add	r2, sp, #48	; 0x30
 8006d2e:	9502      	str	r5, [sp, #8]
 8006d30:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006d34:	f1ca 0217 	rsb	r2, sl, #23
 8006d38:	fa43 fb02 	asr.w	fp, r3, r2
 8006d3c:	f1bb 0f00 	cmp.w	fp, #0
 8006d40:	dd65      	ble.n	8006e0e <__kernel_rem_pio2+0x26e>
 8006d42:	9b02      	ldr	r3, [sp, #8]
 8006d44:	2200      	movs	r2, #0
 8006d46:	3301      	adds	r3, #1
 8006d48:	9302      	str	r3, [sp, #8]
 8006d4a:	4615      	mov	r5, r2
 8006d4c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006d50:	4294      	cmp	r4, r2
 8006d52:	f300 809f 	bgt.w	8006e94 <__kernel_rem_pio2+0x2f4>
 8006d56:	f1ba 0f00 	cmp.w	sl, #0
 8006d5a:	dd07      	ble.n	8006d6c <__kernel_rem_pio2+0x1cc>
 8006d5c:	f1ba 0f01 	cmp.w	sl, #1
 8006d60:	f000 80c1 	beq.w	8006ee6 <__kernel_rem_pio2+0x346>
 8006d64:	f1ba 0f02 	cmp.w	sl, #2
 8006d68:	f000 80c7 	beq.w	8006efa <__kernel_rem_pio2+0x35a>
 8006d6c:	f1bb 0f02 	cmp.w	fp, #2
 8006d70:	d14d      	bne.n	8006e0e <__kernel_rem_pio2+0x26e>
 8006d72:	4632      	mov	r2, r6
 8006d74:	463b      	mov	r3, r7
 8006d76:	4954      	ldr	r1, [pc, #336]	; (8006ec8 <__kernel_rem_pio2+0x328>)
 8006d78:	2000      	movs	r0, #0
 8006d7a:	f7f9 fa29 	bl	80001d0 <__aeabi_dsub>
 8006d7e:	4606      	mov	r6, r0
 8006d80:	460f      	mov	r7, r1
 8006d82:	2d00      	cmp	r5, #0
 8006d84:	d043      	beq.n	8006e0e <__kernel_rem_pio2+0x26e>
 8006d86:	4650      	mov	r0, sl
 8006d88:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8006eb8 <__kernel_rem_pio2+0x318>
 8006d8c:	f7ff fe88 	bl	8006aa0 <scalbn>
 8006d90:	4630      	mov	r0, r6
 8006d92:	4639      	mov	r1, r7
 8006d94:	ec53 2b10 	vmov	r2, r3, d0
 8006d98:	f7f9 fa1a 	bl	80001d0 <__aeabi_dsub>
 8006d9c:	4606      	mov	r6, r0
 8006d9e:	460f      	mov	r7, r1
 8006da0:	e035      	b.n	8006e0e <__kernel_rem_pio2+0x26e>
 8006da2:	4b4a      	ldr	r3, [pc, #296]	; (8006ecc <__kernel_rem_pio2+0x32c>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	4630      	mov	r0, r6
 8006da8:	4639      	mov	r1, r7
 8006daa:	f7f9 fbc9 	bl	8000540 <__aeabi_dmul>
 8006dae:	f7f9 fe61 	bl	8000a74 <__aeabi_d2iz>
 8006db2:	f7f9 fb5b 	bl	800046c <__aeabi_i2d>
 8006db6:	4602      	mov	r2, r0
 8006db8:	460b      	mov	r3, r1
 8006dba:	ec43 2b18 	vmov	d8, r2, r3
 8006dbe:	4b44      	ldr	r3, [pc, #272]	; (8006ed0 <__kernel_rem_pio2+0x330>)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f7f9 fbbd 	bl	8000540 <__aeabi_dmul>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	4630      	mov	r0, r6
 8006dcc:	4639      	mov	r1, r7
 8006dce:	f7f9 f9ff 	bl	80001d0 <__aeabi_dsub>
 8006dd2:	f7f9 fe4f 	bl	8000a74 <__aeabi_d2iz>
 8006dd6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006dda:	f84b 0b04 	str.w	r0, [fp], #4
 8006dde:	ec51 0b18 	vmov	r0, r1, d8
 8006de2:	f7f9 f9f7 	bl	80001d4 <__adddf3>
 8006de6:	f109 39ff 	add.w	r9, r9, #4294967295
 8006dea:	4606      	mov	r6, r0
 8006dec:	460f      	mov	r7, r1
 8006dee:	e75b      	b.n	8006ca8 <__kernel_rem_pio2+0x108>
 8006df0:	d106      	bne.n	8006e00 <__kernel_rem_pio2+0x260>
 8006df2:	1e63      	subs	r3, r4, #1
 8006df4:	aa0c      	add	r2, sp, #48	; 0x30
 8006df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dfa:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8006dfe:	e79d      	b.n	8006d3c <__kernel_rem_pio2+0x19c>
 8006e00:	4b34      	ldr	r3, [pc, #208]	; (8006ed4 <__kernel_rem_pio2+0x334>)
 8006e02:	2200      	movs	r2, #0
 8006e04:	f7f9 fe22 	bl	8000a4c <__aeabi_dcmpge>
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	d140      	bne.n	8006e8e <__kernel_rem_pio2+0x2ee>
 8006e0c:	4683      	mov	fp, r0
 8006e0e:	2200      	movs	r2, #0
 8006e10:	2300      	movs	r3, #0
 8006e12:	4630      	mov	r0, r6
 8006e14:	4639      	mov	r1, r7
 8006e16:	f7f9 fdfb 	bl	8000a10 <__aeabi_dcmpeq>
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	f000 80c1 	beq.w	8006fa2 <__kernel_rem_pio2+0x402>
 8006e20:	1e65      	subs	r5, r4, #1
 8006e22:	462b      	mov	r3, r5
 8006e24:	2200      	movs	r2, #0
 8006e26:	9900      	ldr	r1, [sp, #0]
 8006e28:	428b      	cmp	r3, r1
 8006e2a:	da6d      	bge.n	8006f08 <__kernel_rem_pio2+0x368>
 8006e2c:	2a00      	cmp	r2, #0
 8006e2e:	f000 808a 	beq.w	8006f46 <__kernel_rem_pio2+0x3a6>
 8006e32:	ab0c      	add	r3, sp, #48	; 0x30
 8006e34:	f1aa 0a18 	sub.w	sl, sl, #24
 8006e38:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 80ae 	beq.w	8006f9e <__kernel_rem_pio2+0x3fe>
 8006e42:	4650      	mov	r0, sl
 8006e44:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8006eb8 <__kernel_rem_pio2+0x318>
 8006e48:	f7ff fe2a 	bl	8006aa0 <scalbn>
 8006e4c:	1c6b      	adds	r3, r5, #1
 8006e4e:	00da      	lsls	r2, r3, #3
 8006e50:	9205      	str	r2, [sp, #20]
 8006e52:	ec57 6b10 	vmov	r6, r7, d0
 8006e56:	aa70      	add	r2, sp, #448	; 0x1c0
 8006e58:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8006ecc <__kernel_rem_pio2+0x32c>
 8006e5c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8006e60:	462c      	mov	r4, r5
 8006e62:	f04f 0800 	mov.w	r8, #0
 8006e66:	2c00      	cmp	r4, #0
 8006e68:	f280 80d4 	bge.w	8007014 <__kernel_rem_pio2+0x474>
 8006e6c:	462c      	mov	r4, r5
 8006e6e:	2c00      	cmp	r4, #0
 8006e70:	f2c0 8102 	blt.w	8007078 <__kernel_rem_pio2+0x4d8>
 8006e74:	4b18      	ldr	r3, [pc, #96]	; (8006ed8 <__kernel_rem_pio2+0x338>)
 8006e76:	461e      	mov	r6, r3
 8006e78:	ab70      	add	r3, sp, #448	; 0x1c0
 8006e7a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8006e7e:	1b2b      	subs	r3, r5, r4
 8006e80:	f04f 0900 	mov.w	r9, #0
 8006e84:	f04f 0a00 	mov.w	sl, #0
 8006e88:	2700      	movs	r7, #0
 8006e8a:	9306      	str	r3, [sp, #24]
 8006e8c:	e0e6      	b.n	800705c <__kernel_rem_pio2+0x4bc>
 8006e8e:	f04f 0b02 	mov.w	fp, #2
 8006e92:	e756      	b.n	8006d42 <__kernel_rem_pio2+0x1a2>
 8006e94:	f8d8 3000 	ldr.w	r3, [r8]
 8006e98:	bb05      	cbnz	r5, 8006edc <__kernel_rem_pio2+0x33c>
 8006e9a:	b123      	cbz	r3, 8006ea6 <__kernel_rem_pio2+0x306>
 8006e9c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006ea0:	f8c8 3000 	str.w	r3, [r8]
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	3201      	adds	r2, #1
 8006ea8:	f108 0804 	add.w	r8, r8, #4
 8006eac:	461d      	mov	r5, r3
 8006eae:	e74f      	b.n	8006d50 <__kernel_rem_pio2+0x1b0>
	...
 8006ebc:	3ff00000 	.word	0x3ff00000
 8006ec0:	08007530 	.word	0x08007530
 8006ec4:	40200000 	.word	0x40200000
 8006ec8:	3ff00000 	.word	0x3ff00000
 8006ecc:	3e700000 	.word	0x3e700000
 8006ed0:	41700000 	.word	0x41700000
 8006ed4:	3fe00000 	.word	0x3fe00000
 8006ed8:	080074f0 	.word	0x080074f0
 8006edc:	1acb      	subs	r3, r1, r3
 8006ede:	f8c8 3000 	str.w	r3, [r8]
 8006ee2:	462b      	mov	r3, r5
 8006ee4:	e7df      	b.n	8006ea6 <__kernel_rem_pio2+0x306>
 8006ee6:	1e62      	subs	r2, r4, #1
 8006ee8:	ab0c      	add	r3, sp, #48	; 0x30
 8006eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eee:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006ef2:	a90c      	add	r1, sp, #48	; 0x30
 8006ef4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006ef8:	e738      	b.n	8006d6c <__kernel_rem_pio2+0x1cc>
 8006efa:	1e62      	subs	r2, r4, #1
 8006efc:	ab0c      	add	r3, sp, #48	; 0x30
 8006efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f02:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006f06:	e7f4      	b.n	8006ef2 <__kernel_rem_pio2+0x352>
 8006f08:	a90c      	add	r1, sp, #48	; 0x30
 8006f0a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	430a      	orrs	r2, r1
 8006f12:	e788      	b.n	8006e26 <__kernel_rem_pio2+0x286>
 8006f14:	3301      	adds	r3, #1
 8006f16:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006f1a:	2900      	cmp	r1, #0
 8006f1c:	d0fa      	beq.n	8006f14 <__kernel_rem_pio2+0x374>
 8006f1e:	9a08      	ldr	r2, [sp, #32]
 8006f20:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8006f24:	446a      	add	r2, sp
 8006f26:	3a98      	subs	r2, #152	; 0x98
 8006f28:	9208      	str	r2, [sp, #32]
 8006f2a:	9a06      	ldr	r2, [sp, #24]
 8006f2c:	a920      	add	r1, sp, #128	; 0x80
 8006f2e:	18a2      	adds	r2, r4, r2
 8006f30:	18e3      	adds	r3, r4, r3
 8006f32:	f104 0801 	add.w	r8, r4, #1
 8006f36:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8006f3a:	9302      	str	r3, [sp, #8]
 8006f3c:	9b02      	ldr	r3, [sp, #8]
 8006f3e:	4543      	cmp	r3, r8
 8006f40:	da04      	bge.n	8006f4c <__kernel_rem_pio2+0x3ac>
 8006f42:	461c      	mov	r4, r3
 8006f44:	e6a2      	b.n	8006c8c <__kernel_rem_pio2+0xec>
 8006f46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e7e4      	b.n	8006f16 <__kernel_rem_pio2+0x376>
 8006f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f4e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006f52:	f7f9 fa8b 	bl	800046c <__aeabi_i2d>
 8006f56:	e8e5 0102 	strd	r0, r1, [r5], #8
 8006f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f5c:	46ab      	mov	fp, r5
 8006f5e:	461c      	mov	r4, r3
 8006f60:	f04f 0900 	mov.w	r9, #0
 8006f64:	2600      	movs	r6, #0
 8006f66:	2700      	movs	r7, #0
 8006f68:	9b05      	ldr	r3, [sp, #20]
 8006f6a:	4599      	cmp	r9, r3
 8006f6c:	dd06      	ble.n	8006f7c <__kernel_rem_pio2+0x3dc>
 8006f6e:	9b08      	ldr	r3, [sp, #32]
 8006f70:	e8e3 6702 	strd	r6, r7, [r3], #8
 8006f74:	f108 0801 	add.w	r8, r8, #1
 8006f78:	9308      	str	r3, [sp, #32]
 8006f7a:	e7df      	b.n	8006f3c <__kernel_rem_pio2+0x39c>
 8006f7c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006f80:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006f84:	f7f9 fadc 	bl	8000540 <__aeabi_dmul>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	4630      	mov	r0, r6
 8006f8e:	4639      	mov	r1, r7
 8006f90:	f7f9 f920 	bl	80001d4 <__adddf3>
 8006f94:	f109 0901 	add.w	r9, r9, #1
 8006f98:	4606      	mov	r6, r0
 8006f9a:	460f      	mov	r7, r1
 8006f9c:	e7e4      	b.n	8006f68 <__kernel_rem_pio2+0x3c8>
 8006f9e:	3d01      	subs	r5, #1
 8006fa0:	e747      	b.n	8006e32 <__kernel_rem_pio2+0x292>
 8006fa2:	ec47 6b10 	vmov	d0, r6, r7
 8006fa6:	f1ca 0000 	rsb	r0, sl, #0
 8006faa:	f7ff fd79 	bl	8006aa0 <scalbn>
 8006fae:	ec57 6b10 	vmov	r6, r7, d0
 8006fb2:	4ba0      	ldr	r3, [pc, #640]	; (8007234 <__kernel_rem_pio2+0x694>)
 8006fb4:	ee10 0a10 	vmov	r0, s0
 8006fb8:	2200      	movs	r2, #0
 8006fba:	4639      	mov	r1, r7
 8006fbc:	f7f9 fd46 	bl	8000a4c <__aeabi_dcmpge>
 8006fc0:	b1f8      	cbz	r0, 8007002 <__kernel_rem_pio2+0x462>
 8006fc2:	4b9d      	ldr	r3, [pc, #628]	; (8007238 <__kernel_rem_pio2+0x698>)
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	4630      	mov	r0, r6
 8006fc8:	4639      	mov	r1, r7
 8006fca:	f7f9 fab9 	bl	8000540 <__aeabi_dmul>
 8006fce:	f7f9 fd51 	bl	8000a74 <__aeabi_d2iz>
 8006fd2:	4680      	mov	r8, r0
 8006fd4:	f7f9 fa4a 	bl	800046c <__aeabi_i2d>
 8006fd8:	4b96      	ldr	r3, [pc, #600]	; (8007234 <__kernel_rem_pio2+0x694>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f7f9 fab0 	bl	8000540 <__aeabi_dmul>
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	4639      	mov	r1, r7
 8006fe6:	4630      	mov	r0, r6
 8006fe8:	f7f9 f8f2 	bl	80001d0 <__aeabi_dsub>
 8006fec:	f7f9 fd42 	bl	8000a74 <__aeabi_d2iz>
 8006ff0:	1c65      	adds	r5, r4, #1
 8006ff2:	ab0c      	add	r3, sp, #48	; 0x30
 8006ff4:	f10a 0a18 	add.w	sl, sl, #24
 8006ff8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006ffc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007000:	e71f      	b.n	8006e42 <__kernel_rem_pio2+0x2a2>
 8007002:	4630      	mov	r0, r6
 8007004:	4639      	mov	r1, r7
 8007006:	f7f9 fd35 	bl	8000a74 <__aeabi_d2iz>
 800700a:	ab0c      	add	r3, sp, #48	; 0x30
 800700c:	4625      	mov	r5, r4
 800700e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007012:	e716      	b.n	8006e42 <__kernel_rem_pio2+0x2a2>
 8007014:	ab0c      	add	r3, sp, #48	; 0x30
 8007016:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800701a:	f7f9 fa27 	bl	800046c <__aeabi_i2d>
 800701e:	4632      	mov	r2, r6
 8007020:	463b      	mov	r3, r7
 8007022:	f7f9 fa8d 	bl	8000540 <__aeabi_dmul>
 8007026:	4642      	mov	r2, r8
 8007028:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800702c:	464b      	mov	r3, r9
 800702e:	4630      	mov	r0, r6
 8007030:	4639      	mov	r1, r7
 8007032:	f7f9 fa85 	bl	8000540 <__aeabi_dmul>
 8007036:	3c01      	subs	r4, #1
 8007038:	4606      	mov	r6, r0
 800703a:	460f      	mov	r7, r1
 800703c:	e713      	b.n	8006e66 <__kernel_rem_pio2+0x2c6>
 800703e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8007042:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8007046:	f7f9 fa7b 	bl	8000540 <__aeabi_dmul>
 800704a:	4602      	mov	r2, r0
 800704c:	460b      	mov	r3, r1
 800704e:	4648      	mov	r0, r9
 8007050:	4651      	mov	r1, sl
 8007052:	f7f9 f8bf 	bl	80001d4 <__adddf3>
 8007056:	3701      	adds	r7, #1
 8007058:	4681      	mov	r9, r0
 800705a:	468a      	mov	sl, r1
 800705c:	9b00      	ldr	r3, [sp, #0]
 800705e:	429f      	cmp	r7, r3
 8007060:	dc02      	bgt.n	8007068 <__kernel_rem_pio2+0x4c8>
 8007062:	9b06      	ldr	r3, [sp, #24]
 8007064:	429f      	cmp	r7, r3
 8007066:	ddea      	ble.n	800703e <__kernel_rem_pio2+0x49e>
 8007068:	9a06      	ldr	r2, [sp, #24]
 800706a:	ab48      	add	r3, sp, #288	; 0x120
 800706c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8007070:	e9c6 9a00 	strd	r9, sl, [r6]
 8007074:	3c01      	subs	r4, #1
 8007076:	e6fa      	b.n	8006e6e <__kernel_rem_pio2+0x2ce>
 8007078:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800707a:	2b02      	cmp	r3, #2
 800707c:	dc0b      	bgt.n	8007096 <__kernel_rem_pio2+0x4f6>
 800707e:	2b00      	cmp	r3, #0
 8007080:	dc39      	bgt.n	80070f6 <__kernel_rem_pio2+0x556>
 8007082:	d05d      	beq.n	8007140 <__kernel_rem_pio2+0x5a0>
 8007084:	9b02      	ldr	r3, [sp, #8]
 8007086:	f003 0007 	and.w	r0, r3, #7
 800708a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800708e:	ecbd 8b02 	vpop	{d8}
 8007092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007096:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007098:	2b03      	cmp	r3, #3
 800709a:	d1f3      	bne.n	8007084 <__kernel_rem_pio2+0x4e4>
 800709c:	9b05      	ldr	r3, [sp, #20]
 800709e:	9500      	str	r5, [sp, #0]
 80070a0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80070a4:	eb0d 0403 	add.w	r4, sp, r3
 80070a8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80070ac:	46a2      	mov	sl, r4
 80070ae:	9b00      	ldr	r3, [sp, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f1aa 0a08 	sub.w	sl, sl, #8
 80070b6:	dc69      	bgt.n	800718c <__kernel_rem_pio2+0x5ec>
 80070b8:	46aa      	mov	sl, r5
 80070ba:	f1ba 0f01 	cmp.w	sl, #1
 80070be:	f1a4 0408 	sub.w	r4, r4, #8
 80070c2:	f300 8083 	bgt.w	80071cc <__kernel_rem_pio2+0x62c>
 80070c6:	9c05      	ldr	r4, [sp, #20]
 80070c8:	ab48      	add	r3, sp, #288	; 0x120
 80070ca:	441c      	add	r4, r3
 80070cc:	2000      	movs	r0, #0
 80070ce:	2100      	movs	r1, #0
 80070d0:	2d01      	cmp	r5, #1
 80070d2:	f300 809a 	bgt.w	800720a <__kernel_rem_pio2+0x66a>
 80070d6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80070da:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80070de:	f1bb 0f00 	cmp.w	fp, #0
 80070e2:	f040 8098 	bne.w	8007216 <__kernel_rem_pio2+0x676>
 80070e6:	9b04      	ldr	r3, [sp, #16]
 80070e8:	e9c3 7800 	strd	r7, r8, [r3]
 80070ec:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80070f0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80070f4:	e7c6      	b.n	8007084 <__kernel_rem_pio2+0x4e4>
 80070f6:	9e05      	ldr	r6, [sp, #20]
 80070f8:	ab48      	add	r3, sp, #288	; 0x120
 80070fa:	441e      	add	r6, r3
 80070fc:	462c      	mov	r4, r5
 80070fe:	2000      	movs	r0, #0
 8007100:	2100      	movs	r1, #0
 8007102:	2c00      	cmp	r4, #0
 8007104:	da33      	bge.n	800716e <__kernel_rem_pio2+0x5ce>
 8007106:	f1bb 0f00 	cmp.w	fp, #0
 800710a:	d036      	beq.n	800717a <__kernel_rem_pio2+0x5da>
 800710c:	4602      	mov	r2, r0
 800710e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007112:	9c04      	ldr	r4, [sp, #16]
 8007114:	e9c4 2300 	strd	r2, r3, [r4]
 8007118:	4602      	mov	r2, r0
 800711a:	460b      	mov	r3, r1
 800711c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007120:	f7f9 f856 	bl	80001d0 <__aeabi_dsub>
 8007124:	ae4a      	add	r6, sp, #296	; 0x128
 8007126:	2401      	movs	r4, #1
 8007128:	42a5      	cmp	r5, r4
 800712a:	da29      	bge.n	8007180 <__kernel_rem_pio2+0x5e0>
 800712c:	f1bb 0f00 	cmp.w	fp, #0
 8007130:	d002      	beq.n	8007138 <__kernel_rem_pio2+0x598>
 8007132:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007136:	4619      	mov	r1, r3
 8007138:	9b04      	ldr	r3, [sp, #16]
 800713a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800713e:	e7a1      	b.n	8007084 <__kernel_rem_pio2+0x4e4>
 8007140:	9c05      	ldr	r4, [sp, #20]
 8007142:	ab48      	add	r3, sp, #288	; 0x120
 8007144:	441c      	add	r4, r3
 8007146:	2000      	movs	r0, #0
 8007148:	2100      	movs	r1, #0
 800714a:	2d00      	cmp	r5, #0
 800714c:	da09      	bge.n	8007162 <__kernel_rem_pio2+0x5c2>
 800714e:	f1bb 0f00 	cmp.w	fp, #0
 8007152:	d002      	beq.n	800715a <__kernel_rem_pio2+0x5ba>
 8007154:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007158:	4619      	mov	r1, r3
 800715a:	9b04      	ldr	r3, [sp, #16]
 800715c:	e9c3 0100 	strd	r0, r1, [r3]
 8007160:	e790      	b.n	8007084 <__kernel_rem_pio2+0x4e4>
 8007162:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007166:	f7f9 f835 	bl	80001d4 <__adddf3>
 800716a:	3d01      	subs	r5, #1
 800716c:	e7ed      	b.n	800714a <__kernel_rem_pio2+0x5aa>
 800716e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8007172:	f7f9 f82f 	bl	80001d4 <__adddf3>
 8007176:	3c01      	subs	r4, #1
 8007178:	e7c3      	b.n	8007102 <__kernel_rem_pio2+0x562>
 800717a:	4602      	mov	r2, r0
 800717c:	460b      	mov	r3, r1
 800717e:	e7c8      	b.n	8007112 <__kernel_rem_pio2+0x572>
 8007180:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007184:	f7f9 f826 	bl	80001d4 <__adddf3>
 8007188:	3401      	adds	r4, #1
 800718a:	e7cd      	b.n	8007128 <__kernel_rem_pio2+0x588>
 800718c:	e9da 8900 	ldrd	r8, r9, [sl]
 8007190:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007194:	9b00      	ldr	r3, [sp, #0]
 8007196:	3b01      	subs	r3, #1
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	4632      	mov	r2, r6
 800719c:	463b      	mov	r3, r7
 800719e:	4640      	mov	r0, r8
 80071a0:	4649      	mov	r1, r9
 80071a2:	f7f9 f817 	bl	80001d4 <__adddf3>
 80071a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80071aa:	4602      	mov	r2, r0
 80071ac:	460b      	mov	r3, r1
 80071ae:	4640      	mov	r0, r8
 80071b0:	4649      	mov	r1, r9
 80071b2:	f7f9 f80d 	bl	80001d0 <__aeabi_dsub>
 80071b6:	4632      	mov	r2, r6
 80071b8:	463b      	mov	r3, r7
 80071ba:	f7f9 f80b 	bl	80001d4 <__adddf3>
 80071be:	ed9d 7b06 	vldr	d7, [sp, #24]
 80071c2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80071c6:	ed8a 7b00 	vstr	d7, [sl]
 80071ca:	e770      	b.n	80070ae <__kernel_rem_pio2+0x50e>
 80071cc:	e9d4 8900 	ldrd	r8, r9, [r4]
 80071d0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80071d4:	4640      	mov	r0, r8
 80071d6:	4632      	mov	r2, r6
 80071d8:	463b      	mov	r3, r7
 80071da:	4649      	mov	r1, r9
 80071dc:	f7f8 fffa 	bl	80001d4 <__adddf3>
 80071e0:	e9cd 0100 	strd	r0, r1, [sp]
 80071e4:	4602      	mov	r2, r0
 80071e6:	460b      	mov	r3, r1
 80071e8:	4640      	mov	r0, r8
 80071ea:	4649      	mov	r1, r9
 80071ec:	f7f8 fff0 	bl	80001d0 <__aeabi_dsub>
 80071f0:	4632      	mov	r2, r6
 80071f2:	463b      	mov	r3, r7
 80071f4:	f7f8 ffee 	bl	80001d4 <__adddf3>
 80071f8:	ed9d 7b00 	vldr	d7, [sp]
 80071fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007200:	ed84 7b00 	vstr	d7, [r4]
 8007204:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007208:	e757      	b.n	80070ba <__kernel_rem_pio2+0x51a>
 800720a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800720e:	f7f8 ffe1 	bl	80001d4 <__adddf3>
 8007212:	3d01      	subs	r5, #1
 8007214:	e75c      	b.n	80070d0 <__kernel_rem_pio2+0x530>
 8007216:	9b04      	ldr	r3, [sp, #16]
 8007218:	9a04      	ldr	r2, [sp, #16]
 800721a:	601f      	str	r7, [r3, #0]
 800721c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8007220:	605c      	str	r4, [r3, #4]
 8007222:	609d      	str	r5, [r3, #8]
 8007224:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007228:	60d3      	str	r3, [r2, #12]
 800722a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800722e:	6110      	str	r0, [r2, #16]
 8007230:	6153      	str	r3, [r2, #20]
 8007232:	e727      	b.n	8007084 <__kernel_rem_pio2+0x4e4>
 8007234:	41700000 	.word	0x41700000
 8007238:	3e700000 	.word	0x3e700000
 800723c:	00000000 	.word	0x00000000

08007240 <floor>:
 8007240:	ec51 0b10 	vmov	r0, r1, d0
 8007244:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800724c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8007250:	2e13      	cmp	r6, #19
 8007252:	ee10 5a10 	vmov	r5, s0
 8007256:	ee10 8a10 	vmov	r8, s0
 800725a:	460c      	mov	r4, r1
 800725c:	dc31      	bgt.n	80072c2 <floor+0x82>
 800725e:	2e00      	cmp	r6, #0
 8007260:	da14      	bge.n	800728c <floor+0x4c>
 8007262:	a333      	add	r3, pc, #204	; (adr r3, 8007330 <floor+0xf0>)
 8007264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007268:	f7f8 ffb4 	bl	80001d4 <__adddf3>
 800726c:	2200      	movs	r2, #0
 800726e:	2300      	movs	r3, #0
 8007270:	f7f9 fbf6 	bl	8000a60 <__aeabi_dcmpgt>
 8007274:	b138      	cbz	r0, 8007286 <floor+0x46>
 8007276:	2c00      	cmp	r4, #0
 8007278:	da53      	bge.n	8007322 <floor+0xe2>
 800727a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800727e:	4325      	orrs	r5, r4
 8007280:	d052      	beq.n	8007328 <floor+0xe8>
 8007282:	4c2d      	ldr	r4, [pc, #180]	; (8007338 <floor+0xf8>)
 8007284:	2500      	movs	r5, #0
 8007286:	4621      	mov	r1, r4
 8007288:	4628      	mov	r0, r5
 800728a:	e024      	b.n	80072d6 <floor+0x96>
 800728c:	4f2b      	ldr	r7, [pc, #172]	; (800733c <floor+0xfc>)
 800728e:	4137      	asrs	r7, r6
 8007290:	ea01 0307 	and.w	r3, r1, r7
 8007294:	4303      	orrs	r3, r0
 8007296:	d01e      	beq.n	80072d6 <floor+0x96>
 8007298:	a325      	add	r3, pc, #148	; (adr r3, 8007330 <floor+0xf0>)
 800729a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729e:	f7f8 ff99 	bl	80001d4 <__adddf3>
 80072a2:	2200      	movs	r2, #0
 80072a4:	2300      	movs	r3, #0
 80072a6:	f7f9 fbdb 	bl	8000a60 <__aeabi_dcmpgt>
 80072aa:	2800      	cmp	r0, #0
 80072ac:	d0eb      	beq.n	8007286 <floor+0x46>
 80072ae:	2c00      	cmp	r4, #0
 80072b0:	bfbe      	ittt	lt
 80072b2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80072b6:	4133      	asrlt	r3, r6
 80072b8:	18e4      	addlt	r4, r4, r3
 80072ba:	ea24 0407 	bic.w	r4, r4, r7
 80072be:	2500      	movs	r5, #0
 80072c0:	e7e1      	b.n	8007286 <floor+0x46>
 80072c2:	2e33      	cmp	r6, #51	; 0x33
 80072c4:	dd0b      	ble.n	80072de <floor+0x9e>
 80072c6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80072ca:	d104      	bne.n	80072d6 <floor+0x96>
 80072cc:	ee10 2a10 	vmov	r2, s0
 80072d0:	460b      	mov	r3, r1
 80072d2:	f7f8 ff7f 	bl	80001d4 <__adddf3>
 80072d6:	ec41 0b10 	vmov	d0, r0, r1
 80072da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072de:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80072e2:	f04f 37ff 	mov.w	r7, #4294967295
 80072e6:	40df      	lsrs	r7, r3
 80072e8:	4238      	tst	r0, r7
 80072ea:	d0f4      	beq.n	80072d6 <floor+0x96>
 80072ec:	a310      	add	r3, pc, #64	; (adr r3, 8007330 <floor+0xf0>)
 80072ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f2:	f7f8 ff6f 	bl	80001d4 <__adddf3>
 80072f6:	2200      	movs	r2, #0
 80072f8:	2300      	movs	r3, #0
 80072fa:	f7f9 fbb1 	bl	8000a60 <__aeabi_dcmpgt>
 80072fe:	2800      	cmp	r0, #0
 8007300:	d0c1      	beq.n	8007286 <floor+0x46>
 8007302:	2c00      	cmp	r4, #0
 8007304:	da0a      	bge.n	800731c <floor+0xdc>
 8007306:	2e14      	cmp	r6, #20
 8007308:	d101      	bne.n	800730e <floor+0xce>
 800730a:	3401      	adds	r4, #1
 800730c:	e006      	b.n	800731c <floor+0xdc>
 800730e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007312:	2301      	movs	r3, #1
 8007314:	40b3      	lsls	r3, r6
 8007316:	441d      	add	r5, r3
 8007318:	45a8      	cmp	r8, r5
 800731a:	d8f6      	bhi.n	800730a <floor+0xca>
 800731c:	ea25 0507 	bic.w	r5, r5, r7
 8007320:	e7b1      	b.n	8007286 <floor+0x46>
 8007322:	2500      	movs	r5, #0
 8007324:	462c      	mov	r4, r5
 8007326:	e7ae      	b.n	8007286 <floor+0x46>
 8007328:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800732c:	e7ab      	b.n	8007286 <floor+0x46>
 800732e:	bf00      	nop
 8007330:	8800759c 	.word	0x8800759c
 8007334:	7e37e43c 	.word	0x7e37e43c
 8007338:	bff00000 	.word	0xbff00000
 800733c:	000fffff 	.word	0x000fffff

08007340 <_init>:
 8007340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007342:	bf00      	nop
 8007344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007346:	bc08      	pop	{r3}
 8007348:	469e      	mov	lr, r3
 800734a:	4770      	bx	lr

0800734c <_fini>:
 800734c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734e:	bf00      	nop
 8007350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007352:	bc08      	pop	{r3}
 8007354:	469e      	mov	lr, r3
 8007356:	4770      	bx	lr
