// Generated by gencpp from file ros_can_interface/lidar_stopSignal.msg
// DO NOT EDIT!


#ifndef ROS_CAN_INTERFACE_MESSAGE_LIDAR_STOPSIGNAL_H
#define ROS_CAN_INTERFACE_MESSAGE_LIDAR_STOPSIGNAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_can_interface
{
template <class ContainerAllocator>
struct lidar_stopSignal_
{
  typedef lidar_stopSignal_<ContainerAllocator> Type;

  lidar_stopSignal_()
    : stopSignalState(false)  {
    }
  lidar_stopSignal_(const ContainerAllocator& _alloc)
    : stopSignalState(false)  {
  (void)_alloc;
    }



   typedef uint8_t _stopSignalState_type;
  _stopSignalState_type stopSignalState;





  typedef boost::shared_ptr< ::ros_can_interface::lidar_stopSignal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_can_interface::lidar_stopSignal_<ContainerAllocator> const> ConstPtr;

}; // struct lidar_stopSignal_

typedef ::ros_can_interface::lidar_stopSignal_<std::allocator<void> > lidar_stopSignal;

typedef boost::shared_ptr< ::ros_can_interface::lidar_stopSignal > lidar_stopSignalPtr;
typedef boost::shared_ptr< ::ros_can_interface::lidar_stopSignal const> lidar_stopSignalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_can_interface::lidar_stopSignal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_can_interface::lidar_stopSignal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_can_interface::lidar_stopSignal_<ContainerAllocator1> & lhs, const ::ros_can_interface::lidar_stopSignal_<ContainerAllocator2> & rhs)
{
  return lhs.stopSignalState == rhs.stopSignalState;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_can_interface::lidar_stopSignal_<ContainerAllocator1> & lhs, const ::ros_can_interface::lidar_stopSignal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_can_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_can_interface::lidar_stopSignal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_can_interface::lidar_stopSignal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_can_interface::lidar_stopSignal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_can_interface::lidar_stopSignal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_can_interface::lidar_stopSignal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_can_interface::lidar_stopSignal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_can_interface::lidar_stopSignal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "096988a79a296361c0020ef3b05a1428";
  }

  static const char* value(const ::ros_can_interface::lidar_stopSignal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x096988a79a296361ULL;
  static const uint64_t static_value2 = 0xc0020ef3b05a1428ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_can_interface::lidar_stopSignal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_can_interface/lidar_stopSignal";
  }

  static const char* value(const ::ros_can_interface::lidar_stopSignal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_can_interface::lidar_stopSignal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool stopSignalState\n"
;
  }

  static const char* value(const ::ros_can_interface::lidar_stopSignal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_can_interface::lidar_stopSignal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stopSignalState);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lidar_stopSignal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_can_interface::lidar_stopSignal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_can_interface::lidar_stopSignal_<ContainerAllocator>& v)
  {
    s << indent << "stopSignalState: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stopSignalState);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_CAN_INTERFACE_MESSAGE_LIDAR_STOPSIGNAL_H
