// Generated by gencpp from file ros_can_interface/navigator_navigationMessage.msg
// DO NOT EDIT!


#ifndef ROS_CAN_INTERFACE_MESSAGE_NAVIGATOR_NAVIGATIONMESSAGE_H
#define ROS_CAN_INTERFACE_MESSAGE_NAVIGATOR_NAVIGATIONMESSAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_can_interface
{
template <class ContainerAllocator>
struct navigator_navigationMessage_
{
  typedef navigator_navigationMessage_<ContainerAllocator> Type;

  navigator_navigationMessage_()
    : nav_currentX(0.0)
    , nav_currentY(0.0)
    , nav_currentAngle(0.0)
    , nav_currentState(0)  {
    }
  navigator_navigationMessage_(const ContainerAllocator& _alloc)
    : nav_currentX(0.0)
    , nav_currentY(0.0)
    , nav_currentAngle(0.0)
    , nav_currentState(0)  {
  (void)_alloc;
    }



   typedef float _nav_currentX_type;
  _nav_currentX_type nav_currentX;

   typedef float _nav_currentY_type;
  _nav_currentY_type nav_currentY;

   typedef float _nav_currentAngle_type;
  _nav_currentAngle_type nav_currentAngle;

   typedef int8_t _nav_currentState_type;
  _nav_currentState_type nav_currentState;





  typedef boost::shared_ptr< ::ros_can_interface::navigator_navigationMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_can_interface::navigator_navigationMessage_<ContainerAllocator> const> ConstPtr;

}; // struct navigator_navigationMessage_

typedef ::ros_can_interface::navigator_navigationMessage_<std::allocator<void> > navigator_navigationMessage;

typedef boost::shared_ptr< ::ros_can_interface::navigator_navigationMessage > navigator_navigationMessagePtr;
typedef boost::shared_ptr< ::ros_can_interface::navigator_navigationMessage const> navigator_navigationMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_can_interface::navigator_navigationMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_can_interface::navigator_navigationMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_can_interface::navigator_navigationMessage_<ContainerAllocator1> & lhs, const ::ros_can_interface::navigator_navigationMessage_<ContainerAllocator2> & rhs)
{
  return lhs.nav_currentX == rhs.nav_currentX &&
    lhs.nav_currentY == rhs.nav_currentY &&
    lhs.nav_currentAngle == rhs.nav_currentAngle &&
    lhs.nav_currentState == rhs.nav_currentState;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_can_interface::navigator_navigationMessage_<ContainerAllocator1> & lhs, const ::ros_can_interface::navigator_navigationMessage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_can_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_can_interface::navigator_navigationMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_can_interface::navigator_navigationMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_can_interface::navigator_navigationMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_can_interface::navigator_navigationMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_can_interface::navigator_navigationMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_can_interface::navigator_navigationMessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_can_interface::navigator_navigationMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "90176a0f60fd26d08c0aaca4ecb268df";
  }

  static const char* value(const ::ros_can_interface::navigator_navigationMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x90176a0f60fd26d0ULL;
  static const uint64_t static_value2 = 0x8c0aaca4ecb268dfULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_can_interface::navigator_navigationMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_can_interface/navigator_navigationMessage";
  }

  static const char* value(const ::ros_can_interface::navigator_navigationMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_can_interface::navigator_navigationMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 nav_currentX\n"
"float32 nav_currentY\n"
"float32 nav_currentAngle\n"
"int8 nav_currentState\n"
;
  }

  static const char* value(const ::ros_can_interface::navigator_navigationMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_can_interface::navigator_navigationMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.nav_currentX);
      stream.next(m.nav_currentY);
      stream.next(m.nav_currentAngle);
      stream.next(m.nav_currentState);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct navigator_navigationMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_can_interface::navigator_navigationMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_can_interface::navigator_navigationMessage_<ContainerAllocator>& v)
  {
    s << indent << "nav_currentX: ";
    Printer<float>::stream(s, indent + "  ", v.nav_currentX);
    s << indent << "nav_currentY: ";
    Printer<float>::stream(s, indent + "  ", v.nav_currentY);
    s << indent << "nav_currentAngle: ";
    Printer<float>::stream(s, indent + "  ", v.nav_currentAngle);
    s << indent << "nav_currentState: ";
    Printer<int8_t>::stream(s, indent + "  ", v.nav_currentState);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_CAN_INTERFACE_MESSAGE_NAVIGATOR_NAVIGATIONMESSAGE_H
