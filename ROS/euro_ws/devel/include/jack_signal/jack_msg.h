// Generated by gencpp from file jack_signal/jack_msg.msg
// DO NOT EDIT!


#ifndef JACK_SIGNAL_MESSAGE_JACK_MSG_H
#define JACK_SIGNAL_MESSAGE_JACK_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jack_signal
{
template <class ContainerAllocator>
struct jack_msg_
{
  typedef jack_msg_<ContainerAllocator> Type;

  jack_msg_()
    : jack_state(false)  {
    }
  jack_msg_(const ContainerAllocator& _alloc)
    : jack_state(false)  {
  (void)_alloc;
    }



   typedef uint8_t _jack_state_type;
  _jack_state_type jack_state;





  typedef boost::shared_ptr< ::jack_signal::jack_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jack_signal::jack_msg_<ContainerAllocator> const> ConstPtr;

}; // struct jack_msg_

typedef ::jack_signal::jack_msg_<std::allocator<void> > jack_msg;

typedef boost::shared_ptr< ::jack_signal::jack_msg > jack_msgPtr;
typedef boost::shared_ptr< ::jack_signal::jack_msg const> jack_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jack_signal::jack_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jack_signal::jack_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jack_signal::jack_msg_<ContainerAllocator1> & lhs, const ::jack_signal::jack_msg_<ContainerAllocator2> & rhs)
{
  return lhs.jack_state == rhs.jack_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jack_signal::jack_msg_<ContainerAllocator1> & lhs, const ::jack_signal::jack_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jack_signal

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jack_signal::jack_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jack_signal::jack_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jack_signal::jack_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jack_signal::jack_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jack_signal::jack_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jack_signal::jack_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jack_signal::jack_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "452828b561eb89702df2b017469a83ed";
  }

  static const char* value(const ::jack_signal::jack_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x452828b561eb8970ULL;
  static const uint64_t static_value2 = 0x2df2b017469a83edULL;
};

template<class ContainerAllocator>
struct DataType< ::jack_signal::jack_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jack_signal/jack_msg";
  }

  static const char* value(const ::jack_signal::jack_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jack_signal::jack_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool jack_state\n"
;
  }

  static const char* value(const ::jack_signal::jack_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jack_signal::jack_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.jack_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct jack_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jack_signal::jack_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jack_signal::jack_msg_<ContainerAllocator>& v)
  {
    s << indent << "jack_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.jack_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JACK_SIGNAL_MESSAGE_JACK_MSG_H
